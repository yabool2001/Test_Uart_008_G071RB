
Test_Uart_008_G071RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004654  08004654  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800465c  0800465c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000098  080046fc  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080046fc  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136e3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d6  00000000  00000000  000337a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00035d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00036e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c00  00000000  00000000  00037da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013368  00000000  00000000  000519a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a797a  00000000  00000000  00064d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c68a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  0010c6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000098 	.word	0x20000098
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004544 	.word	0x08004544

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000009c 	.word	0x2000009c
 8000100:	08004544 	.word	0x08004544

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fcbe 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f832 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f9a2 	bl	8000994 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f952 	bl	80008f8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000654:	f000 f878 	bl	8000748 <MX_RTC_Init>
  MX_TIM14_Init();
 8000658:	f000 f8ae 	bl	80007b8 <MX_TIM14_Init>
  MX_TIM16_Init();
 800065c:	f000 f8d4 	bl	8000808 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000660:	f000 f8fc 	bl	800085c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
  //__HAL_TIM_CLEAR_IT ( &htim16 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta

  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <main+0x5c>)
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff fd4c 	bl	8000104 <strlen>
 800066c:	0003      	movs	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	490a      	ldr	r1, [pc, #40]	; (800069c <main+0x5c>)
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <main+0x60>)
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	f002 fb85 	bl	8002d84 <HAL_UART_Transmit>
 800067a:	0003      	movs	r3, r0
 800067c:	001a      	movs	r2, r3
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <main+0x64>)
 8000680:	701a      	strb	r2, [r3, #0]
	  /* I found couple of threads that deal with this situation and they suggested to implement HAL_UART_ErrorCallback() and clear the ORE.
	   * https://community.st.com/s/question/0D50X00009ZEOZ3SAP/nucleo-f767zi-system-freeze-upon-uart-ore-interrupt
	   */
	  //__HAL_UART_CLEAR_OREFLAG ( &huart2 ) ;
	  //__HAL_UART_CLEAR_IDLEFLAG ( &huart2 ) ;
	  send2uart ( &huart2 , gn_mostrecent_at_comm , gn_mostrecent_answer ) ;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <main+0x68>)
 8000684:	6819      	ldr	r1, [r3, #0]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <main+0x6c>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <main+0x60>)
 800068c:	0018      	movs	r0, r3
 800068e:	f000 f9d1 	bl	8000a34 <send2uart>
	  //__HAL_UART_CLEAR_OREFLAG ( &huart2 ) ;
	  //__HAL_UART_CLEAR_IDLEFLAG ( &huart2 ) ;
	  wait_for_tim14x ( 2 ) ;
 8000692:	2002      	movs	r0, #2
 8000694:	f000 fa3a 	bl	8000b0c <wait_for_tim14x>
	  send2uart ( &huart2 , gn_mostrecent_at_comm , gn_mostrecent_answer ) ;
 8000698:	e7f3      	b.n	8000682 <main+0x42>
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	20000000 	.word	0x20000000
 80006a0:	2000020c 	.word	0x2000020c
 80006a4:	200002a2 	.word	0x200002a2
 80006a8:	20000020 	.word	0x20000020
 80006ac:	20000024 	.word	0x20000024

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b093      	sub	sp, #76	; 0x4c
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	2410      	movs	r4, #16
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2338      	movs	r3, #56	; 0x38
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 fabd 	bl	8003c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	003b      	movs	r3, r7
 80006c8:	0018      	movs	r0, r3
 80006ca:	2310      	movs	r3, #16
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f003 fab6 	bl	8003c40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 ff59 	bl	8001590 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	220a      	movs	r2, #10
 80006e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ec:	0021      	movs	r1, r4
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2240      	movs	r2, #64	; 0x40
 80006f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	187b      	adds	r3, r7, r1
 8000708:	0018      	movs	r0, r3
 800070a:	f000 ff8d 	bl	8001628 <HAL_RCC_OscConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000712:	f000 fa55 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	003b      	movs	r3, r7
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	003b      	movs	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072e:	003b      	movs	r3, r7
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fa92 	bl	8001c5c <HAL_RCC_ClockConfig>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800073c:	f000 fa40 	bl	8000bc0 <Error_Handler>
  }
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b013      	add	sp, #76	; 0x4c
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_RTC_Init+0x68>)
 800074e:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <MX_RTC_Init+0x6c>)
 8000750:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_RTC_Init+0x68>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_RTC_Init+0x68>)
 800075a:	227f      	movs	r2, #127	; 0x7f
 800075c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_RTC_Init+0x68>)
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_RTC_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_RTC_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_RTC_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_RTC_Init+0x68>)
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	05d2      	lsls	r2, r2, #23
 800077c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_RTC_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_RTC_Init+0x68>)
 8000786:	0018      	movs	r0, r3
 8000788:	f001 fdca 	bl	8002320 <HAL_RTC_Init>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 fa16 	bl	8000bc0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 30, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_RTC_Init+0x68>)
 8000796:	2204      	movs	r2, #4
 8000798:	211e      	movs	r1, #30
 800079a:	0018      	movs	r0, r3
 800079c:	f001 ff10 	bl	80025c0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 fa0c 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	200000b4 	.word	0x200000b4
 80007b4:	40002800 	.word	0x40002800

080007b8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_TIM14_Init+0x40>)
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_TIM14_Init+0x44>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_TIM14_Init+0x40>)
 80007c4:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <MX_TIM14_Init+0x48>)
 80007c6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_TIM14_Init+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_TIM14_Init+0x40>)
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <MX_TIM14_Init+0x4c>)
 80007d2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_TIM14_Init+0x40>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_TIM14_Init+0x40>)
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <MX_TIM14_Init+0x40>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 ffac 	bl	8002740 <HAL_TIM_Base_Init>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80007ec:	f000 f9e8 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	200000e0 	.word	0x200000e0
 80007fc:	40002000 	.word	0x40002000
 8000800:	00003e7f 	.word	0x00003e7f
 8000804:	000003e7 	.word	0x000003e7

08000808 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_TIM16_Init+0x44>)
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <MX_TIM16_Init+0x48>)
 8000810:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_TIM16_Init+0x44>)
 8000814:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <MX_TIM16_Init+0x4c>)
 8000816:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_TIM16_Init+0x44>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_TIM16_Init+0x44>)
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <MX_TIM16_Init+0x50>)
 8000822:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_TIM16_Init+0x44>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_TIM16_Init+0x44>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_TIM16_Init+0x44>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <MX_TIM16_Init+0x44>)
 8000838:	0018      	movs	r0, r3
 800083a:	f001 ff81 	bl	8002740 <HAL_TIM_Base_Init>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000842:	f000 f9bd 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000012c 	.word	0x2000012c
 8000850:	40014400 	.word	0x40014400
 8000854:	00003e7f 	.word	0x00003e7f
 8000858:	0000270f 	.word	0x0000270f

0800085c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000862:	4a24      	ldr	r2, [pc, #144]	; (80008f4 <MX_USART1_UART_Init+0x98>)
 8000864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000868:	22e1      	movs	r2, #225	; 0xe1
 800086a:	0252      	lsls	r2, r2, #9
 800086c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 fa16 	bl	8002cd8 <HAL_UART_Init>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008b0:	f000 f986 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 80008b6:	2100      	movs	r1, #0
 80008b8:	0018      	movs	r0, r3
 80008ba:	f003 f8a3 	bl	8003a04 <HAL_UARTEx_SetTxFifoThreshold>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008c2:	f000 f97d 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 80008c8:	2100      	movs	r1, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f003 f8da 	bl	8003a84 <HAL_UARTEx_SetRxFifoThreshold>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008d4:	f000 f974 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_USART1_UART_Init+0x94>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f003 f858 	bl	8003990 <HAL_UARTEx_DisableFifoMode>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f96c 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	20000178 	.word	0x20000178
 80008f4:	40013800 	.word	0x40013800

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_USART2_UART_Init+0x94>)
 80008fe:	4a24      	ldr	r2, [pc, #144]	; (8000990 <MX_USART2_UART_Init+0x98>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <MX_USART2_UART_Init+0x94>)
 8000904:	22e1      	movs	r2, #225	; 0xe1
 8000906:	0252      	lsls	r2, r2, #9
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_USART2_UART_Init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_USART2_UART_Init+0x94>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_USART2_UART_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_USART2_UART_Init+0x94>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_USART2_UART_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_USART2_UART_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_USART2_UART_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_USART2_UART_Init+0x94>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART2_UART_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_USART2_UART_Init+0x94>)
 8000942:	0018      	movs	r0, r3
 8000944:	f002 f9c8 	bl	8002cd8 <HAL_UART_Init>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800094c:	f000 f938 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART2_UART_Init+0x94>)
 8000952:	2100      	movs	r1, #0
 8000954:	0018      	movs	r0, r3
 8000956:	f003 f855 	bl	8003a04 <HAL_UARTEx_SetTxFifoThreshold>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800095e:	f000 f92f 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_USART2_UART_Init+0x94>)
 8000964:	2100      	movs	r1, #0
 8000966:	0018      	movs	r0, r3
 8000968:	f003 f88c 	bl	8003a84 <HAL_UARTEx_SetRxFifoThreshold>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000970:	f000 f926 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <MX_USART2_UART_Init+0x94>)
 8000976:	0018      	movs	r0, r3
 8000978:	f003 f80a 	bl	8003990 <HAL_UARTEx_DisableFifoMode>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000980:	f000 f91e 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	2000020c 	.word	0x2000020c
 8000990:	40004400 	.word	0x40004400

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	240c      	movs	r4, #12
 800099c:	193b      	adds	r3, r7, r4
 800099e:	0018      	movs	r0, r3
 80009a0:	2314      	movs	r3, #20
 80009a2:	001a      	movs	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	f003 f94b 	bl	8003c40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_GPIO_Init+0x9c>)
 80009ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MX_GPIO_Init+0x9c>)
 80009b0:	2104      	movs	r1, #4
 80009b2:	430a      	orrs	r2, r1
 80009b4:	635a      	str	r2, [r3, #52]	; 0x34
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_GPIO_Init+0x9c>)
 80009b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ba:	2204      	movs	r2, #4
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_GPIO_Init+0x9c>)
 80009c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_GPIO_Init+0x9c>)
 80009c8:	2120      	movs	r1, #32
 80009ca:	430a      	orrs	r2, r1
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_GPIO_Init+0x9c>)
 80009d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d2:	2220      	movs	r2, #32
 80009d4:	4013      	ands	r3, r2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_GPIO_Init+0x9c>)
 80009dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_GPIO_Init+0x9c>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_GPIO_Init+0x9c>)
 80009e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 80009f2:	23a0      	movs	r3, #160	; 0xa0
 80009f4:	05db      	lsls	r3, r3, #23
 80009f6:	2200      	movs	r2, #0
 80009f8:	2120      	movs	r1, #32
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 fdaa 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000a00:	0021      	movs	r1, r4
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2220      	movs	r2, #32
 8000a06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2202      	movs	r2, #2
 8000a18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	187a      	adds	r2, r7, r1
 8000a1c:	23a0      	movs	r3, #160	; 0xa0
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	0011      	movs	r1, r2
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fc32 	bl	800128c <HAL_GPIO_Init>

}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b009      	add	sp, #36	; 0x24
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	40021000 	.word	0x40021000

08000a34 <send2uart>:

/* USER CODE BEGIN 4 */

void send2uart ( UART_HandleTypeDef* huart , const char* at_command , const char* answer )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	1. sposób zastosować malloc
	2. upewnić się, że wszędzie gdzie trzeba mam \0 na końcu
	3. albo coś z tymi cast jest nie tak, które namiętnie stosuję
	*/

	uint8_t* uart_rx_buff = malloc ( 99 * sizeof (uint8_t) ) ;
 8000a40:	2063      	movs	r0, #99	; 0x63
 8000a42:	f003 f8e9 	bl	8003c18 <malloc>
 8000a46:	0003      	movs	r3, r0
 8000a48:	617b      	str	r3, [r7, #20]
	uint8_t* uart_tx_buff = malloc ( 99 * sizeof (uint8_t) ) ;
 8000a4a:	2063      	movs	r0, #99	; 0x63
 8000a4c:	f003 f8e4 	bl	8003c18 <malloc>
 8000a50:	0003      	movs	r3, r0
 8000a52:	613b      	str	r3, [r7, #16]

	sprintf ( (char*) uart_tx_buff , "%s" , at_command ) ;
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	492a      	ldr	r1, [pc, #168]	; (8000b00 <send2uart+0xcc>)
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f003 f9ec 	bl	8003e38 <siprintf>
	__HAL_UART_SEND_REQ ( huart , UART_RXDATA_FLUSH_REQUEST ) ; //https://community.st.com/s/question/0D53W00000oXKU2SAO/efficient-way-to-process-usartreceived-data-and-flush-rx-buffer-
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	699a      	ldr	r2, [r3, #24]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	619a      	str	r2, [r3, #24]
	uart_status = HAL_UART_Transmit ( huart , (const uint8_t *) uart_tx_buff ,  strlen ( (char*) uart_tx_buff ) , UART_TX_TIMEOUT ) ;
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff fb46 	bl	8000104 <strlen>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	6939      	ldr	r1, [r7, #16]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	f002 f97f 	bl	8002d84 <HAL_UART_Transmit>
 8000a86:	0003      	movs	r3, r0
 8000a88:	001a      	movs	r2, r3
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <send2uart+0xd0>)
 8000a8c:	701a      	strb	r2, [r3, #0]
	uart_status = HAL_UART_Receive ( huart , uart_rx_buff , /*sizeof ( uart_rx_buff )*/99 , UART_RX_TIMEOUT ) ;
 8000a8e:	2396      	movs	r3, #150	; 0x96
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	6979      	ldr	r1, [r7, #20]
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	2263      	movs	r2, #99	; 0x63
 8000a98:	f002 fa10 	bl	8002ebc <HAL_UART_Receive>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <send2uart+0xd0>)
 8000aa2:	701a      	strb	r2, [r3, #0]
	if ( strncmp ( (char*) uart_rx_buff , answer , strlen ( answer ) ) == 0 )
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fb2c 	bl	8000104 <strlen>
 8000aac:	0002      	movs	r2, r0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f003 f9e0 	bl	8003e78 <strncmp>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d114      	bne.n	8000ae6 <send2uart+0xb2>
	{
		sprintf ( (char*) uart_tx_buff , "Yes. %s" , uart_rx_buff ) ;
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	4912      	ldr	r1, [pc, #72]	; (8000b08 <send2uart+0xd4>)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f003 f9b8 	bl	8003e38 <siprintf>
		uart_status = HAL_UART_Transmit ( huart , (const uint8_t *) uart_tx_buff ,  strlen ( (char*) uart_rx_buff ) , UART_TX_TIMEOUT ) ;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fb1a 	bl	8000104 <strlen>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	6939      	ldr	r1, [r7, #16]
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	2364      	movs	r3, #100	; 0x64
 8000ada:	f002 f953 	bl	8002d84 <HAL_UART_Transmit>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <send2uart+0xd0>)
 8000ae4:	701a      	strb	r2, [r3, #0]
	else
	{
		//sprintf ( (char*) tx_buff , "No. %s" , rx_buff ) ;
		//uart_status = HAL_UART_Transmit ( huart , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , UART_TX_TIMEOUT ) ;
	}
	free ( uart_rx_buff ) ;
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f003 f89f 	bl	8003c2c <free>
	free ( uart_tx_buff ) ;
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	0018      	movs	r0, r3
 8000af2:	f003 f89b 	bl	8003c2c <free>
	//nulling_array ( tx_buff , sizeof ( tx_buff ) ) ;
	//nulling_array ( rx_buff , sizeof ( rx_buff ) ) ;
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b006      	add	sp, #24
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	0800458c 	.word	0x0800458c
 8000b04:	200002a2 	.word	0x200002a2
 8000b08:	08004590 	.word	0x08004590

08000b0c <wait_for_tim14x>:
{
	for ( uint8_t i = 0 ; i < size ; i++ ) { array[i] = 0 ; }
}

void wait_for_tim14x ( uint8_t x )
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	701a      	strb	r2, [r3, #0]
	uint8_t i ;
	for ( i = 0 ; i < x ; i++ )
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e012      	b.n	8000b48 <wait_for_tim14x+0x3c>
	{
		tim14_on = 1 ;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <wait_for_tim14x+0x54>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim14 ) ;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <wait_for_tim14x+0x58>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f001 fe60 	bl	80027f0 <HAL_TIM_Base_Start_IT>
		while ( tim14_on )
 8000b30:	e000      	b.n	8000b34 <wait_for_tim14x+0x28>
			__NOP () ;
 8000b32:	46c0      	nop			; (mov r8, r8)
		while ( tim14_on )
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <wait_for_tim14x+0x54>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1fa      	bne.n	8000b32 <wait_for_tim14x+0x26>
	for ( i = 0 ; i < x ; i++ )
 8000b3c:	210f      	movs	r1, #15
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	3201      	adds	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	230f      	movs	r3, #15
 8000b4a:	18fa      	adds	r2, r7, r3
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	7812      	ldrb	r2, [r2, #0]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3e5      	bcc.n	8000b22 <wait_for_tim14x+0x16>
	}
}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b004      	add	sp, #16
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200002a0 	.word	0x200002a0
 8000b64:	200000e0 	.word	0x200000e0

08000b68 <HAL_TIM_PeriodElapsedCallback>:
			__NOP () ;
	}
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d106      	bne.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f001 fe90 	bl	80028a8 <HAL_TIM_Base_Stop_IT>
	}
	if ( htim->Instance == TIM16 )
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d106      	bne.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		tim16_on = 0 ;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim16 ) ;
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 fe84 	bl	80028a8 <HAL_TIM_Base_Stop_IT>
	}
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40002000 	.word	0x40002000
 8000bac:	200002a0 	.word	0x200002a0
 8000bb0:	200000e0 	.word	0x200000e0
 8000bb4:	40014400 	.word	0x40014400
 8000bb8:	200002a1 	.word	0x200002a1
 8000bbc:	2000012c 	.word	0x2000012c

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_MspInit+0x44>)
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_MspInit+0x44>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_MspInit+0x44>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	2201      	movs	r2, #1
 8000be4:	4013      	ands	r3, r2
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_MspInit+0x44>)
 8000bec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_MspInit+0x44>)
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	0549      	lsls	r1, r1, #21
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_MspInit+0x44>)
 8000bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	055b      	lsls	r3, r3, #21
 8000c00:	4013      	ands	r3, r2
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b091      	sub	sp, #68	; 0x44
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	240c      	movs	r4, #12
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	0018      	movs	r0, r3
 8000c22:	2334      	movs	r3, #52	; 0x34
 8000c24:	001a      	movs	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f003 f80a 	bl	8003c40 <memset>
  if(hrtc->Instance==RTC)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <HAL_RTC_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12c      	bne.n	8000c90 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	0292      	lsls	r2, r2, #10
 8000c3c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	0092      	lsls	r2, r2, #2
 8000c44:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f001 f9b1 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c52:	f7ff ffb5 	bl	8000bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_RTC_MspInit+0x88>)
 8000c58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_RTC_MspInit+0x88>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	0209      	lsls	r1, r1, #8
 8000c60:	430a      	orrs	r2, r1
 8000c62:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_RTC_MspInit+0x88>)
 8000c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_RTC_MspInit+0x88>)
 8000c6a:	2180      	movs	r1, #128	; 0x80
 8000c6c:	00c9      	lsls	r1, r1, #3
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_RTC_MspInit+0x88>)
 8000c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	2002      	movs	r0, #2
 8000c86:	f000 facf 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f000 fae1 	bl	8001252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b011      	add	sp, #68	; 0x44
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	40002800 	.word	0x40002800
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_TIM_Base_MspInit+0x80>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d116      	bne.n	8000ce0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_TIM_Base_MspInit+0x84>)
 8000cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_TIM_Base_MspInit+0x84>)
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	0209      	lsls	r1, r1, #8
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_TIM_Base_MspInit+0x84>)
 8000cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2013      	movs	r0, #19
 8000cd4:	f000 faa8 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000cd8:	2013      	movs	r0, #19
 8000cda:	f000 faba 	bl	8001252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000cde:	e01a      	b.n	8000d16 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_TIM_Base_MspInit+0x88>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d115      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_TIM_Base_MspInit+0x84>)
 8000cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_TIM_Base_MspInit+0x84>)
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	0289      	lsls	r1, r1, #10
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	641a      	str	r2, [r3, #64]	; 0x40
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x84>)
 8000cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	029b      	lsls	r3, r3, #10
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2015      	movs	r0, #21
 8000d0c:	f000 fa8c 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000d10:	2015      	movs	r0, #21
 8000d12:	f000 fa9e 	bl	8001252 <HAL_NVIC_EnableIRQ>
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40002000 	.word	0x40002000
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40014400 	.word	0x40014400

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b099      	sub	sp, #100	; 0x64
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	234c      	movs	r3, #76	; 0x4c
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2314      	movs	r3, #20
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f002 ff7e 	bl	8003c40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	2418      	movs	r4, #24
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2334      	movs	r3, #52	; 0x34
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f002 ff76 	bl	8003c40 <memset>
  if(huart->Instance==USART1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a45      	ldr	r2, [pc, #276]	; (8000e70 <HAL_UART_MspInit+0x144>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d13e      	bne.n	8000ddc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	2201      	movs	r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f001 f91f 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d76:	f7ff ff23 	bl	8000bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	01c9      	lsls	r1, r1, #7
 8000d84:	430a      	orrs	r2, r1
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
 8000d88:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	01db      	lsls	r3, r3, #7
 8000d90:	4013      	ands	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b37      	ldr	r3, [pc, #220]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
 8000da2:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da6:	2204      	movs	r2, #4
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dae:	214c      	movs	r1, #76	; 0x4c
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2230      	movs	r2, #48	; 0x30
 8000db4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2202      	movs	r2, #2
 8000dba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2201      	movs	r2, #1
 8000dcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <HAL_UART_MspInit+0x14c>)
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	0010      	movs	r0, r2
 8000dd6:	f000 fa59 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dda:	e044      	b.n	8000e66 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <HAL_UART_MspInit+0x150>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d13f      	bne.n	8000e66 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000de6:	2118      	movs	r1, #24
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2202      	movs	r2, #2
 8000dec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 f8da 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000e00:	f7ff fede 	bl	8000bc0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	0289      	lsls	r1, r1, #10
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	029b      	lsls	r3, r3, #10
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000e26:	2101      	movs	r1, #1
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <HAL_UART_MspInit+0x148>)
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e30:	2201      	movs	r2, #1
 8000e32:	4013      	ands	r3, r2
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_STLK_Pin|USART2_RX_STLK_Pin;
 8000e38:	214c      	movs	r1, #76	; 0x4c
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2202      	movs	r2, #2
 8000e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2201      	movs	r2, #1
 8000e4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2201      	movs	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	187a      	adds	r2, r7, r1
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 fa13 	bl	800128c <HAL_GPIO_Init>
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b019      	add	sp, #100	; 0x64
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	40013800 	.word	0x40013800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	50000800 	.word	0x50000800
 8000e7c:	40004400 	.word	0x40004400

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f8f8 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <RTC_TAMP_IRQHandler+0x14>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 fc1c 	bl	80026f4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	200000b4 	.word	0x200000b4

08000ec8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <TIM14_IRQHandler+0x14>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 fd18 	bl	8002904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	200000e0 	.word	0x200000e0

08000ee0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <TIM16_IRQHandler+0x14>)
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f001 fd0c 	bl	8002904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	2000012c 	.word	0x2000012c

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	18d3      	adds	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f002 fe4c 	bl	8003bc4 <__errno>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	425b      	negs	r3, r3
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	18d2      	adds	r2, r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b006      	add	sp, #24
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20009000 	.word	0x20009000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	200002a4 	.word	0x200002a4
 8000f60:	200002c0 	.word	0x200002c0

08000f64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f74:	f7ff fff6 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f9e:	f002 fe17 	bl	8003bd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fa2:	f7ff fb4d 	bl	8000640 <main>

08000fa6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   r0, =_estack
 8000fa8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000fb4:	08004664 	.word	0x08004664
  ldr r2, =_sbss
 8000fb8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000fbc:	200002bc 	.word	0x200002bc

08000fc0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_COMP_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_Init+0x3c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_Init+0x3c>)
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	0049      	lsls	r1, r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f810 	bl	8001004 <HAL_InitTick>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e001      	b.n	8000ff4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fdec 	bl	8000bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40022000 	.word	0x40022000

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800100c:	230f      	movs	r3, #15
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_InitTick+0x88>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d02b      	beq.n	8001074 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HAL_InitTick+0x8c>)
 800101e:	681c      	ldr	r4, [r3, #0]
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_InitTick+0x88>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	0019      	movs	r1, r3
 8001026:	23fa      	movs	r3, #250	; 0xfa
 8001028:	0098      	lsls	r0, r3, #2
 800102a:	f7ff f87d 	bl	8000128 <__udivsi3>
 800102e:	0003      	movs	r3, r0
 8001030:	0019      	movs	r1, r3
 8001032:	0020      	movs	r0, r4
 8001034:	f7ff f878 	bl	8000128 <__udivsi3>
 8001038:	0003      	movs	r3, r0
 800103a:	0018      	movs	r0, r3
 800103c:	f000 f919 	bl	8001272 <HAL_SYSTICK_Config>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d112      	bne.n	800106a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d80a      	bhi.n	8001060 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	2200      	movs	r2, #0
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f8e8 	bl	8001228 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_InitTick+0x90>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e00d      	b.n	800107c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001060:	230f      	movs	r3, #15
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e008      	b.n	800107c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800106a:	230f      	movs	r3, #15
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e003      	b.n	800107c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800107c:	230f      	movs	r3, #15
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	781b      	ldrb	r3, [r3, #0]
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b005      	add	sp, #20
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	20000030 	.word	0x20000030
 8001090:	20000028 	.word	0x20000028
 8001094:	2000002c 	.word	0x2000002c

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_IncTick+0x1c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	001a      	movs	r2, r3
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x20>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	18d2      	adds	r2, r2, r3
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_IncTick+0x20>)
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	20000030 	.word	0x20000030
 80010b8:	200002a8 	.word	0x200002a8

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <HAL_GetTick+0x10>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	200002a8 	.word	0x200002a8

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	0002      	movs	r2, r0
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b7f      	cmp	r3, #127	; 0x7f
 80010e2:	d809      	bhi.n	80010f8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	231f      	movs	r3, #31
 80010ec:	401a      	ands	r2, r3
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <__NVIC_EnableIRQ+0x30>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	4091      	lsls	r1, r2
 80010f4:	000a      	movs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	0002      	movs	r2, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b7f      	cmp	r3, #127	; 0x7f
 8001118:	d828      	bhi.n	800116c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111a:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <__NVIC_SetPriority+0xd4>)
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	33c0      	adds	r3, #192	; 0xc0
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	589b      	ldr	r3, [r3, r2]
 800112a:	1dfa      	adds	r2, r7, #7
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	0011      	movs	r1, r2
 8001130:	2203      	movs	r2, #3
 8001132:	400a      	ands	r2, r1
 8001134:	00d2      	lsls	r2, r2, #3
 8001136:	21ff      	movs	r1, #255	; 0xff
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	43d2      	mvns	r2, r2
 800113e:	401a      	ands	r2, r3
 8001140:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	019b      	lsls	r3, r3, #6
 8001146:	22ff      	movs	r2, #255	; 0xff
 8001148:	401a      	ands	r2, r3
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	2303      	movs	r3, #3
 8001152:	4003      	ands	r3, r0
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001158:	481f      	ldr	r0, [pc, #124]	; (80011d8 <__NVIC_SetPriority+0xd4>)
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b25b      	sxtb	r3, r3
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	430a      	orrs	r2, r1
 8001164:	33c0      	adds	r3, #192	; 0xc0
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800116a:	e031      	b.n	80011d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <__NVIC_SetPriority+0xd8>)
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	0019      	movs	r1, r3
 8001174:	230f      	movs	r3, #15
 8001176:	400b      	ands	r3, r1
 8001178:	3b08      	subs	r3, #8
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3306      	adds	r3, #6
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	18d3      	adds	r3, r2, r3
 8001182:	3304      	adds	r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	1dfa      	adds	r2, r7, #7
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	0011      	movs	r1, r2
 800118c:	2203      	movs	r2, #3
 800118e:	400a      	ands	r2, r1
 8001190:	00d2      	lsls	r2, r2, #3
 8001192:	21ff      	movs	r1, #255	; 0xff
 8001194:	4091      	lsls	r1, r2
 8001196:	000a      	movs	r2, r1
 8001198:	43d2      	mvns	r2, r2
 800119a:	401a      	ands	r2, r3
 800119c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	019b      	lsls	r3, r3, #6
 80011a2:	22ff      	movs	r2, #255	; 0xff
 80011a4:	401a      	ands	r2, r3
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	0018      	movs	r0, r3
 80011ac:	2303      	movs	r3, #3
 80011ae:	4003      	ands	r3, r0
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <__NVIC_SetPriority+0xd8>)
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	001c      	movs	r4, r3
 80011bc:	230f      	movs	r3, #15
 80011be:	4023      	ands	r3, r4
 80011c0:	3b08      	subs	r3, #8
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	430a      	orrs	r2, r1
 80011c6:	3306      	adds	r3, #6
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	18c3      	adds	r3, r0, r3
 80011cc:	3304      	adds	r3, #4
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b003      	add	sp, #12
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	045b      	lsls	r3, r3, #17
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d301      	bcc.n	80011f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f4:	2301      	movs	r3, #1
 80011f6:	e010      	b.n	800121a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <SysTick_Config+0x44>)
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	3a01      	subs	r2, #1
 80011fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001200:	2301      	movs	r3, #1
 8001202:	425b      	negs	r3, r3
 8001204:	2103      	movs	r1, #3
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff ff7c 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x44>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x44>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	210f      	movs	r1, #15
 8001234:	187b      	adds	r3, r7, r1
 8001236:	1c02      	adds	r2, r0, #0
 8001238:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	187b      	adds	r3, r7, r1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	0011      	movs	r1, r2
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <__NVIC_SetPriority>
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b004      	add	sp, #16
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	0002      	movs	r2, r0
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b25b      	sxtb	r3, r3
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ff33 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff ffaf 	bl	80011e0 <SysTick_Config>
 8001282:	0003      	movs	r3, r0
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e147      	b.n	800152c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4091      	lsls	r1, r2
 80012a6:	000a      	movs	r2, r1
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <HAL_GPIO_Init+0x28>
 80012b2:	e138      	b.n	8001526 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	409a      	lsls	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	2201      	movs	r2, #1
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	4013      	ands	r3, r2
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	43da      	mvns	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2203      	movs	r2, #3
 8001370:	4013      	ands	r3, r2
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	58d3      	ldr	r3, [r2, r3]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2207      	movs	r2, #7
 8001388:	4013      	ands	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	43da      	mvns	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2107      	movs	r1, #7
 80013a2:	400b      	ands	r3, r1
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	6939      	ldr	r1, [r7, #16]
 80013bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	401a      	ands	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	23c0      	movs	r3, #192	; 0xc0
 80013f8:	029b      	lsls	r3, r3, #10
 80013fa:	4013      	ands	r3, r2
 80013fc:	d100      	bne.n	8001400 <HAL_GPIO_Init+0x174>
 80013fe:	e092      	b.n	8001526 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3318      	adds	r3, #24
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	589b      	ldr	r3, [r3, r2]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2203      	movs	r2, #3
 8001412:	4013      	ands	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	220f      	movs	r2, #15
 8001418:	409a      	lsls	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	43da      	mvns	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	23a0      	movs	r3, #160	; 0xa0
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	429a      	cmp	r2, r3
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0x1ca>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a45      	ldr	r2, [pc, #276]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00d      	beq.n	8001452 <HAL_GPIO_Init+0x1c6>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a44      	ldr	r2, [pc, #272]	; (800154c <HAL_GPIO_Init+0x2c0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d007      	beq.n	800144e <HAL_GPIO_Init+0x1c2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a43      	ldr	r2, [pc, #268]	; (8001550 <HAL_GPIO_Init+0x2c4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_GPIO_Init+0x1be>
 8001446:	2303      	movs	r3, #3
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x1cc>
 800144a:	2305      	movs	r3, #5
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x1cc>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x1cc>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x1cc>
 8001456:	2300      	movs	r3, #0
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	2103      	movs	r1, #3
 800145c:	400a      	ands	r2, r1
 800145e:	00d2      	lsls	r2, r2, #3
 8001460:	4093      	lsls	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001468:	4936      	ldr	r1, [pc, #216]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3318      	adds	r3, #24
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43da      	mvns	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	035b      	lsls	r3, r3, #13
 800148e:	4013      	ands	r3, r2
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43da      	mvns	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	039b      	lsls	r3, r3, #14
 80014b8:	4013      	ands	r3, r2
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ca:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 80014cc:	2384      	movs	r3, #132	; 0x84
 80014ce:	58d3      	ldr	r3, [r2, r3]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43da      	mvns	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	029b      	lsls	r3, r3, #10
 80014e4:	4013      	ands	r3, r2
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014f0:	4914      	ldr	r1, [pc, #80]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 80014f2:	2284      	movs	r2, #132	; 0x84
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	58d3      	ldr	r3, [r2, r3]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43da      	mvns	r2, r3
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	4013      	ands	r3, r2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800151e:	4909      	ldr	r1, [pc, #36]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	40da      	lsrs	r2, r3
 8001534:	1e13      	subs	r3, r2, #0
 8001536:	d000      	beq.n	800153a <HAL_GPIO_Init+0x2ae>
 8001538:	e6b0      	b.n	800129c <HAL_GPIO_Init+0x10>
  }
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b006      	add	sp, #24
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021800 	.word	0x40021800
 8001548:	50000400 	.word	0x50000400
 800154c:	50000800 	.word	0x50000800
 8001550:	50000c00 	.word	0x50000c00

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	0008      	movs	r0, r1
 800155e:	0011      	movs	r1, r2
 8001560:	1cbb      	adds	r3, r7, #2
 8001562:	1c02      	adds	r2, r0, #0
 8001564:	801a      	strh	r2, [r3, #0]
 8001566:	1c7b      	adds	r3, r7, #1
 8001568:	1c0a      	adds	r2, r1, #0
 800156a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800156c:	1c7b      	adds	r3, r7, #1
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001574:	1cbb      	adds	r3, r7, #2
 8001576:	881a      	ldrh	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800157c:	e003      	b.n	8001586 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157e:	1cbb      	adds	r3, r7, #2
 8001580:	881a      	ldrh	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800159e:	4013      	ands	r3, r2
 80015a0:	0019      	movs	r1, r3
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d11f      	bne.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	0013      	movs	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	189b      	adds	r3, r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4912      	ldr	r1, [pc, #72]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7fe fdb0 	bl	8000128 <__udivsi3>
 80015c8:	0003      	movs	r3, r0
 80015ca:	3301      	adds	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ce:	e008      	b.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3b01      	subs	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	e001      	b.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e009      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	401a      	ands	r2, r3
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d0ed      	beq.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b004      	add	sp, #16
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	40007000 	.word	0x40007000
 8001604:	fffff9ff 	.word	0xfffff9ff
 8001608:	20000028 	.word	0x20000028
 800160c:	000f4240 	.word	0x000f4240

08001610 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	23e0      	movs	r3, #224	; 0xe0
 800161a:	01db      	lsls	r3, r3, #7
 800161c:	4013      	ands	r3, r2
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e2fe      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	4013      	ands	r3, r2
 8001642:	d100      	bne.n	8001646 <HAL_RCC_OscConfig+0x1e>
 8001644:	e07c      	b.n	8001740 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001646:	4bc3      	ldr	r3, [pc, #780]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2238      	movs	r2, #56	; 0x38
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001650:	4bc0      	ldr	r3, [pc, #768]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2203      	movs	r2, #3
 8001656:	4013      	ands	r3, r2
 8001658:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b10      	cmp	r3, #16
 800165e:	d102      	bne.n	8001666 <HAL_RCC_OscConfig+0x3e>
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2b03      	cmp	r3, #3
 8001664:	d002      	beq.n	800166c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b08      	cmp	r3, #8
 800166a:	d10b      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4bb9      	ldr	r3, [pc, #740]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	029b      	lsls	r3, r3, #10
 8001674:	4013      	ands	r3, r2
 8001676:	d062      	beq.n	800173e <HAL_RCC_OscConfig+0x116>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d15e      	bne.n	800173e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e2d9      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	025b      	lsls	r3, r3, #9
 800168c:	429a      	cmp	r2, r3
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_OscConfig+0x78>
 8001690:	4bb0      	ldr	r3, [pc, #704]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4baf      	ldr	r3, [pc, #700]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	0249      	lsls	r1, r1, #9
 800169a:	430a      	orrs	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e020      	b.n	80016e2 <HAL_RCC_OscConfig+0xba>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	23a0      	movs	r3, #160	; 0xa0
 80016a6:	02db      	lsls	r3, r3, #11
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d10e      	bne.n	80016ca <HAL_RCC_OscConfig+0xa2>
 80016ac:	4ba9      	ldr	r3, [pc, #676]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4ba8      	ldr	r3, [pc, #672]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	02c9      	lsls	r1, r1, #11
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	4ba6      	ldr	r3, [pc, #664]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4ba5      	ldr	r3, [pc, #660]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	0249      	lsls	r1, r1, #9
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e00b      	b.n	80016e2 <HAL_RCC_OscConfig+0xba>
 80016ca:	4ba2      	ldr	r3, [pc, #648]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4ba1      	ldr	r3, [pc, #644]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80016d0:	49a1      	ldr	r1, [pc, #644]	; (8001958 <HAL_RCC_OscConfig+0x330>)
 80016d2:	400a      	ands	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	4b9f      	ldr	r3, [pc, #636]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4b9e      	ldr	r3, [pc, #632]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	499f      	ldr	r1, [pc, #636]	; (800195c <HAL_RCC_OscConfig+0x334>)
 80016de:	400a      	ands	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d014      	beq.n	8001714 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff fce7 	bl	80010bc <HAL_GetTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fce2 	bl	80010bc <HAL_GetTick>
 80016f8:	0002      	movs	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e298      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001706:	4b93      	ldr	r3, [pc, #588]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	029b      	lsls	r3, r3, #10
 800170e:	4013      	ands	r3, r2
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xcc>
 8001712:	e015      	b.n	8001740 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fcd2 	bl	80010bc <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171e:	f7ff fccd 	bl	80010bc <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	; 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e283      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001730:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	029b      	lsls	r3, r3, #10
 8001738:	4013      	ands	r3, r2
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0xf6>
 800173c:	e000      	b.n	8001740 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2202      	movs	r2, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d100      	bne.n	800174c <HAL_RCC_OscConfig+0x124>
 800174a:	e099      	b.n	8001880 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174c:	4b81      	ldr	r3, [pc, #516]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2238      	movs	r2, #56	; 0x38
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001756:	4b7f      	ldr	r3, [pc, #508]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2203      	movs	r2, #3
 800175c:	4013      	ands	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b10      	cmp	r3, #16
 8001764:	d102      	bne.n	800176c <HAL_RCC_OscConfig+0x144>
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d002      	beq.n	8001772 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d135      	bne.n	80017de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001772:	4b78      	ldr	r3, [pc, #480]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4013      	ands	r3, r2
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x162>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e256      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178a:	4b72      	ldr	r3, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4a74      	ldr	r2, [pc, #464]	; (8001960 <HAL_RCC_OscConfig+0x338>)
 8001790:	4013      	ands	r3, r2
 8001792:	0019      	movs	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	021a      	lsls	r2, r3, #8
 800179a:	4b6e      	ldr	r3, [pc, #440]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d112      	bne.n	80017cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017a6:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6e      	ldr	r2, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x33c>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017ba:	4b66      	ldr	r3, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	0adb      	lsrs	r3, r3, #11
 80017c0:	2207      	movs	r2, #7
 80017c2:	4013      	ands	r3, r2
 80017c4:	4a68      	ldr	r2, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x340>)
 80017c6:	40da      	lsrs	r2, r3
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_OscConfig+0x344>)
 80017ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_OscConfig+0x348>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff fc17 	bl	8001004 <HAL_InitTick>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d051      	beq.n	800187e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e22c      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d030      	beq.n	8001848 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017e6:	4b5b      	ldr	r3, [pc, #364]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a5e      	ldr	r2, [pc, #376]	; (8001964 <HAL_RCC_OscConfig+0x33c>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	4b57      	ldr	r3, [pc, #348]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80017fa:	4b56      	ldr	r3, [pc, #344]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b55      	ldr	r3, [pc, #340]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0049      	lsls	r1, r1, #1
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fc58 	bl	80010bc <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001812:	f7ff fc53 	bl	80010bc <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e209      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001824:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4013      	ands	r3, r2
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b48      	ldr	r3, [pc, #288]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a4a      	ldr	r2, [pc, #296]	; (8001960 <HAL_RCC_OscConfig+0x338>)
 8001836:	4013      	ands	r3, r2
 8001838:	0019      	movs	r1, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	021a      	lsls	r2, r3, #8
 8001840:	4b44      	ldr	r3, [pc, #272]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	e01b      	b.n	8001880 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001848:	4b42      	ldr	r3, [pc, #264]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 800184e:	4949      	ldr	r1, [pc, #292]	; (8001974 <HAL_RCC_OscConfig+0x34c>)
 8001850:	400a      	ands	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fc32 	bl	80010bc <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff fc2d 	bl	80010bc <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1e3      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4013      	ands	r3, r2
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x236>
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800187e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2208      	movs	r2, #8
 8001886:	4013      	ands	r3, r2
 8001888:	d047      	beq.n	800191a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800188a:	4b32      	ldr	r3, [pc, #200]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2238      	movs	r2, #56	; 0x38
 8001890:	4013      	ands	r3, r2
 8001892:	2b18      	cmp	r3, #24
 8001894:	d10a      	bne.n	80018ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d03c      	beq.n	800191a <HAL_RCC_OscConfig+0x2f2>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d138      	bne.n	800191a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e1c5      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d019      	beq.n	80018e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	430a      	orrs	r2, r1
 80018be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff fbfc 	bl	80010bc <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ca:	f7ff fbf7 	bl	80010bc <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1ad      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80018de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e0:	2202      	movs	r2, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d0f1      	beq.n	80018ca <HAL_RCC_OscConfig+0x2a2>
 80018e6:	e018      	b.n	800191a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80018ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	438a      	bics	r2, r1
 80018f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fbe2 	bl	80010bc <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff fbdd 	bl	80010bc <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e193      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001914:	2202      	movs	r2, #2
 8001916:	4013      	ands	r3, r2
 8001918:	d1f1      	bne.n	80018fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2204      	movs	r2, #4
 8001920:	4013      	ands	r3, r2
 8001922:	d100      	bne.n	8001926 <HAL_RCC_OscConfig+0x2fe>
 8001924:	e0c6      	b.n	8001ab4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	231f      	movs	r3, #31
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2238      	movs	r2, #56	; 0x38
 8001934:	4013      	ands	r3, r2
 8001936:	2b20      	cmp	r3, #32
 8001938:	d11e      	bne.n	8001978 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_OscConfig+0x32c>)
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	2202      	movs	r2, #2
 8001940:	4013      	ands	r3, r2
 8001942:	d100      	bne.n	8001946 <HAL_RCC_OscConfig+0x31e>
 8001944:	e0b6      	b.n	8001ab4 <HAL_RCC_OscConfig+0x48c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d000      	beq.n	8001950 <HAL_RCC_OscConfig+0x328>
 800194e:	e0b1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e171      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
 8001954:	40021000 	.word	0x40021000
 8001958:	fffeffff 	.word	0xfffeffff
 800195c:	fffbffff 	.word	0xfffbffff
 8001960:	ffff80ff 	.word	0xffff80ff
 8001964:	ffffc7ff 	.word	0xffffc7ff
 8001968:	00f42400 	.word	0x00f42400
 800196c:	20000028 	.word	0x20000028
 8001970:	2000002c 	.word	0x2000002c
 8001974:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001978:	4bb1      	ldr	r3, [pc, #708]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 800197a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	055b      	lsls	r3, r3, #21
 8001980:	4013      	ands	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_RCC_OscConfig+0x360>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x362>
 8001988:	2300      	movs	r3, #0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d011      	beq.n	80019b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4bac      	ldr	r3, [pc, #688]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001992:	4bab      	ldr	r3, [pc, #684]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	0549      	lsls	r1, r1, #21
 8001998:	430a      	orrs	r2, r1
 800199a:	63da      	str	r2, [r3, #60]	; 0x3c
 800199c:	4ba8      	ldr	r3, [pc, #672]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 800199e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	055b      	lsls	r3, r3, #21
 80019a4:	4013      	ands	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019aa:	231f      	movs	r3, #31
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b2:	4ba4      	ldr	r3, [pc, #656]	; (8001c44 <HAL_RCC_OscConfig+0x61c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	d11a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019be:	4ba1      	ldr	r3, [pc, #644]	; (8001c44 <HAL_RCC_OscConfig+0x61c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4ba0      	ldr	r3, [pc, #640]	; (8001c44 <HAL_RCC_OscConfig+0x61c>)
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	0049      	lsls	r1, r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fb76 	bl	80010bc <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff fb71 	bl	80010bc <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e127      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e8:	4b96      	ldr	r3, [pc, #600]	; (8001c44 <HAL_RCC_OscConfig+0x61c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3e2>
 80019fc:	4b90      	ldr	r3, [pc, #576]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 80019fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a00:	4b8f      	ldr	r3, [pc, #572]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	430a      	orrs	r2, r1
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x41c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x404>
 8001a12:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a16:	4b8a      	ldr	r3, [pc, #552]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a18:	2104      	movs	r1, #4
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a22:	4b87      	ldr	r3, [pc, #540]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a24:	2101      	movs	r1, #1
 8001a26:	430a      	orrs	r2, r1
 8001a28:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0x41c>
 8001a2c:	4b84      	ldr	r3, [pc, #528]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a30:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	438a      	bics	r2, r1
 8001a36:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a38:	4b81      	ldr	r3, [pc, #516]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a3c:	4b80      	ldr	r3, [pc, #512]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a3e:	2104      	movs	r1, #4
 8001a40:	438a      	bics	r2, r1
 8001a42:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d014      	beq.n	8001a76 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fb36 	bl	80010bc <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a54:	e009      	b.n	8001a6a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff fb31 	bl	80010bc <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4a79      	ldr	r2, [pc, #484]	; (8001c48 <HAL_RCC_OscConfig+0x620>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0e6      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6a:	4b75      	ldr	r3, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x42e>
 8001a74:	e013      	b.n	8001a9e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff fb21 	bl	80010bc <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a7e:	e009      	b.n	8001a94 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff fb1c 	bl	80010bc <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	4a6f      	ldr	r2, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x620>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0d1      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a94:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a9e:	231f      	movs	r3, #31
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aac:	4b64      	ldr	r3, [pc, #400]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001aae:	4967      	ldr	r1, [pc, #412]	; (8001c4c <HAL_RCC_OscConfig+0x624>)
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d100      	bne.n	8001abe <HAL_RCC_OscConfig+0x496>
 8001abc:	e0bb      	b.n	8001c36 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001abe:	4b60      	ldr	r3, [pc, #384]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2238      	movs	r2, #56	; 0x38
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b10      	cmp	r3, #16
 8001ac8:	d100      	bne.n	8001acc <HAL_RCC_OscConfig+0x4a4>
 8001aca:	e07b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d156      	bne.n	8001b82 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001ada:	495d      	ldr	r1, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x628>)
 8001adc:	400a      	ands	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff faec 	bl	80010bc <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff fae7 	bl	80010bc <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e09d      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	049b      	lsls	r3, r3, #18
 8001b04:	4013      	ands	r3, r2
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b08:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a51      	ldr	r2, [pc, #324]	; (8001c54 <HAL_RCC_OscConfig+0x62c>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1a      	ldr	r2, [r3, #32]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	431a      	orrs	r2, r3
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	0449      	lsls	r1, r1, #17
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0549      	lsls	r1, r1, #21
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fab0 	bl	80010bc <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff faab 	bl	80010bc <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e061      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	049b      	lsls	r3, r3, #18
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x53a>
 8001b80:	e059      	b.n	8001c36 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001b88:	4931      	ldr	r1, [pc, #196]	; (8001c50 <HAL_RCC_OscConfig+0x628>)
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fa95 	bl	80010bc <HAL_GetTick>
 8001b92:	0003      	movs	r3, r0
 8001b94:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff fa90 	bl	80010bc <HAL_GetTick>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e046      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001baa:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	049b      	lsls	r3, r3, #18
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001bbc:	4926      	ldr	r1, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x630>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	e038      	b.n	8001c36 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e033      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d126      	bne.n	8001c32 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2270      	movs	r2, #112	; 0x70
 8001be8:	401a      	ands	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11f      	bne.n	8001c32 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	23fe      	movs	r3, #254	; 0xfe
 8001bf6:	01db      	lsls	r3, r3, #7
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d116      	bne.n	8001c32 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	23f8      	movs	r3, #248	; 0xf8
 8001c08:	039b      	lsls	r3, r3, #14
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d10e      	bne.n	8001c32 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	23e0      	movs	r3, #224	; 0xe0
 8001c18:	051b      	lsls	r3, r3, #20
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	0f5b      	lsrs	r3, r3, #29
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b008      	add	sp, #32
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
 8001c48:	00001388 	.word	0x00001388
 8001c4c:	efffffff 	.word	0xefffffff
 8001c50:	feffffff 	.word	0xfeffffff
 8001c54:	11c1808c 	.word	0x11c1808c
 8001c58:	eefefffc 	.word	0xeefefffc

08001c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0e9      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2207      	movs	r2, #7
 8001c76:	4013      	ands	r3, r2
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d91e      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b73      	ldr	r3, [pc, #460]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2207      	movs	r2, #7
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	4b70      	ldr	r3, [pc, #448]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c90:	f7ff fa14 	bl	80010bc <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c98:	e009      	b.n	8001cae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9a:	f7ff fa0f 	bl	80010bc <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	; (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0ca      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cae:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1ee      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d006      	beq.n	8001cde <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cd0:	4b60      	ldr	r3, [pc, #384]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4b5f      	ldr	r3, [pc, #380]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd6:	21e0      	movs	r1, #224	; 0xe0
 8001cd8:	01c9      	lsls	r1, r1, #7
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4a5d      	ldr	r2, [pc, #372]	; (8001e58 <HAL_RCC_ClockConfig+0x1fc>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d057      	beq.n	8001dac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	029b      	lsls	r3, r3, #10
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d12b      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e097      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1c:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	049b      	lsls	r3, r3, #18
 8001d24:	4013      	ands	r3, r2
 8001d26:	d11f      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e08b      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d34:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d113      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e07f      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d108      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e074      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e06d      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d68:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	4393      	bics	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d7c:	f7ff f99e 	bl	80010bc <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d84:	e009      	b.n	8001d9a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d86:	f7ff f999 	bl	80010bc <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e054      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2238      	movs	r2, #56	; 0x38
 8001da0:	401a      	ands	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1ec      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2207      	movs	r2, #7
 8001db2:	4013      	ands	r3, r2
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d21e      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	4393      	bics	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dcc:	f7ff f976 	bl	80010bc <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dd4:	e009      	b.n	8001dea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd6:	f7ff f971 	bl	80010bc <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e02c      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2207      	movs	r2, #7
 8001df0:	4013      	ands	r3, r2
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1ee      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <HAL_RCC_ClockConfig+0x200>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e16:	f000 f829 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001e1a:	0001      	movs	r1, r0
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	220f      	movs	r2, #15
 8001e24:	401a      	ands	r2, r3
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_RCC_ClockConfig+0x204>)
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	58d3      	ldr	r3, [r2, r3]
 8001e2c:	221f      	movs	r2, #31
 8001e2e:	4013      	ands	r3, r2
 8001e30:	000a      	movs	r2, r1
 8001e32:	40da      	lsrs	r2, r3
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_ClockConfig+0x208>)
 8001e36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x20c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff f8e1 	bl	8001004 <HAL_InitTick>
 8001e42:	0003      	movs	r3, r0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b004      	add	sp, #16
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	00001388 	.word	0x00001388
 8001e54:	40021000 	.word	0x40021000
 8001e58:	fffff0ff 	.word	0xfffff0ff
 8001e5c:	ffff8fff 	.word	0xffff8fff
 8001e60:	08004598 	.word	0x08004598
 8001e64:	20000028 	.word	0x20000028
 8001e68:	2000002c 	.word	0x2000002c

08001e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e72:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2238      	movs	r2, #56	; 0x38
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d10f      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e7c:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0adb      	lsrs	r3, r3, #11
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	2201      	movs	r2, #1
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	0013      	movs	r3, r2
 8001e8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	4835      	ldr	r0, [pc, #212]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e92:	f7fe f949 	bl	8000128 <__udivsi3>
 8001e96:	0003      	movs	r3, r0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e05d      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2238      	movs	r2, #56	; 0x38
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d102      	bne.n	8001eae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ea8:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x100>)
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e054      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2238      	movs	r2, #56	; 0x38
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d138      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001eba:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	2207      	movs	r2, #7
 8001ecc:	4013      	ands	r3, r2
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	4824      	ldr	r0, [pc, #144]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x100>)
 8001edc:	f7fe f924 	bl	8000128 <__udivsi3>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	227f      	movs	r2, #127	; 0x7f
 8001eec:	4013      	ands	r3, r2
 8001eee:	434b      	muls	r3, r1
 8001ef0:	617b      	str	r3, [r7, #20]
        break;
 8001ef2:	e00d      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	481c      	ldr	r0, [pc, #112]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ef8:	f7fe f916 	bl	8000128 <__udivsi3>
 8001efc:	0003      	movs	r3, r0
 8001efe:	0019      	movs	r1, r3
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	227f      	movs	r2, #127	; 0x7f
 8001f08:	4013      	ands	r3, r2
 8001f0a:	434b      	muls	r3, r1
 8001f0c:	617b      	str	r3, [r7, #20]
        break;
 8001f0e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0f5b      	lsrs	r3, r3, #29
 8001f16:	2207      	movs	r2, #7
 8001f18:	4013      	ands	r3, r2
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	6978      	ldr	r0, [r7, #20]
 8001f22:	f7fe f901 	bl	8000128 <__udivsi3>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2238      	movs	r2, #56	; 0x38
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d103      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2238      	movs	r2, #56	; 0x38
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b18      	cmp	r3, #24
 8001f4a:	d103      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f4c:	23fa      	movs	r3, #250	; 0xfa
 8001f4e:	01db      	lsls	r3, r3, #7
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	e001      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f58:	693b      	ldr	r3, [r7, #16]
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b006      	add	sp, #24
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	40021000 	.word	0x40021000
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	007a1200 	.word	0x007a1200

08001f70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f74:	4b02      	ldr	r3, [pc, #8]	; (8001f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	20000028 	.word	0x20000028

08001f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f84:	b5b0      	push	{r4, r5, r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f88:	f7ff fff2 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001f8c:	0004      	movs	r4, r0
 8001f8e:	f7ff fb3f 	bl	8001610 <LL_RCC_GetAPB1Prescaler>
 8001f92:	0003      	movs	r3, r0
 8001f94:	0b1a      	lsrs	r2, r3, #12
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	58d3      	ldr	r3, [r2, r3]
 8001f9c:	221f      	movs	r2, #31
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	40dc      	lsrs	r4, r3
 8001fa2:	0023      	movs	r3, r4
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	080045d8 	.word	0x080045d8

08001fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001fb8:	2313      	movs	r3, #19
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fc0:	2312      	movs	r3, #18
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	029b      	lsls	r3, r3, #10
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d100      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fd4:	e0a3      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd6:	2011      	movs	r0, #17
 8001fd8:	183b      	adds	r3, r7, r0
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4bc3      	ldr	r3, [pc, #780]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	055b      	lsls	r3, r3, #21
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d110      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4bc0      	ldr	r3, [pc, #768]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fee:	4bbf      	ldr	r3, [pc, #764]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	0549      	lsls	r1, r1, #21
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ff8:	4bbc      	ldr	r3, [pc, #752]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	055b      	lsls	r3, r3, #21
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002006:	183b      	adds	r3, r7, r0
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200c:	4bb8      	ldr	r3, [pc, #736]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4bb7      	ldr	r3, [pc, #732]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002012:	2180      	movs	r1, #128	; 0x80
 8002014:	0049      	lsls	r1, r1, #1
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800201a:	f7ff f84f 	bl	80010bc <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002022:	e00b      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002024:	f7ff f84a 	bl	80010bc <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d904      	bls.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002032:	2313      	movs	r3, #19
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	2203      	movs	r2, #3
 8002038:	701a      	strb	r2, [r3, #0]
        break;
 800203a:	e005      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800203c:	4bac      	ldr	r3, [pc, #688]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4013      	ands	r3, r2
 8002046:	d0ed      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002048:	2313      	movs	r3, #19
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d154      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002052:	4ba6      	ldr	r3, [pc, #664]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002054:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4013      	ands	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d019      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	429a      	cmp	r2, r3
 800206c:	d014      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800206e:	4b9f      	ldr	r3, [pc, #636]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002072:	4aa0      	ldr	r2, [pc, #640]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002074:	4013      	ands	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002078:	4b9c      	ldr	r3, [pc, #624]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800207a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800207c:	4b9b      	ldr	r3, [pc, #620]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0249      	lsls	r1, r1, #9
 8002082:	430a      	orrs	r2, r1
 8002084:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002086:	4b99      	ldr	r3, [pc, #612]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002088:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800208a:	4b98      	ldr	r3, [pc, #608]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800208c:	499a      	ldr	r1, [pc, #616]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800208e:	400a      	ands	r2, r1
 8002090:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002092:	4b96      	ldr	r3, [pc, #600]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	d016      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff f80c 	bl	80010bc <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a8:	e00c      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7ff f807 	bl	80010bc <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	4a91      	ldr	r2, [pc, #580]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d904      	bls.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020ba:	2313      	movs	r3, #19
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2203      	movs	r2, #3
 80020c0:	701a      	strb	r2, [r3, #0]
            break;
 80020c2:	e004      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c4:	4b89      	ldr	r3, [pc, #548]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2202      	movs	r2, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	d0ed      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80020ce:	2313      	movs	r3, #19
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020d8:	4b84      	ldr	r3, [pc, #528]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	4a85      	ldr	r2, [pc, #532]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e6:	4b81      	ldr	r3, [pc, #516]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80020ec:	e00c      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ee:	2312      	movs	r3, #18
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2213      	movs	r2, #19
 80020f4:	18ba      	adds	r2, r7, r2
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e005      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020fc:	2312      	movs	r3, #18
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	2213      	movs	r2, #19
 8002102:	18ba      	adds	r2, r7, r2
 8002104:	7812      	ldrb	r2, [r2, #0]
 8002106:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002108:	2311      	movs	r3, #17
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d105      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002116:	4b75      	ldr	r3, [pc, #468]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002118:	4979      	ldr	r1, [pc, #484]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800211a:	400a      	ands	r2, r1
 800211c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	d009      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002128:	4b70      	ldr	r3, [pc, #448]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	2203      	movs	r2, #3
 800212e:	4393      	bics	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002138:	430a      	orrs	r2, r1
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d009      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002146:	4b69      	ldr	r3, [pc, #420]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	220c      	movs	r2, #12
 800214c:	4393      	bics	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	4b65      	ldr	r3, [pc, #404]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002156:	430a      	orrs	r2, r1
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2210      	movs	r2, #16
 8002160:	4013      	ands	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002164:	4b61      	ldr	r3, [pc, #388]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	4a66      	ldr	r2, [pc, #408]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800216a:	4013      	ands	r3, r2
 800216c:	0019      	movs	r1, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	4b5e      	ldr	r3, [pc, #376]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002174:	430a      	orrs	r2, r1
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4013      	ands	r3, r2
 8002182:	d009      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002184:	4b59      	ldr	r3, [pc, #356]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	4a5f      	ldr	r2, [pc, #380]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800218a:	4013      	ands	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	4b56      	ldr	r3, [pc, #344]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002194:	430a      	orrs	r2, r1
 8002196:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4013      	ands	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021a4:	4b51      	ldr	r3, [pc, #324]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	4b4e      	ldr	r3, [pc, #312]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2220      	movs	r2, #32
 80021be:	4013      	ands	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c2:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c6:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	4b46      	ldr	r3, [pc, #280]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	01db      	lsls	r3, r3, #7
 80021de:	4013      	ands	r3, r2
 80021e0:	d015      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021e2:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	0899      	lsrs	r1, r3, #2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1a      	ldr	r2, [r3, #32]
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	05db      	lsls	r3, r3, #23
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d106      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002200:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	4b39      	ldr	r3, [pc, #228]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	0249      	lsls	r1, r1, #9
 800220a:	430a      	orrs	r2, r1
 800220c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	031b      	lsls	r3, r3, #12
 8002216:	4013      	ands	r3, r2
 8002218:	d009      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800221a:	4b34      	ldr	r3, [pc, #208]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	2240      	movs	r2, #64	; 0x40
 8002220:	4393      	bics	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222a:	430a      	orrs	r2, r1
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	039b      	lsls	r3, r3, #14
 8002236:	4013      	ands	r3, r2
 8002238:	d016      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800223a:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	4a35      	ldr	r2, [pc, #212]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224a:	430a      	orrs	r2, r1
 800224c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	03db      	lsls	r3, r3, #15
 8002256:	429a      	cmp	r2, r3
 8002258:	d106      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	0449      	lsls	r1, r1, #17
 8002264:	430a      	orrs	r2, r1
 8002266:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	03db      	lsls	r3, r3, #15
 8002270:	4013      	ands	r3, r2
 8002272:	d016      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	4a27      	ldr	r2, [pc, #156]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800227a:	4013      	ands	r3, r2
 800227c:	0019      	movs	r1, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002284:	430a      	orrs	r2, r1
 8002286:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	045b      	lsls	r3, r3, #17
 8002290:	429a      	cmp	r2, r3
 8002292:	d106      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	0449      	lsls	r1, r1, #17
 800229e:	430a      	orrs	r2, r1
 80022a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	4013      	ands	r3, r2
 80022ac:	d016      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	01db      	lsls	r3, r3, #7
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d106      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0249      	lsls	r1, r1, #9
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80022dc:	2312      	movs	r3, #18
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	781b      	ldrb	r3, [r3, #0]
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b006      	add	sp, #24
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40007000 	.word	0x40007000
 80022f4:	fffffcff 	.word	0xfffffcff
 80022f8:	fffeffff 	.word	0xfffeffff
 80022fc:	00001388 	.word	0x00001388
 8002300:	efffffff 	.word	0xefffffff
 8002304:	fffff3ff 	.word	0xfffff3ff
 8002308:	fff3ffff 	.word	0xfff3ffff
 800230c:	ffcfffff 	.word	0xffcfffff
 8002310:	ffffcfff 	.word	0xffffcfff
 8002314:	ffbfffff 	.word	0xffbfffff
 8002318:	feffffff 	.word	0xfeffffff
 800231c:	ffff3fff 	.word	0xffff3fff

08002320 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002328:	230f      	movs	r3, #15
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d100      	bne.n	8002338 <HAL_RTC_Init+0x18>
 8002336:	e08c      	b.n	8002452 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2229      	movs	r2, #41	; 0x29
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2228      	movs	r2, #40	; 0x28
 8002348:	2100      	movs	r1, #0
 800234a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2288      	movs	r2, #136	; 0x88
 8002350:	0212      	lsls	r2, r2, #8
 8002352:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f7fe fc5c 	bl	8000c14 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2229      	movs	r2, #41	; 0x29
 8002360:	2102      	movs	r1, #2
 8002362:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2210      	movs	r2, #16
 800236c:	4013      	ands	r3, r2
 800236e:	2b10      	cmp	r3, #16
 8002370:	d062      	beq.n	8002438 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	22ca      	movs	r2, #202	; 0xca
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2253      	movs	r2, #83	; 0x53
 8002380:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002382:	250f      	movs	r5, #15
 8002384:	197c      	adds	r4, r7, r5
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0018      	movs	r0, r3
 800238a:	f000 f892 	bl	80024b2 <RTC_EnterInitMode>
 800238e:	0003      	movs	r3, r0
 8002390:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002392:	0028      	movs	r0, r5
 8002394:	183b      	adds	r3, r7, r0
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d12c      	bne.n	80023f6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	492e      	ldr	r1, [pc, #184]	; (8002460 <HAL_RTC_Init+0x140>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6999      	ldr	r1, [r3, #24]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6912      	ldr	r2, [r2, #16]
 80023d2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6919      	ldr	r1, [r3, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	041a      	lsls	r2, r3, #16
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80023e8:	183c      	adds	r4, r7, r0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 f8a3 	bl	8002538 <RTC_ExitInitMode>
 80023f2:	0003      	movs	r3, r0
 80023f4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80023f6:	230f      	movs	r3, #15
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d116      	bne.n	800242e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	08d2      	lsrs	r2, r2, #3
 800240e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6999      	ldr	r1, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
 8002436:	e003      	b.n	8002440 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002438:	230f      	movs	r3, #15
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002440:	230f      	movs	r3, #15
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d103      	bne.n	8002452 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2229      	movs	r2, #41	; 0x29
 800244e:	2101      	movs	r1, #1
 8002450:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002452:	230f      	movs	r3, #15
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	781b      	ldrb	r3, [r3, #0]
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bdb0      	pop	{r4, r5, r7, pc}
 8002460:	fb8fffbf 	.word	0xfb8fffbf

08002464 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	21a0      	movs	r1, #160	; 0xa0
 8002478:	438a      	bics	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800247c:	f7fe fe1e 	bl	80010bc <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002484:	e00a      	b.n	800249c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002486:	f7fe fe19 	bl	80010bc <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad2      	subs	r2, r2, r3
 8002490:	23fa      	movs	r3, #250	; 0xfa
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	429a      	cmp	r2, r3
 8002496:	d901      	bls.n	800249c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e006      	b.n	80024aa <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	4013      	ands	r3, r2
 80024a6:	d0ee      	beq.n	8002486 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80024ba:	230f      	movs	r3, #15
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2240      	movs	r2, #64	; 0x40
 80024ca:	4013      	ands	r3, r2
 80024cc:	d12c      	bne.n	8002528 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	430a      	orrs	r2, r1
 80024dc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80024de:	f7fe fded 	bl	80010bc <HAL_GetTick>
 80024e2:	0003      	movs	r3, r0
 80024e4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024e6:	e014      	b.n	8002512 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80024e8:	f7fe fde8 	bl	80010bc <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad2      	subs	r2, r2, r3
 80024f2:	200f      	movs	r0, #15
 80024f4:	183b      	adds	r3, r7, r0
 80024f6:	1839      	adds	r1, r7, r0
 80024f8:	7809      	ldrb	r1, [r1, #0]
 80024fa:	7019      	strb	r1, [r3, #0]
 80024fc:	23fa      	movs	r3, #250	; 0xfa
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d906      	bls.n	8002512 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002504:	183b      	adds	r3, r7, r0
 8002506:	2203      	movs	r2, #3
 8002508:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2229      	movs	r2, #41	; 0x29
 800250e:	2103      	movs	r1, #3
 8002510:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2240      	movs	r2, #64	; 0x40
 800251a:	4013      	ands	r3, r2
 800251c:	d104      	bne.n	8002528 <RTC_EnterInitMode+0x76>
 800251e:	230f      	movs	r3, #15
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d1df      	bne.n	80024e8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002528:	230f      	movs	r3, #15
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	781b      	ldrb	r3, [r3, #0]
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b004      	add	sp, #16
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	240f      	movs	r4, #15
 8002542:	193b      	adds	r3, r7, r4
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002548:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <RTC_ExitInitMode+0x84>)
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <RTC_ExitInitMode+0x84>)
 800254e:	2180      	movs	r1, #128	; 0x80
 8002550:	438a      	bics	r2, r1
 8002552:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <RTC_ExitInitMode+0x84>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2220      	movs	r2, #32
 800255a:	4013      	ands	r3, r2
 800255c:	d10d      	bne.n	800257a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff ff7f 	bl	8002464 <HAL_RTC_WaitForSynchro>
 8002566:	1e03      	subs	r3, r0, #0
 8002568:	d021      	beq.n	80025ae <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2229      	movs	r2, #41	; 0x29
 800256e:	2103      	movs	r1, #3
 8002570:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002572:	193b      	adds	r3, r7, r4
 8002574:	2203      	movs	r2, #3
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e019      	b.n	80025ae <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <RTC_ExitInitMode+0x84>)
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <RTC_ExitInitMode+0x84>)
 8002580:	2120      	movs	r1, #32
 8002582:	438a      	bics	r2, r1
 8002584:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	0018      	movs	r0, r3
 800258a:	f7ff ff6b 	bl	8002464 <HAL_RTC_WaitForSynchro>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d007      	beq.n	80025a2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2229      	movs	r2, #41	; 0x29
 8002596:	2103      	movs	r1, #3
 8002598:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800259a:	230f      	movs	r3, #15
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2203      	movs	r2, #3
 80025a0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <RTC_ExitInitMode+0x84>)
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <RTC_ExitInitMode+0x84>)
 80025a8:	2120      	movs	r1, #32
 80025aa:	430a      	orrs	r2, r1
 80025ac:	619a      	str	r2, [r3, #24]
  }

  return status;
 80025ae:	230f      	movs	r3, #15
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b005      	add	sp, #20
 80025ba:	bd90      	pop	{r4, r7, pc}
 80025bc:	40002800 	.word	0x40002800

080025c0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2228      	movs	r2, #40	; 0x28
 80025d0:	5c9b      	ldrb	r3, [r3, r2]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e082      	b.n	80026e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2228      	movs	r2, #40	; 0x28
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2229      	movs	r2, #41	; 0x29
 80025e6:	2102      	movs	r1, #2
 80025e8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	22ca      	movs	r2, #202	; 0xca
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2253      	movs	r2, #83	; 0x53
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4938      	ldr	r1, [pc, #224]	; (80026e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8002606:	400a      	ands	r2, r1
 8002608:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2104      	movs	r1, #4
 8002616:	430a      	orrs	r2, r1
 8002618:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2240      	movs	r2, #64	; 0x40
 8002620:	4013      	ands	r3, r2
 8002622:	d121      	bne.n	8002668 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8002624:	f7fe fd4a 	bl	80010bc <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800262c:	e016      	b.n	800265c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800262e:	f7fe fd45 	bl	80010bc <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	1ad2      	subs	r2, r2, r3
 8002638:	23fa      	movs	r3, #250	; 0xfa
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d90d      	bls.n	800265c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	22ff      	movs	r2, #255	; 0xff
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2229      	movs	r2, #41	; 0x29
 800264c:	2103      	movs	r1, #3
 800264e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2228      	movs	r2, #40	; 0x28
 8002654:	2100      	movs	r1, #0
 8002656:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e041      	b.n	80026e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2204      	movs	r2, #4
 8002664:	4013      	ands	r3, r2
 8002666:	d0e2      	beq.n	800262e <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2107      	movs	r1, #7
 800267c:	438a      	bics	r2, r1
 800267e:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6999      	ldr	r1, [r3, #24]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	430a      	orrs	r2, r1
 800268e:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002690:	4a17      	ldr	r2, [pc, #92]	; (80026f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	58d3      	ldr	r3, [r2, r3]
 8002696:	4916      	ldr	r1, [pc, #88]	; (80026f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	0312      	lsls	r2, r2, #12
 800269c:	4313      	orrs	r3, r2
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	01c9      	lsls	r1, r1, #7
 80026b0:	430a      	orrs	r2, r1
 80026b2:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2180      	movs	r1, #128	; 0x80
 80026c0:	00c9      	lsls	r1, r1, #3
 80026c2:	430a      	orrs	r2, r1
 80026c4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	22ff      	movs	r2, #255	; 0xff
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2229      	movs	r2, #41	; 0x29
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2228      	movs	r2, #40	; 0x28
 80026da:	2100      	movs	r1, #0
 80026dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b006      	add	sp, #24
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	fffffbff 	.word	0xfffffbff
 80026ec:	40002800 	.word	0x40002800
 80026f0:	40021800 	.word	0x40021800

080026f4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002702:	2204      	movs	r2, #4
 8002704:	4013      	ands	r3, r2
 8002706:	d00b      	beq.n	8002720 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2104      	movs	r1, #4
 8002714:	430a      	orrs	r2, r1
 8002716:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f808 	bl	8002730 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2229      	movs	r2, #41	; 0x29
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e04a      	b.n	80027e8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	223d      	movs	r2, #61	; 0x3d
 8002756:	5c9b      	ldrb	r3, [r3, r2]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223c      	movs	r2, #60	; 0x3c
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f7fe fa99 	bl	8000ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223d      	movs	r2, #61	; 0x3d
 8002772:	2102      	movs	r1, #2
 8002774:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f000 fa11 	bl	8002ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2248      	movs	r2, #72	; 0x48
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	223e      	movs	r2, #62	; 0x3e
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223f      	movs	r2, #63	; 0x3f
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2240      	movs	r2, #64	; 0x40
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2241      	movs	r2, #65	; 0x41
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2242      	movs	r2, #66	; 0x42
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2243      	movs	r2, #67	; 0x43
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2244      	movs	r2, #68	; 0x44
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2245      	movs	r2, #69	; 0x45
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2246      	movs	r2, #70	; 0x46
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2247      	movs	r2, #71	; 0x47
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223d      	movs	r2, #61	; 0x3d
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	223d      	movs	r2, #61	; 0x3d
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	d001      	beq.n	8002808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e042      	b.n	800288e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	223d      	movs	r2, #61	; 0x3d
 800280c:	2102      	movs	r1, #2
 800280e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <HAL_TIM_Base_Start_IT+0xa8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00f      	beq.n	800284a <HAL_TIM_Base_Start_IT+0x5a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	05db      	lsls	r3, r3, #23
 8002832:	429a      	cmp	r2, r3
 8002834:	d009      	beq.n	800284a <HAL_TIM_Base_Start_IT+0x5a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a18      	ldr	r2, [pc, #96]	; (800289c <HAL_TIM_Base_Start_IT+0xac>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_TIM_Base_Start_IT+0x5a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d116      	bne.n	8002878 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002852:	4013      	ands	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b06      	cmp	r3, #6
 800285a:	d016      	beq.n	800288a <HAL_TIM_Base_Start_IT+0x9a>
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	025b      	lsls	r3, r3, #9
 8002862:	429a      	cmp	r2, r3
 8002864:	d011      	beq.n	800288a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002876:	e008      	b.n	800288a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2101      	movs	r1, #1
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e000      	b.n	800288c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b004      	add	sp, #16
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	40012c00 	.word	0x40012c00
 800289c:	40000400 	.word	0x40000400
 80028a0:	40014000 	.word	0x40014000
 80028a4:	00010007 	.word	0x00010007

080028a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2101      	movs	r1, #1
 80028bc:	438a      	bics	r2, r1
 80028be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <HAL_TIM_Base_Stop_IT+0x54>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	d10d      	bne.n	80028e8 <HAL_TIM_Base_Stop_IT+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <HAL_TIM_Base_Stop_IT+0x58>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	d107      	bne.n	80028e8 <HAL_TIM_Base_Stop_IT+0x40>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	438a      	bics	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	223d      	movs	r2, #61	; 0x3d
 80028ec:	2101      	movs	r1, #1
 80028ee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b002      	add	sp, #8
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	00001111 	.word	0x00001111
 8002900:	00000444 	.word	0x00000444

08002904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2202      	movs	r2, #2
 8002914:	4013      	ands	r3, r2
 8002916:	2b02      	cmp	r3, #2
 8002918:	d124      	bne.n	8002964 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2202      	movs	r2, #2
 8002922:	4013      	ands	r3, r2
 8002924:	2b02      	cmp	r3, #2
 8002926:	d11d      	bne.n	8002964 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2203      	movs	r2, #3
 800292e:	4252      	negs	r2, r2
 8002930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2203      	movs	r2, #3
 8002940:	4013      	ands	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0018      	movs	r0, r3
 8002948:	f000 f916 	bl	8002b78 <HAL_TIM_IC_CaptureCallback>
 800294c:	e007      	b.n	800295e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0018      	movs	r0, r3
 8002952:	f000 f909 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f000 f915 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2204      	movs	r2, #4
 800296c:	4013      	ands	r3, r2
 800296e:	2b04      	cmp	r3, #4
 8002970:	d125      	bne.n	80029be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2204      	movs	r2, #4
 800297a:	4013      	ands	r3, r2
 800297c:	2b04      	cmp	r3, #4
 800297e:	d11e      	bne.n	80029be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2205      	movs	r2, #5
 8002986:	4252      	negs	r2, r2
 8002988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	23c0      	movs	r3, #192	; 0xc0
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d004      	beq.n	80029a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 f8e9 	bl	8002b78 <HAL_TIM_IC_CaptureCallback>
 80029a6:	e007      	b.n	80029b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f8dc 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 f8e8 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2208      	movs	r2, #8
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d124      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2208      	movs	r2, #8
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d11d      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2209      	movs	r2, #9
 80029e0:	4252      	negs	r2, r2
 80029e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2204      	movs	r2, #4
 80029e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	2203      	movs	r2, #3
 80029f2:	4013      	ands	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 f8bd 	bl	8002b78 <HAL_TIM_IC_CaptureCallback>
 80029fe:	e007      	b.n	8002a10 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 f8b0 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 f8bc 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d125      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d11e      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2211      	movs	r2, #17
 8002a38:	4252      	negs	r2, r2
 8002a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2208      	movs	r2, #8
 8002a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	23c0      	movs	r3, #192	; 0xc0
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 f890 	bl	8002b78 <HAL_TIM_IC_CaptureCallback>
 8002a58:	e007      	b.n	8002a6a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 f883 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 f88f 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10f      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d108      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4252      	negs	r2, r2
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7fe f865 	bl	8000b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d10f      	bne.n	8002acc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	d108      	bne.n	8002acc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2281      	movs	r2, #129	; 0x81
 8002ac0:	4252      	negs	r2, r2
 8002ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 f8f6 	bl	8002cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d10e      	bne.n	8002afe <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b80      	cmp	r3, #128	; 0x80
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <HAL_TIM_IRQHandler+0x260>)
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 f8e5 	bl	8002cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2240      	movs	r2, #64	; 0x40
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d10f      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2240      	movs	r2, #64	; 0x40
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d108      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2241      	movs	r2, #65	; 0x41
 8002b20:	4252      	negs	r2, r2
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 f836 	bl	8002b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2220      	movs	r2, #32
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d10f      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d108      	bne.n	8002b5a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2221      	movs	r2, #33	; 0x21
 8002b4e:	4252      	negs	r2, r2
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 f8a7 	bl	8002ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b002      	add	sp, #8
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	fffffeff 	.word	0xfffffeff

08002b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b002      	add	sp, #8
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a34      	ldr	r2, [pc, #208]	; (8002c8c <TIM_Base_SetConfig+0xe4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d008      	beq.n	8002bd2 <TIM_Base_SetConfig+0x2a>
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	05db      	lsls	r3, r3, #23
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d003      	beq.n	8002bd2 <TIM_Base_SetConfig+0x2a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a30      	ldr	r2, [pc, #192]	; (8002c90 <TIM_Base_SetConfig+0xe8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d108      	bne.n	8002be4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2270      	movs	r2, #112	; 0x70
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <TIM_Base_SetConfig+0xe4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d018      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	05db      	lsls	r3, r3, #23
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d013      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a25      	ldr	r2, [pc, #148]	; (8002c90 <TIM_Base_SetConfig+0xe8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00f      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <TIM_Base_SetConfig+0xec>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a23      	ldr	r2, [pc, #140]	; (8002c98 <TIM_Base_SetConfig+0xf0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <TIM_Base_SetConfig+0xf4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <TIM_Base_SetConfig+0xf8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d108      	bne.n	8002c30 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <TIM_Base_SetConfig+0xfc>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	4393      	bics	r3, r2
 8002c36:	001a      	movs	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <TIM_Base_SetConfig+0xe4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <TIM_Base_SetConfig+0xce>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <TIM_Base_SetConfig+0xf0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <TIM_Base_SetConfig+0xce>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <TIM_Base_SetConfig+0xf4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_Base_SetConfig+0xce>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <TIM_Base_SetConfig+0xf8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d103      	bne.n	8002c7e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	615a      	str	r2, [r3, #20]
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b004      	add	sp, #16
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40002000 	.word	0x40002000
 8002c98:	40014000 	.word	0x40014000
 8002c9c:	40014400 	.word	0x40014400
 8002ca0:	40014800 	.word	0x40014800
 8002ca4:	fffffcff 	.word	0xfffffcff

08002ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b002      	add	sp, #8
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e046      	b.n	8002d78 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2288      	movs	r2, #136	; 0x88
 8002cee:	589b      	ldr	r3, [r3, r2]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2284      	movs	r2, #132	; 0x84
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7fe f814 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2288      	movs	r2, #136	; 0x88
 8002d08:	2124      	movs	r1, #36	; 0x24
 8002d0a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2101      	movs	r1, #1
 8002d18:	438a      	bics	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 f9ae 	bl	8003080 <UART_SetConfig>
 8002d24:	0003      	movs	r3, r0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e024      	b.n	8002d78 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 fc5f 	bl	80035fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	490d      	ldr	r1, [pc, #52]	; (8002d80 <HAL_UART_Init+0xa8>)
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	212a      	movs	r1, #42	; 0x2a
 8002d5a:	438a      	bics	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 fcf7 	bl	8003764 <UART_CheckIdleState>
 8002d76:	0003      	movs	r3, r0
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	ffffb7ff 	.word	0xffffb7ff

08002d84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	1dbb      	adds	r3, r7, #6
 8002d92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2288      	movs	r2, #136	; 0x88
 8002d98:	589b      	ldr	r3, [r3, r2]
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d000      	beq.n	8002da0 <HAL_UART_Transmit+0x1c>
 8002d9e:	e088      	b.n	8002eb2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_UART_Transmit+0x2a>
 8002da6:	1dbb      	adds	r3, r7, #6
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e080      	b.n	8002eb4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	015b      	lsls	r3, r3, #5
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d109      	bne.n	8002dd2 <HAL_UART_Transmit+0x4e>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d001      	beq.n	8002dd2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e070      	b.n	8002eb4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2290      	movs	r2, #144	; 0x90
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2288      	movs	r2, #136	; 0x88
 8002dde:	2121      	movs	r1, #33	; 0x21
 8002de0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002de2:	f7fe f96b 	bl	80010bc <HAL_GetTick>
 8002de6:	0003      	movs	r3, r0
 8002de8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1dba      	adds	r2, r7, #6
 8002dee:	2154      	movs	r1, #84	; 0x54
 8002df0:	8812      	ldrh	r2, [r2, #0]
 8002df2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1dba      	adds	r2, r7, #6
 8002df8:	2156      	movs	r1, #86	; 0x56
 8002dfa:	8812      	ldrh	r2, [r2, #0]
 8002dfc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	015b      	lsls	r3, r3, #5
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d108      	bne.n	8002e1c <HAL_UART_Transmit+0x98>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d104      	bne.n	8002e1c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e003      	b.n	8002e24 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e24:	e02c      	b.n	8002e80 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	0013      	movs	r3, r2
 8002e30:	2200      	movs	r2, #0
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	f000 fce4 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e039      	b.n	8002eb4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10b      	bne.n	8002e5e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	05d2      	lsls	r2, r2, #23
 8002e52:	0dd2      	lsrs	r2, r2, #23
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	3302      	adds	r3, #2
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	e007      	b.n	8002e6e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2256      	movs	r2, #86	; 0x56
 8002e72:	5a9b      	ldrh	r3, [r3, r2]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b299      	uxth	r1, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2256      	movs	r2, #86	; 0x56
 8002e7e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2256      	movs	r2, #86	; 0x56
 8002e84:	5a9b      	ldrh	r3, [r3, r2]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1cc      	bne.n	8002e26 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	0013      	movs	r3, r2
 8002e96:	2200      	movs	r2, #0
 8002e98:	2140      	movs	r1, #64	; 0x40
 8002e9a:	f000 fcb1 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 8002e9e:	1e03      	subs	r3, r0, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e006      	b.n	8002eb4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2288      	movs	r2, #136	; 0x88
 8002eaa:	2120      	movs	r1, #32
 8002eac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002eb2:	2302      	movs	r3, #2
  }
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b008      	add	sp, #32
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	1dbb      	adds	r3, r7, #6
 8002eca:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	228c      	movs	r2, #140	; 0x8c
 8002ed0:	589b      	ldr	r3, [r3, r2]
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d000      	beq.n	8002ed8 <HAL_UART_Receive+0x1c>
 8002ed6:	e0cc      	b.n	8003072 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_UART_Receive+0x2a>
 8002ede:	1dbb      	adds	r3, r7, #6
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0c4      	b.n	8003074 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	015b      	lsls	r3, r3, #5
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d109      	bne.n	8002f0a <HAL_UART_Receive+0x4e>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d105      	bne.n	8002f0a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	d001      	beq.n	8002f0a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0b4      	b.n	8003074 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2290      	movs	r2, #144	; 0x90
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	228c      	movs	r2, #140	; 0x8c
 8002f16:	2122      	movs	r1, #34	; 0x22
 8002f18:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f20:	f7fe f8cc 	bl	80010bc <HAL_GetTick>
 8002f24:	0003      	movs	r3, r0
 8002f26:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1dba      	adds	r2, r7, #6
 8002f2c:	215c      	movs	r1, #92	; 0x5c
 8002f2e:	8812      	ldrh	r2, [r2, #0]
 8002f30:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1dba      	adds	r2, r7, #6
 8002f36:	215e      	movs	r1, #94	; 0x5e
 8002f38:	8812      	ldrh	r2, [r2, #0]
 8002f3a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	015b      	lsls	r3, r3, #5
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d10d      	bne.n	8002f64 <HAL_UART_Receive+0xa8>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_UART_Receive+0x9e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2260      	movs	r2, #96	; 0x60
 8002f54:	4949      	ldr	r1, [pc, #292]	; (800307c <HAL_UART_Receive+0x1c0>)
 8002f56:	5299      	strh	r1, [r3, r2]
 8002f58:	e02e      	b.n	8002fb8 <HAL_UART_Receive+0xfc>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2260      	movs	r2, #96	; 0x60
 8002f5e:	21ff      	movs	r1, #255	; 0xff
 8002f60:	5299      	strh	r1, [r3, r2]
 8002f62:	e029      	b.n	8002fb8 <HAL_UART_Receive+0xfc>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <HAL_UART_Receive+0xcc>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <HAL_UART_Receive+0xc2>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2260      	movs	r2, #96	; 0x60
 8002f78:	21ff      	movs	r1, #255	; 0xff
 8002f7a:	5299      	strh	r1, [r3, r2]
 8002f7c:	e01c      	b.n	8002fb8 <HAL_UART_Receive+0xfc>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2260      	movs	r2, #96	; 0x60
 8002f82:	217f      	movs	r1, #127	; 0x7f
 8002f84:	5299      	strh	r1, [r3, r2]
 8002f86:	e017      	b.n	8002fb8 <HAL_UART_Receive+0xfc>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	055b      	lsls	r3, r3, #21
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d10d      	bne.n	8002fb0 <HAL_UART_Receive+0xf4>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_UART_Receive+0xea>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2260      	movs	r2, #96	; 0x60
 8002fa0:	217f      	movs	r1, #127	; 0x7f
 8002fa2:	5299      	strh	r1, [r3, r2]
 8002fa4:	e008      	b.n	8002fb8 <HAL_UART_Receive+0xfc>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2260      	movs	r2, #96	; 0x60
 8002faa:	213f      	movs	r1, #63	; 0x3f
 8002fac:	5299      	strh	r1, [r3, r2]
 8002fae:	e003      	b.n	8002fb8 <HAL_UART_Receive+0xfc>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2260      	movs	r2, #96	; 0x60
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002fb8:	2312      	movs	r3, #18
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	2160      	movs	r1, #96	; 0x60
 8002fc0:	5a52      	ldrh	r2, [r2, r1]
 8002fc2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	015b      	lsls	r3, r3, #5
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d108      	bne.n	8002fe2 <HAL_UART_Receive+0x126>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d104      	bne.n	8002fe2 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	e003      	b.n	8002fea <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002fea:	e036      	b.n	800305a <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	0013      	movs	r3, r2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	f000 fc01 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d001      	beq.n	8003006 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e036      	b.n	8003074 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10e      	bne.n	800302a <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	b29b      	uxth	r3, r3
 8003014:	2212      	movs	r2, #18
 8003016:	18ba      	adds	r2, r7, r2
 8003018:	8812      	ldrh	r2, [r2, #0]
 800301a:	4013      	ands	r3, r2
 800301c:	b29a      	uxth	r2, r3
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3302      	adds	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	e00e      	b.n	8003048 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2212      	movs	r2, #18
 8003034:	18ba      	adds	r2, r7, r2
 8003036:	8812      	ldrh	r2, [r2, #0]
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	4013      	ands	r3, r2
 800303c:	b2da      	uxtb	r2, r3
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	225e      	movs	r2, #94	; 0x5e
 800304c:	5a9b      	ldrh	r3, [r3, r2]
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b299      	uxth	r1, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	225e      	movs	r2, #94	; 0x5e
 8003058:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	225e      	movs	r2, #94	; 0x5e
 800305e:	5a9b      	ldrh	r3, [r3, r2]
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1c2      	bne.n	8002fec <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	228c      	movs	r2, #140	; 0x8c
 800306a:	2120      	movs	r1, #32
 800306c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b008      	add	sp, #32
 800307a:	bd80      	pop	{r7, pc}
 800307c:	000001ff 	.word	0x000001ff

08003080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003080:	b5b0      	push	{r4, r5, r7, lr}
 8003082:	b090      	sub	sp, #64	; 0x40
 8003084:	af00      	add	r7, sp, #0
 8003086:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003088:	231a      	movs	r3, #26
 800308a:	2220      	movs	r2, #32
 800308c:	189b      	adds	r3, r3, r2
 800308e:	19db      	adds	r3, r3, r7
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	431a      	orrs	r2, r3
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4aaf      	ldr	r2, [pc, #700]	; (8003370 <UART_SetConfig+0x2f0>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	0019      	movs	r1, r3
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030be:	430b      	orrs	r3, r1
 80030c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4aaa      	ldr	r2, [pc, #680]	; (8003374 <UART_SetConfig+0x2f4>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0018      	movs	r0, r3
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	68d9      	ldr	r1, [r3, #12]
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	0003      	movs	r3, r0
 80030d8:	430b      	orrs	r3, r1
 80030da:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4aa4      	ldr	r2, [pc, #656]	; (8003378 <UART_SetConfig+0x2f8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d004      	beq.n	80030f6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030f2:	4313      	orrs	r3, r2
 80030f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a9f      	ldr	r2, [pc, #636]	; (800337c <UART_SetConfig+0x2fc>)
 80030fe:	4013      	ands	r3, r2
 8003100:	0019      	movs	r1, r3
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003108:	430b      	orrs	r3, r1
 800310a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	220f      	movs	r2, #15
 8003114:	4393      	bics	r3, r2
 8003116:	0018      	movs	r0, r3
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	0003      	movs	r3, r0
 8003122:	430b      	orrs	r3, r1
 8003124:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a95      	ldr	r2, [pc, #596]	; (8003380 <UART_SetConfig+0x300>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d131      	bne.n	8003194 <UART_SetConfig+0x114>
 8003130:	4b94      	ldr	r3, [pc, #592]	; (8003384 <UART_SetConfig+0x304>)
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	2203      	movs	r2, #3
 8003136:	4013      	ands	r3, r2
 8003138:	2b03      	cmp	r3, #3
 800313a:	d01d      	beq.n	8003178 <UART_SetConfig+0xf8>
 800313c:	d823      	bhi.n	8003186 <UART_SetConfig+0x106>
 800313e:	2b02      	cmp	r3, #2
 8003140:	d00c      	beq.n	800315c <UART_SetConfig+0xdc>
 8003142:	d820      	bhi.n	8003186 <UART_SetConfig+0x106>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <UART_SetConfig+0xce>
 8003148:	2b01      	cmp	r3, #1
 800314a:	d00e      	beq.n	800316a <UART_SetConfig+0xea>
 800314c:	e01b      	b.n	8003186 <UART_SetConfig+0x106>
 800314e:	231b      	movs	r3, #27
 8003150:	2220      	movs	r2, #32
 8003152:	189b      	adds	r3, r3, r2
 8003154:	19db      	adds	r3, r3, r7
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e0b4      	b.n	80032c6 <UART_SetConfig+0x246>
 800315c:	231b      	movs	r3, #27
 800315e:	2220      	movs	r2, #32
 8003160:	189b      	adds	r3, r3, r2
 8003162:	19db      	adds	r3, r3, r7
 8003164:	2202      	movs	r2, #2
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e0ad      	b.n	80032c6 <UART_SetConfig+0x246>
 800316a:	231b      	movs	r3, #27
 800316c:	2220      	movs	r2, #32
 800316e:	189b      	adds	r3, r3, r2
 8003170:	19db      	adds	r3, r3, r7
 8003172:	2204      	movs	r2, #4
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e0a6      	b.n	80032c6 <UART_SetConfig+0x246>
 8003178:	231b      	movs	r3, #27
 800317a:	2220      	movs	r2, #32
 800317c:	189b      	adds	r3, r3, r2
 800317e:	19db      	adds	r3, r3, r7
 8003180:	2208      	movs	r2, #8
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e09f      	b.n	80032c6 <UART_SetConfig+0x246>
 8003186:	231b      	movs	r3, #27
 8003188:	2220      	movs	r2, #32
 800318a:	189b      	adds	r3, r3, r2
 800318c:	19db      	adds	r3, r3, r7
 800318e:	2210      	movs	r2, #16
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e098      	b.n	80032c6 <UART_SetConfig+0x246>
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a7b      	ldr	r2, [pc, #492]	; (8003388 <UART_SetConfig+0x308>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d131      	bne.n	8003202 <UART_SetConfig+0x182>
 800319e:	4b79      	ldr	r3, [pc, #484]	; (8003384 <UART_SetConfig+0x304>)
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	220c      	movs	r2, #12
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d01d      	beq.n	80031e6 <UART_SetConfig+0x166>
 80031aa:	d823      	bhi.n	80031f4 <UART_SetConfig+0x174>
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d00c      	beq.n	80031ca <UART_SetConfig+0x14a>
 80031b0:	d820      	bhi.n	80031f4 <UART_SetConfig+0x174>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <UART_SetConfig+0x13c>
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d00e      	beq.n	80031d8 <UART_SetConfig+0x158>
 80031ba:	e01b      	b.n	80031f4 <UART_SetConfig+0x174>
 80031bc:	231b      	movs	r3, #27
 80031be:	2220      	movs	r2, #32
 80031c0:	189b      	adds	r3, r3, r2
 80031c2:	19db      	adds	r3, r3, r7
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e07d      	b.n	80032c6 <UART_SetConfig+0x246>
 80031ca:	231b      	movs	r3, #27
 80031cc:	2220      	movs	r2, #32
 80031ce:	189b      	adds	r3, r3, r2
 80031d0:	19db      	adds	r3, r3, r7
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e076      	b.n	80032c6 <UART_SetConfig+0x246>
 80031d8:	231b      	movs	r3, #27
 80031da:	2220      	movs	r2, #32
 80031dc:	189b      	adds	r3, r3, r2
 80031de:	19db      	adds	r3, r3, r7
 80031e0:	2204      	movs	r2, #4
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e06f      	b.n	80032c6 <UART_SetConfig+0x246>
 80031e6:	231b      	movs	r3, #27
 80031e8:	2220      	movs	r2, #32
 80031ea:	189b      	adds	r3, r3, r2
 80031ec:	19db      	adds	r3, r3, r7
 80031ee:	2208      	movs	r2, #8
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	e068      	b.n	80032c6 <UART_SetConfig+0x246>
 80031f4:	231b      	movs	r3, #27
 80031f6:	2220      	movs	r2, #32
 80031f8:	189b      	adds	r3, r3, r2
 80031fa:	19db      	adds	r3, r3, r7
 80031fc:	2210      	movs	r2, #16
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e061      	b.n	80032c6 <UART_SetConfig+0x246>
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a61      	ldr	r2, [pc, #388]	; (800338c <UART_SetConfig+0x30c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d106      	bne.n	800321a <UART_SetConfig+0x19a>
 800320c:	231b      	movs	r3, #27
 800320e:	2220      	movs	r2, #32
 8003210:	189b      	adds	r3, r3, r2
 8003212:	19db      	adds	r3, r3, r7
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e055      	b.n	80032c6 <UART_SetConfig+0x246>
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a5c      	ldr	r2, [pc, #368]	; (8003390 <UART_SetConfig+0x310>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d106      	bne.n	8003232 <UART_SetConfig+0x1b2>
 8003224:	231b      	movs	r3, #27
 8003226:	2220      	movs	r2, #32
 8003228:	189b      	adds	r3, r3, r2
 800322a:	19db      	adds	r3, r3, r7
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e049      	b.n	80032c6 <UART_SetConfig+0x246>
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a50      	ldr	r2, [pc, #320]	; (8003378 <UART_SetConfig+0x2f8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d13e      	bne.n	80032ba <UART_SetConfig+0x23a>
 800323c:	4b51      	ldr	r3, [pc, #324]	; (8003384 <UART_SetConfig+0x304>)
 800323e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003240:	23c0      	movs	r3, #192	; 0xc0
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	4013      	ands	r3, r2
 8003246:	22c0      	movs	r2, #192	; 0xc0
 8003248:	0112      	lsls	r2, r2, #4
 800324a:	4293      	cmp	r3, r2
 800324c:	d027      	beq.n	800329e <UART_SetConfig+0x21e>
 800324e:	22c0      	movs	r2, #192	; 0xc0
 8003250:	0112      	lsls	r2, r2, #4
 8003252:	4293      	cmp	r3, r2
 8003254:	d82a      	bhi.n	80032ac <UART_SetConfig+0x22c>
 8003256:	2280      	movs	r2, #128	; 0x80
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	4293      	cmp	r3, r2
 800325c:	d011      	beq.n	8003282 <UART_SetConfig+0x202>
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	0112      	lsls	r2, r2, #4
 8003262:	4293      	cmp	r3, r2
 8003264:	d822      	bhi.n	80032ac <UART_SetConfig+0x22c>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <UART_SetConfig+0x1f4>
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	00d2      	lsls	r2, r2, #3
 800326e:	4293      	cmp	r3, r2
 8003270:	d00e      	beq.n	8003290 <UART_SetConfig+0x210>
 8003272:	e01b      	b.n	80032ac <UART_SetConfig+0x22c>
 8003274:	231b      	movs	r3, #27
 8003276:	2220      	movs	r2, #32
 8003278:	189b      	adds	r3, r3, r2
 800327a:	19db      	adds	r3, r3, r7
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e021      	b.n	80032c6 <UART_SetConfig+0x246>
 8003282:	231b      	movs	r3, #27
 8003284:	2220      	movs	r2, #32
 8003286:	189b      	adds	r3, r3, r2
 8003288:	19db      	adds	r3, r3, r7
 800328a:	2202      	movs	r2, #2
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e01a      	b.n	80032c6 <UART_SetConfig+0x246>
 8003290:	231b      	movs	r3, #27
 8003292:	2220      	movs	r2, #32
 8003294:	189b      	adds	r3, r3, r2
 8003296:	19db      	adds	r3, r3, r7
 8003298:	2204      	movs	r2, #4
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e013      	b.n	80032c6 <UART_SetConfig+0x246>
 800329e:	231b      	movs	r3, #27
 80032a0:	2220      	movs	r2, #32
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	19db      	adds	r3, r3, r7
 80032a6:	2208      	movs	r2, #8
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e00c      	b.n	80032c6 <UART_SetConfig+0x246>
 80032ac:	231b      	movs	r3, #27
 80032ae:	2220      	movs	r2, #32
 80032b0:	189b      	adds	r3, r3, r2
 80032b2:	19db      	adds	r3, r3, r7
 80032b4:	2210      	movs	r2, #16
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e005      	b.n	80032c6 <UART_SetConfig+0x246>
 80032ba:	231b      	movs	r3, #27
 80032bc:	2220      	movs	r2, #32
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	19db      	adds	r3, r3, r7
 80032c2:	2210      	movs	r2, #16
 80032c4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2b      	ldr	r2, [pc, #172]	; (8003378 <UART_SetConfig+0x2f8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d000      	beq.n	80032d2 <UART_SetConfig+0x252>
 80032d0:	e0a9      	b.n	8003426 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032d2:	231b      	movs	r3, #27
 80032d4:	2220      	movs	r2, #32
 80032d6:	189b      	adds	r3, r3, r2
 80032d8:	19db      	adds	r3, r3, r7
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d015      	beq.n	800330c <UART_SetConfig+0x28c>
 80032e0:	dc18      	bgt.n	8003314 <UART_SetConfig+0x294>
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d00d      	beq.n	8003302 <UART_SetConfig+0x282>
 80032e6:	dc15      	bgt.n	8003314 <UART_SetConfig+0x294>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <UART_SetConfig+0x272>
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d005      	beq.n	80032fc <UART_SetConfig+0x27c>
 80032f0:	e010      	b.n	8003314 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f2:	f7fe fe47 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 80032f6:	0003      	movs	r3, r0
 80032f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032fa:	e014      	b.n	8003326 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <UART_SetConfig+0x314>)
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003300:	e011      	b.n	8003326 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003302:	f7fe fdb3 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8003306:	0003      	movs	r3, r0
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800330a:	e00c      	b.n	8003326 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003312:	e008      	b.n	8003326 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003318:	231a      	movs	r3, #26
 800331a:	2220      	movs	r2, #32
 800331c:	189b      	adds	r3, r3, r2
 800331e:	19db      	adds	r3, r3, r7
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
        break;
 8003324:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003328:	2b00      	cmp	r3, #0
 800332a:	d100      	bne.n	800332e <UART_SetConfig+0x2ae>
 800332c:	e14b      	b.n	80035c6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003332:	4b19      	ldr	r3, [pc, #100]	; (8003398 <UART_SetConfig+0x318>)
 8003334:	0052      	lsls	r2, r2, #1
 8003336:	5ad3      	ldrh	r3, [r2, r3]
 8003338:	0019      	movs	r1, r3
 800333a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800333c:	f7fc fef4 	bl	8000128 <__udivsi3>
 8003340:	0003      	movs	r3, r0
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	0013      	movs	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	189b      	adds	r3, r3, r2
 800334e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003350:	429a      	cmp	r2, r3
 8003352:	d305      	bcc.n	8003360 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800335a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800335c:	429a      	cmp	r2, r3
 800335e:	d91d      	bls.n	800339c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003360:	231a      	movs	r3, #26
 8003362:	2220      	movs	r2, #32
 8003364:	189b      	adds	r3, r3, r2
 8003366:	19db      	adds	r3, r3, r7
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e12b      	b.n	80035c6 <UART_SetConfig+0x546>
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	cfff69f3 	.word	0xcfff69f3
 8003374:	ffffcfff 	.word	0xffffcfff
 8003378:	40008000 	.word	0x40008000
 800337c:	11fff4ff 	.word	0x11fff4ff
 8003380:	40013800 	.word	0x40013800
 8003384:	40021000 	.word	0x40021000
 8003388:	40004400 	.word	0x40004400
 800338c:	40004800 	.word	0x40004800
 8003390:	40004c00 	.word	0x40004c00
 8003394:	00f42400 	.word	0x00f42400
 8003398:	080045f8 	.word	0x080045f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a8:	4b92      	ldr	r3, [pc, #584]	; (80035f4 <UART_SetConfig+0x574>)
 80033aa:	0052      	lsls	r2, r2, #1
 80033ac:	5ad3      	ldrh	r3, [r2, r3]
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	69b8      	ldr	r0, [r7, #24]
 80033ba:	69f9      	ldr	r1, [r7, #28]
 80033bc:	f7fd f82a 	bl	8000414 <__aeabi_uldivmod>
 80033c0:	0002      	movs	r2, r0
 80033c2:	000b      	movs	r3, r1
 80033c4:	0e11      	lsrs	r1, r2, #24
 80033c6:	021d      	lsls	r5, r3, #8
 80033c8:	430d      	orrs	r5, r1
 80033ca:	0214      	lsls	r4, r2, #8
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68b8      	ldr	r0, [r7, #8]
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	1900      	adds	r0, r0, r4
 80033de:	4169      	adcs	r1, r5
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f7fd f811 	bl	8000414 <__aeabi_uldivmod>
 80033f2:	0002      	movs	r2, r0
 80033f4:	000b      	movs	r3, r1
 80033f6:	0013      	movs	r3, r2
 80033f8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fc:	23c0      	movs	r3, #192	; 0xc0
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	429a      	cmp	r2, r3
 8003402:	d309      	bcc.n	8003418 <UART_SetConfig+0x398>
 8003404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	035b      	lsls	r3, r3, #13
 800340a:	429a      	cmp	r2, r3
 800340c:	d204      	bcs.n	8003418 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	e0d6      	b.n	80035c6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003418:	231a      	movs	r3, #26
 800341a:	2220      	movs	r2, #32
 800341c:	189b      	adds	r3, r3, r2
 800341e:	19db      	adds	r3, r3, r7
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e0cf      	b.n	80035c6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	69da      	ldr	r2, [r3, #28]
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	429a      	cmp	r2, r3
 8003430:	d000      	beq.n	8003434 <UART_SetConfig+0x3b4>
 8003432:	e070      	b.n	8003516 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003434:	231b      	movs	r3, #27
 8003436:	2220      	movs	r2, #32
 8003438:	189b      	adds	r3, r3, r2
 800343a:	19db      	adds	r3, r3, r7
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b08      	cmp	r3, #8
 8003440:	d015      	beq.n	800346e <UART_SetConfig+0x3ee>
 8003442:	dc18      	bgt.n	8003476 <UART_SetConfig+0x3f6>
 8003444:	2b04      	cmp	r3, #4
 8003446:	d00d      	beq.n	8003464 <UART_SetConfig+0x3e4>
 8003448:	dc15      	bgt.n	8003476 <UART_SetConfig+0x3f6>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <UART_SetConfig+0x3d4>
 800344e:	2b02      	cmp	r3, #2
 8003450:	d005      	beq.n	800345e <UART_SetConfig+0x3de>
 8003452:	e010      	b.n	8003476 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003454:	f7fe fd96 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 8003458:	0003      	movs	r3, r0
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800345c:	e014      	b.n	8003488 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800345e:	4b66      	ldr	r3, [pc, #408]	; (80035f8 <UART_SetConfig+0x578>)
 8003460:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003462:	e011      	b.n	8003488 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003464:	f7fe fd02 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8003468:	0003      	movs	r3, r0
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800346c:	e00c      	b.n	8003488 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003474:	e008      	b.n	8003488 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800347a:	231a      	movs	r3, #26
 800347c:	2220      	movs	r2, #32
 800347e:	189b      	adds	r3, r3, r2
 8003480:	19db      	adds	r3, r3, r7
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
        break;
 8003486:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	2b00      	cmp	r3, #0
 800348c:	d100      	bne.n	8003490 <UART_SetConfig+0x410>
 800348e:	e09a      	b.n	80035c6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003494:	4b57      	ldr	r3, [pc, #348]	; (80035f4 <UART_SetConfig+0x574>)
 8003496:	0052      	lsls	r2, r2, #1
 8003498:	5ad3      	ldrh	r3, [r2, r3]
 800349a:	0019      	movs	r1, r3
 800349c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800349e:	f7fc fe43 	bl	8000128 <__udivsi3>
 80034a2:	0003      	movs	r3, r0
 80034a4:	005a      	lsls	r2, r3, #1
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	18d2      	adds	r2, r2, r3
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	0019      	movs	r1, r3
 80034b4:	0010      	movs	r0, r2
 80034b6:	f7fc fe37 	bl	8000128 <__udivsi3>
 80034ba:	0003      	movs	r3, r0
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	2b0f      	cmp	r3, #15
 80034c2:	d921      	bls.n	8003508 <UART_SetConfig+0x488>
 80034c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	025b      	lsls	r3, r3, #9
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d21c      	bcs.n	8003508 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	200e      	movs	r0, #14
 80034d4:	2420      	movs	r4, #32
 80034d6:	1903      	adds	r3, r0, r4
 80034d8:	19db      	adds	r3, r3, r7
 80034da:	210f      	movs	r1, #15
 80034dc:	438a      	bics	r2, r1
 80034de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2207      	movs	r2, #7
 80034e8:	4013      	ands	r3, r2
 80034ea:	b299      	uxth	r1, r3
 80034ec:	1903      	adds	r3, r0, r4
 80034ee:	19db      	adds	r3, r3, r7
 80034f0:	1902      	adds	r2, r0, r4
 80034f2:	19d2      	adds	r2, r2, r7
 80034f4:	8812      	ldrh	r2, [r2, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	1902      	adds	r2, r0, r4
 8003500:	19d2      	adds	r2, r2, r7
 8003502:	8812      	ldrh	r2, [r2, #0]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	e05e      	b.n	80035c6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003508:	231a      	movs	r3, #26
 800350a:	2220      	movs	r2, #32
 800350c:	189b      	adds	r3, r3, r2
 800350e:	19db      	adds	r3, r3, r7
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	e057      	b.n	80035c6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003516:	231b      	movs	r3, #27
 8003518:	2220      	movs	r2, #32
 800351a:	189b      	adds	r3, r3, r2
 800351c:	19db      	adds	r3, r3, r7
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d015      	beq.n	8003550 <UART_SetConfig+0x4d0>
 8003524:	dc18      	bgt.n	8003558 <UART_SetConfig+0x4d8>
 8003526:	2b04      	cmp	r3, #4
 8003528:	d00d      	beq.n	8003546 <UART_SetConfig+0x4c6>
 800352a:	dc15      	bgt.n	8003558 <UART_SetConfig+0x4d8>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <UART_SetConfig+0x4b6>
 8003530:	2b02      	cmp	r3, #2
 8003532:	d005      	beq.n	8003540 <UART_SetConfig+0x4c0>
 8003534:	e010      	b.n	8003558 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003536:	f7fe fd25 	bl	8001f84 <HAL_RCC_GetPCLK1Freq>
 800353a:	0003      	movs	r3, r0
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800353e:	e014      	b.n	800356a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003540:	4b2d      	ldr	r3, [pc, #180]	; (80035f8 <UART_SetConfig+0x578>)
 8003542:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003544:	e011      	b.n	800356a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003546:	f7fe fc91 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 800354a:	0003      	movs	r3, r0
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800354e:	e00c      	b.n	800356a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003556:	e008      	b.n	800356a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800355c:	231a      	movs	r3, #26
 800355e:	2220      	movs	r2, #32
 8003560:	189b      	adds	r3, r3, r2
 8003562:	19db      	adds	r3, r3, r7
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
        break;
 8003568:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800356a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356c:	2b00      	cmp	r3, #0
 800356e:	d02a      	beq.n	80035c6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003574:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <UART_SetConfig+0x574>)
 8003576:	0052      	lsls	r2, r2, #1
 8003578:	5ad3      	ldrh	r3, [r2, r3]
 800357a:	0019      	movs	r1, r3
 800357c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800357e:	f7fc fdd3 	bl	8000128 <__udivsi3>
 8003582:	0003      	movs	r3, r0
 8003584:	001a      	movs	r2, r3
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	18d2      	adds	r2, r2, r3
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0019      	movs	r1, r3
 8003594:	0010      	movs	r0, r2
 8003596:	f7fc fdc7 	bl	8000128 <__udivsi3>
 800359a:	0003      	movs	r3, r0
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d90a      	bls.n	80035ba <UART_SetConfig+0x53a>
 80035a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d205      	bcs.n	80035ba <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	e005      	b.n	80035c6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80035ba:	231a      	movs	r3, #26
 80035bc:	2220      	movs	r2, #32
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	19db      	adds	r3, r3, r7
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	226a      	movs	r2, #106	; 0x6a
 80035ca:	2101      	movs	r1, #1
 80035cc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	2268      	movs	r2, #104	; 0x68
 80035d2:	2101      	movs	r1, #1
 80035d4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	2200      	movs	r2, #0
 80035da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	2200      	movs	r2, #0
 80035e0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80035e2:	231a      	movs	r3, #26
 80035e4:	2220      	movs	r2, #32
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	19db      	adds	r3, r3, r7
 80035ea:	781b      	ldrb	r3, [r3, #0]
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b010      	add	sp, #64	; 0x40
 80035f2:	bdb0      	pop	{r4, r5, r7, pc}
 80035f4:	080045f8 	.word	0x080045f8
 80035f8:	00f42400 	.word	0x00f42400

080035fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	2201      	movs	r2, #1
 800360a:	4013      	ands	r3, r2
 800360c:	d00b      	beq.n	8003626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a4a      	ldr	r2, [pc, #296]	; (8003740 <UART_AdvFeatureConfig+0x144>)
 8003616:	4013      	ands	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	2202      	movs	r2, #2
 800362c:	4013      	ands	r3, r2
 800362e:	d00b      	beq.n	8003648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4a43      	ldr	r2, [pc, #268]	; (8003744 <UART_AdvFeatureConfig+0x148>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	2204      	movs	r2, #4
 800364e:	4013      	ands	r3, r2
 8003650:	d00b      	beq.n	800366a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a3b      	ldr	r2, [pc, #236]	; (8003748 <UART_AdvFeatureConfig+0x14c>)
 800365a:	4013      	ands	r3, r2
 800365c:	0019      	movs	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	2208      	movs	r2, #8
 8003670:	4013      	ands	r3, r2
 8003672:	d00b      	beq.n	800368c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4a34      	ldr	r2, [pc, #208]	; (800374c <UART_AdvFeatureConfig+0x150>)
 800367c:	4013      	ands	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	2210      	movs	r2, #16
 8003692:	4013      	ands	r3, r2
 8003694:	d00b      	beq.n	80036ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <UART_AdvFeatureConfig+0x154>)
 800369e:	4013      	ands	r3, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	2220      	movs	r2, #32
 80036b4:	4013      	ands	r3, r2
 80036b6:	d00b      	beq.n	80036d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	4a25      	ldr	r2, [pc, #148]	; (8003754 <UART_AdvFeatureConfig+0x158>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	0019      	movs	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	2240      	movs	r2, #64	; 0x40
 80036d6:	4013      	ands	r3, r2
 80036d8:	d01d      	beq.n	8003716 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <UART_AdvFeatureConfig+0x15c>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	035b      	lsls	r3, r3, #13
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d10b      	bne.n	8003716 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a15      	ldr	r2, [pc, #84]	; (800375c <UART_AdvFeatureConfig+0x160>)
 8003706:	4013      	ands	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	4013      	ands	r3, r2
 800371e:	d00b      	beq.n	8003738 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <UART_AdvFeatureConfig+0x164>)
 8003728:	4013      	ands	r3, r2
 800372a:	0019      	movs	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
  }
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}
 8003740:	fffdffff 	.word	0xfffdffff
 8003744:	fffeffff 	.word	0xfffeffff
 8003748:	fffbffff 	.word	0xfffbffff
 800374c:	ffff7fff 	.word	0xffff7fff
 8003750:	ffffefff 	.word	0xffffefff
 8003754:	ffffdfff 	.word	0xffffdfff
 8003758:	ffefffff 	.word	0xffefffff
 800375c:	ff9fffff 	.word	0xff9fffff
 8003760:	fff7ffff 	.word	0xfff7ffff

08003764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af02      	add	r7, sp, #8
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2290      	movs	r2, #144	; 0x90
 8003770:	2100      	movs	r1, #0
 8003772:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003774:	f7fd fca2 	bl	80010bc <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2208      	movs	r2, #8
 8003784:	4013      	ands	r3, r2
 8003786:	2b08      	cmp	r3, #8
 8003788:	d10c      	bne.n	80037a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	0391      	lsls	r1, r2, #14
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4a1a      	ldr	r2, [pc, #104]	; (80037fc <UART_CheckIdleState+0x98>)
 8003794:	9200      	str	r2, [sp, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	f000 f832 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d001      	beq.n	80037a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e026      	b.n	80037f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2204      	movs	r2, #4
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d10c      	bne.n	80037cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	03d1      	lsls	r1, r2, #15
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <UART_CheckIdleState+0x98>)
 80037bc:	9200      	str	r2, [sp, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	f000 f81e 	bl	8003800 <UART_WaitOnFlagUntilTimeout>
 80037c4:	1e03      	subs	r3, r0, #0
 80037c6:	d001      	beq.n	80037cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e012      	b.n	80037f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2288      	movs	r2, #136	; 0x88
 80037d0:	2120      	movs	r1, #32
 80037d2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	228c      	movs	r2, #140	; 0x8c
 80037d8:	2120      	movs	r1, #32
 80037da:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2284      	movs	r2, #132	; 0x84
 80037ec:	2100      	movs	r1, #0
 80037ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b004      	add	sp, #16
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	01ffffff 	.word	0x01ffffff

08003800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b094      	sub	sp, #80	; 0x50
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	1dfb      	adds	r3, r7, #7
 800380e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003810:	e0a7      	b.n	8003962 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003814:	3301      	adds	r3, #1
 8003816:	d100      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003818:	e0a3      	b.n	8003962 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7fd fc4f 	bl	80010bc <HAL_GetTick>
 800381e:	0002      	movs	r2, r0
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <UART_WaitOnFlagUntilTimeout+0x30>
 800382a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800382c:	2b00      	cmp	r3, #0
 800382e:	d13f      	bne.n	80038b0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003830:	f3ef 8310 	mrs	r3, PRIMASK
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003838:	647b      	str	r3, [r7, #68]	; 0x44
 800383a:	2301      	movs	r3, #1
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	f383 8810 	msr	PRIMASK, r3
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	494e      	ldr	r1, [pc, #312]	; (800398c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003852:	400a      	ands	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	f383 8810 	msr	PRIMASK, r3
}
 8003860:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003862:	f3ef 8310 	mrs	r3, PRIMASK
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386a:	643b      	str	r3, [r7, #64]	; 0x40
 800386c:	2301      	movs	r3, #1
 800386e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	f383 8810 	msr	PRIMASK, r3
}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2101      	movs	r1, #1
 8003884:	438a      	bics	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388e:	f383 8810 	msr	PRIMASK, r3
}
 8003892:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2288      	movs	r2, #136	; 0x88
 8003898:	2120      	movs	r1, #32
 800389a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	228c      	movs	r2, #140	; 0x8c
 80038a0:	2120      	movs	r1, #32
 80038a2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2284      	movs	r2, #132	; 0x84
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e069      	b.n	8003984 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2204      	movs	r2, #4
 80038b8:	4013      	ands	r3, r2
 80038ba:	d052      	beq.n	8003962 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	401a      	ands	r2, r3
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d148      	bne.n	8003962 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038da:	f3ef 8310 	mrs	r3, PRIMASK
 80038de:	613b      	str	r3, [r7, #16]
  return(result);
 80038e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e4:	2301      	movs	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4924      	ldr	r1, [pc, #144]	; (800398c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80038fc:	400a      	ands	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003902:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f383 8810 	msr	PRIMASK, r3
}
 800390a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800390c:	f3ef 8310 	mrs	r3, PRIMASK
 8003910:	61fb      	str	r3, [r7, #28]
  return(result);
 8003912:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003914:	64bb      	str	r3, [r7, #72]	; 0x48
 8003916:	2301      	movs	r3, #1
 8003918:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f383 8810 	msr	PRIMASK, r3
}
 8003920:	46c0      	nop			; (mov r8, r8)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	438a      	bics	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
 8003932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2288      	movs	r2, #136	; 0x88
 8003942:	2120      	movs	r1, #32
 8003944:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	228c      	movs	r2, #140	; 0x8c
 800394a:	2120      	movs	r1, #32
 800394c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2290      	movs	r2, #144	; 0x90
 8003952:	2120      	movs	r1, #32
 8003954:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2284      	movs	r2, #132	; 0x84
 800395a:	2100      	movs	r1, #0
 800395c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e010      	b.n	8003984 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	4013      	ands	r3, r2
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	425a      	negs	r2, r3
 8003972:	4153      	adcs	r3, r2
 8003974:	b2db      	uxtb	r3, r3
 8003976:	001a      	movs	r2, r3
 8003978:	1dfb      	adds	r3, r7, #7
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d100      	bne.n	8003982 <UART_WaitOnFlagUntilTimeout+0x182>
 8003980:	e747      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b014      	add	sp, #80	; 0x50
 800398a:	bd80      	pop	{r7, pc}
 800398c:	fffffe5f 	.word	0xfffffe5f

08003990 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2284      	movs	r2, #132	; 0x84
 800399c:	5c9b      	ldrb	r3, [r3, r2]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e027      	b.n	80039f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2284      	movs	r2, #132	; 0x84
 80039aa:	2101      	movs	r1, #1
 80039ac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2288      	movs	r2, #136	; 0x88
 80039b2:	2124      	movs	r1, #36	; 0x24
 80039b4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	438a      	bics	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <HAL_UARTEx_DisableFifoMode+0x70>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2288      	movs	r2, #136	; 0x88
 80039e8:	2120      	movs	r1, #32
 80039ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2284      	movs	r2, #132	; 0x84
 80039f0:	2100      	movs	r1, #0
 80039f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b004      	add	sp, #16
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	dfffffff 	.word	0xdfffffff

08003a04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2284      	movs	r2, #132	; 0x84
 8003a12:	5c9b      	ldrb	r3, [r3, r2]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e02e      	b.n	8003a7a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2284      	movs	r2, #132	; 0x84
 8003a20:	2101      	movs	r1, #1
 8003a22:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2288      	movs	r2, #136	; 0x88
 8003a28:	2124      	movs	r1, #36	; 0x24
 8003a2a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2101      	movs	r1, #1
 8003a40:	438a      	bics	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	08d9      	lsrs	r1, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 f854 	bl	8003b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2288      	movs	r2, #136	; 0x88
 8003a6c:	2120      	movs	r1, #32
 8003a6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2284      	movs	r2, #132	; 0x84
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b004      	add	sp, #16
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2284      	movs	r2, #132	; 0x84
 8003a92:	5c9b      	ldrb	r3, [r3, r2]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e02f      	b.n	8003afc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2284      	movs	r2, #132	; 0x84
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2288      	movs	r2, #136	; 0x88
 8003aa8:	2124      	movs	r1, #36	; 0x24
 8003aaa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2101      	movs	r1, #1
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4a0e      	ldr	r2, [pc, #56]	; (8003b04 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 f813 	bl	8003b08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2288      	movs	r2, #136	; 0x88
 8003aee:	2120      	movs	r1, #32
 8003af0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2284      	movs	r2, #132	; 0x84
 8003af6:	2100      	movs	r1, #0
 8003af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	0018      	movs	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b004      	add	sp, #16
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	f1ffffff 	.word	0xf1ffffff

08003b08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d108      	bne.n	8003b2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	226a      	movs	r2, #106	; 0x6a
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2268      	movs	r2, #104	; 0x68
 8003b24:	2101      	movs	r1, #1
 8003b26:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b28:	e043      	b.n	8003bb2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b2a:	260f      	movs	r6, #15
 8003b2c:	19bb      	adds	r3, r7, r6
 8003b2e:	2208      	movs	r2, #8
 8003b30:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b32:	200e      	movs	r0, #14
 8003b34:	183b      	adds	r3, r7, r0
 8003b36:	2208      	movs	r2, #8
 8003b38:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	0e5b      	lsrs	r3, r3, #25
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	240d      	movs	r4, #13
 8003b46:	193b      	adds	r3, r7, r4
 8003b48:	2107      	movs	r1, #7
 8003b4a:	400a      	ands	r2, r1
 8003b4c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	0f5b      	lsrs	r3, r3, #29
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	250c      	movs	r5, #12
 8003b5a:	197b      	adds	r3, r7, r5
 8003b5c:	2107      	movs	r1, #7
 8003b5e:	400a      	ands	r2, r1
 8003b60:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b62:	183b      	adds	r3, r7, r0
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	197a      	adds	r2, r7, r5
 8003b68:	7812      	ldrb	r2, [r2, #0]
 8003b6a:	4914      	ldr	r1, [pc, #80]	; (8003bbc <UARTEx_SetNbDataToProcess+0xb4>)
 8003b6c:	5c8a      	ldrb	r2, [r1, r2]
 8003b6e:	435a      	muls	r2, r3
 8003b70:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b72:	197b      	adds	r3, r7, r5
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	f7fc fb5e 	bl	800023c <__divsi3>
 8003b80:	0003      	movs	r3, r0
 8003b82:	b299      	uxth	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	226a      	movs	r2, #106	; 0x6a
 8003b88:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b8a:	19bb      	adds	r3, r7, r6
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	193a      	adds	r2, r7, r4
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	490a      	ldr	r1, [pc, #40]	; (8003bbc <UARTEx_SetNbDataToProcess+0xb4>)
 8003b94:	5c8a      	ldrb	r2, [r1, r2]
 8003b96:	435a      	muls	r2, r3
 8003b98:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b9a:	193b      	adds	r3, r7, r4
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	4a08      	ldr	r2, [pc, #32]	; (8003bc0 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ba0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	f7fc fb4a 	bl	800023c <__divsi3>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	b299      	uxth	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2268      	movs	r2, #104	; 0x68
 8003bb0:	5299      	strh	r1, [r3, r2]
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	b005      	add	sp, #20
 8003bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	08004610 	.word	0x08004610
 8003bc0:	08004618 	.word	0x08004618

08003bc4 <__errno>:
 8003bc4:	4b01      	ldr	r3, [pc, #4]	; (8003bcc <__errno+0x8>)
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	4770      	bx	lr
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	20000034 	.word	0x20000034

08003bd0 <__libc_init_array>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	4d0c      	ldr	r5, [pc, #48]	; (8003c08 <__libc_init_array+0x38>)
 8003bd6:	4c0d      	ldr	r4, [pc, #52]	; (8003c0c <__libc_init_array+0x3c>)
 8003bd8:	1b64      	subs	r4, r4, r5
 8003bda:	10a4      	asrs	r4, r4, #2
 8003bdc:	42a6      	cmp	r6, r4
 8003bde:	d109      	bne.n	8003bf4 <__libc_init_array+0x24>
 8003be0:	2600      	movs	r6, #0
 8003be2:	f000 fcaf 	bl	8004544 <_init>
 8003be6:	4d0a      	ldr	r5, [pc, #40]	; (8003c10 <__libc_init_array+0x40>)
 8003be8:	4c0a      	ldr	r4, [pc, #40]	; (8003c14 <__libc_init_array+0x44>)
 8003bea:	1b64      	subs	r4, r4, r5
 8003bec:	10a4      	asrs	r4, r4, #2
 8003bee:	42a6      	cmp	r6, r4
 8003bf0:	d105      	bne.n	8003bfe <__libc_init_array+0x2e>
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
 8003bf4:	00b3      	lsls	r3, r6, #2
 8003bf6:	58eb      	ldr	r3, [r5, r3]
 8003bf8:	4798      	blx	r3
 8003bfa:	3601      	adds	r6, #1
 8003bfc:	e7ee      	b.n	8003bdc <__libc_init_array+0xc>
 8003bfe:	00b3      	lsls	r3, r6, #2
 8003c00:	58eb      	ldr	r3, [r5, r3]
 8003c02:	4798      	blx	r3
 8003c04:	3601      	adds	r6, #1
 8003c06:	e7f2      	b.n	8003bee <__libc_init_array+0x1e>
 8003c08:	0800465c 	.word	0x0800465c
 8003c0c:	0800465c 	.word	0x0800465c
 8003c10:	0800465c 	.word	0x0800465c
 8003c14:	08004660 	.word	0x08004660

08003c18 <malloc>:
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <malloc+0x10>)
 8003c1c:	0001      	movs	r1, r0
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	f000 f882 	bl	8003d28 <_malloc_r>
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	20000034 	.word	0x20000034

08003c2c <free>:
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <free+0x10>)
 8003c30:	0001      	movs	r1, r0
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	f000 f80c 	bl	8003c50 <_free_r>
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	20000034 	.word	0x20000034

08003c40 <memset>:
 8003c40:	0003      	movs	r3, r0
 8003c42:	1882      	adds	r2, r0, r2
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d100      	bne.n	8003c4a <memset+0xa>
 8003c48:	4770      	bx	lr
 8003c4a:	7019      	strb	r1, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	e7f9      	b.n	8003c44 <memset+0x4>

08003c50 <_free_r>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	0005      	movs	r5, r0
 8003c54:	2900      	cmp	r1, #0
 8003c56:	d010      	beq.n	8003c7a <_free_r+0x2a>
 8003c58:	1f0c      	subs	r4, r1, #4
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	da00      	bge.n	8003c62 <_free_r+0x12>
 8003c60:	18e4      	adds	r4, r4, r3
 8003c62:	0028      	movs	r0, r5
 8003c64:	f000 f91a 	bl	8003e9c <__malloc_lock>
 8003c68:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <_free_r+0x90>)
 8003c6a:	6813      	ldr	r3, [r2, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <_free_r+0x2c>
 8003c70:	6063      	str	r3, [r4, #4]
 8003c72:	6014      	str	r4, [r2, #0]
 8003c74:	0028      	movs	r0, r5
 8003c76:	f000 f919 	bl	8003eac <__malloc_unlock>
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	42a3      	cmp	r3, r4
 8003c7e:	d908      	bls.n	8003c92 <_free_r+0x42>
 8003c80:	6821      	ldr	r1, [r4, #0]
 8003c82:	1860      	adds	r0, r4, r1
 8003c84:	4283      	cmp	r3, r0
 8003c86:	d1f3      	bne.n	8003c70 <_free_r+0x20>
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	1841      	adds	r1, r0, r1
 8003c8e:	6021      	str	r1, [r4, #0]
 8003c90:	e7ee      	b.n	8003c70 <_free_r+0x20>
 8003c92:	001a      	movs	r2, r3
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <_free_r+0x4e>
 8003c9a:	42a3      	cmp	r3, r4
 8003c9c:	d9f9      	bls.n	8003c92 <_free_r+0x42>
 8003c9e:	6811      	ldr	r1, [r2, #0]
 8003ca0:	1850      	adds	r0, r2, r1
 8003ca2:	42a0      	cmp	r0, r4
 8003ca4:	d10b      	bne.n	8003cbe <_free_r+0x6e>
 8003ca6:	6820      	ldr	r0, [r4, #0]
 8003ca8:	1809      	adds	r1, r1, r0
 8003caa:	1850      	adds	r0, r2, r1
 8003cac:	6011      	str	r1, [r2, #0]
 8003cae:	4283      	cmp	r3, r0
 8003cb0:	d1e0      	bne.n	8003c74 <_free_r+0x24>
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	1841      	adds	r1, r0, r1
 8003cb8:	6011      	str	r1, [r2, #0]
 8003cba:	6053      	str	r3, [r2, #4]
 8003cbc:	e7da      	b.n	8003c74 <_free_r+0x24>
 8003cbe:	42a0      	cmp	r0, r4
 8003cc0:	d902      	bls.n	8003cc8 <_free_r+0x78>
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	602b      	str	r3, [r5, #0]
 8003cc6:	e7d5      	b.n	8003c74 <_free_r+0x24>
 8003cc8:	6821      	ldr	r1, [r4, #0]
 8003cca:	1860      	adds	r0, r4, r1
 8003ccc:	4283      	cmp	r3, r0
 8003cce:	d103      	bne.n	8003cd8 <_free_r+0x88>
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	1841      	adds	r1, r0, r1
 8003cd6:	6021      	str	r1, [r4, #0]
 8003cd8:	6063      	str	r3, [r4, #4]
 8003cda:	6054      	str	r4, [r2, #4]
 8003cdc:	e7ca      	b.n	8003c74 <_free_r+0x24>
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	200002ac 	.word	0x200002ac

08003ce4 <sbrk_aligned>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	4e0f      	ldr	r6, [pc, #60]	; (8003d24 <sbrk_aligned+0x40>)
 8003ce8:	000d      	movs	r5, r1
 8003cea:	6831      	ldr	r1, [r6, #0]
 8003cec:	0004      	movs	r4, r0
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	d102      	bne.n	8003cf8 <sbrk_aligned+0x14>
 8003cf2:	f000 f88f 	bl	8003e14 <_sbrk_r>
 8003cf6:	6030      	str	r0, [r6, #0]
 8003cf8:	0029      	movs	r1, r5
 8003cfa:	0020      	movs	r0, r4
 8003cfc:	f000 f88a 	bl	8003e14 <_sbrk_r>
 8003d00:	1c43      	adds	r3, r0, #1
 8003d02:	d00a      	beq.n	8003d1a <sbrk_aligned+0x36>
 8003d04:	2303      	movs	r3, #3
 8003d06:	1cc5      	adds	r5, r0, #3
 8003d08:	439d      	bics	r5, r3
 8003d0a:	42a8      	cmp	r0, r5
 8003d0c:	d007      	beq.n	8003d1e <sbrk_aligned+0x3a>
 8003d0e:	1a29      	subs	r1, r5, r0
 8003d10:	0020      	movs	r0, r4
 8003d12:	f000 f87f 	bl	8003e14 <_sbrk_r>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	d101      	bne.n	8003d1e <sbrk_aligned+0x3a>
 8003d1a:	2501      	movs	r5, #1
 8003d1c:	426d      	negs	r5, r5
 8003d1e:	0028      	movs	r0, r5
 8003d20:	bd70      	pop	{r4, r5, r6, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	200002b0 	.word	0x200002b0

08003d28 <_malloc_r>:
 8003d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	1ccb      	adds	r3, r1, #3
 8003d2e:	4393      	bics	r3, r2
 8003d30:	3308      	adds	r3, #8
 8003d32:	0006      	movs	r6, r0
 8003d34:	001f      	movs	r7, r3
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	d232      	bcs.n	8003da0 <_malloc_r+0x78>
 8003d3a:	270c      	movs	r7, #12
 8003d3c:	42b9      	cmp	r1, r7
 8003d3e:	d831      	bhi.n	8003da4 <_malloc_r+0x7c>
 8003d40:	0030      	movs	r0, r6
 8003d42:	f000 f8ab 	bl	8003e9c <__malloc_lock>
 8003d46:	4d32      	ldr	r5, [pc, #200]	; (8003e10 <_malloc_r+0xe8>)
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	001c      	movs	r4, r3
 8003d4c:	2c00      	cmp	r4, #0
 8003d4e:	d12e      	bne.n	8003dae <_malloc_r+0x86>
 8003d50:	0039      	movs	r1, r7
 8003d52:	0030      	movs	r0, r6
 8003d54:	f7ff ffc6 	bl	8003ce4 <sbrk_aligned>
 8003d58:	0004      	movs	r4, r0
 8003d5a:	1c43      	adds	r3, r0, #1
 8003d5c:	d11e      	bne.n	8003d9c <_malloc_r+0x74>
 8003d5e:	682c      	ldr	r4, [r5, #0]
 8003d60:	0025      	movs	r5, r4
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	d14a      	bne.n	8003dfc <_malloc_r+0xd4>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	0029      	movs	r1, r5
 8003d6a:	18e3      	adds	r3, r4, r3
 8003d6c:	0030      	movs	r0, r6
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	f000 f850 	bl	8003e14 <_sbrk_r>
 8003d74:	9b01      	ldr	r3, [sp, #4]
 8003d76:	4283      	cmp	r3, r0
 8003d78:	d143      	bne.n	8003e02 <_malloc_r+0xda>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	3703      	adds	r7, #3
 8003d7e:	1aff      	subs	r7, r7, r3
 8003d80:	2303      	movs	r3, #3
 8003d82:	439f      	bics	r7, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	2f0c      	cmp	r7, #12
 8003d88:	d200      	bcs.n	8003d8c <_malloc_r+0x64>
 8003d8a:	270c      	movs	r7, #12
 8003d8c:	0039      	movs	r1, r7
 8003d8e:	0030      	movs	r0, r6
 8003d90:	f7ff ffa8 	bl	8003ce4 <sbrk_aligned>
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d034      	beq.n	8003e02 <_malloc_r+0xda>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	19df      	adds	r7, r3, r7
 8003d9c:	6027      	str	r7, [r4, #0]
 8003d9e:	e013      	b.n	8003dc8 <_malloc_r+0xa0>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	dacb      	bge.n	8003d3c <_malloc_r+0x14>
 8003da4:	230c      	movs	r3, #12
 8003da6:	2500      	movs	r5, #0
 8003da8:	6033      	str	r3, [r6, #0]
 8003daa:	0028      	movs	r0, r5
 8003dac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	1bd1      	subs	r1, r2, r7
 8003db2:	d420      	bmi.n	8003df6 <_malloc_r+0xce>
 8003db4:	290b      	cmp	r1, #11
 8003db6:	d917      	bls.n	8003de8 <_malloc_r+0xc0>
 8003db8:	19e2      	adds	r2, r4, r7
 8003dba:	6027      	str	r7, [r4, #0]
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	d111      	bne.n	8003de4 <_malloc_r+0xbc>
 8003dc0:	602a      	str	r2, [r5, #0]
 8003dc2:	6863      	ldr	r3, [r4, #4]
 8003dc4:	6011      	str	r1, [r2, #0]
 8003dc6:	6053      	str	r3, [r2, #4]
 8003dc8:	0030      	movs	r0, r6
 8003dca:	0025      	movs	r5, r4
 8003dcc:	f000 f86e 	bl	8003eac <__malloc_unlock>
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	350b      	adds	r5, #11
 8003dd4:	1d23      	adds	r3, r4, #4
 8003dd6:	4395      	bics	r5, r2
 8003dd8:	1aea      	subs	r2, r5, r3
 8003dda:	429d      	cmp	r5, r3
 8003ddc:	d0e5      	beq.n	8003daa <_malloc_r+0x82>
 8003dde:	1b5b      	subs	r3, r3, r5
 8003de0:	50a3      	str	r3, [r4, r2]
 8003de2:	e7e2      	b.n	8003daa <_malloc_r+0x82>
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	e7ec      	b.n	8003dc2 <_malloc_r+0x9a>
 8003de8:	6862      	ldr	r2, [r4, #4]
 8003dea:	42a3      	cmp	r3, r4
 8003dec:	d101      	bne.n	8003df2 <_malloc_r+0xca>
 8003dee:	602a      	str	r2, [r5, #0]
 8003df0:	e7ea      	b.n	8003dc8 <_malloc_r+0xa0>
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	e7e8      	b.n	8003dc8 <_malloc_r+0xa0>
 8003df6:	0023      	movs	r3, r4
 8003df8:	6864      	ldr	r4, [r4, #4]
 8003dfa:	e7a7      	b.n	8003d4c <_malloc_r+0x24>
 8003dfc:	002c      	movs	r4, r5
 8003dfe:	686d      	ldr	r5, [r5, #4]
 8003e00:	e7af      	b.n	8003d62 <_malloc_r+0x3a>
 8003e02:	230c      	movs	r3, #12
 8003e04:	0030      	movs	r0, r6
 8003e06:	6033      	str	r3, [r6, #0]
 8003e08:	f000 f850 	bl	8003eac <__malloc_unlock>
 8003e0c:	e7cd      	b.n	8003daa <_malloc_r+0x82>
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	200002ac 	.word	0x200002ac

08003e14 <_sbrk_r>:
 8003e14:	2300      	movs	r3, #0
 8003e16:	b570      	push	{r4, r5, r6, lr}
 8003e18:	4d06      	ldr	r5, [pc, #24]	; (8003e34 <_sbrk_r+0x20>)
 8003e1a:	0004      	movs	r4, r0
 8003e1c:	0008      	movs	r0, r1
 8003e1e:	602b      	str	r3, [r5, #0]
 8003e20:	f7fd f86a 	bl	8000ef8 <_sbrk>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	d103      	bne.n	8003e30 <_sbrk_r+0x1c>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d000      	beq.n	8003e30 <_sbrk_r+0x1c>
 8003e2e:	6023      	str	r3, [r4, #0]
 8003e30:	bd70      	pop	{r4, r5, r6, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	200002b4 	.word	0x200002b4

08003e38 <siprintf>:
 8003e38:	b40e      	push	{r1, r2, r3}
 8003e3a:	b500      	push	{lr}
 8003e3c:	490b      	ldr	r1, [pc, #44]	; (8003e6c <siprintf+0x34>)
 8003e3e:	b09c      	sub	sp, #112	; 0x70
 8003e40:	ab1d      	add	r3, sp, #116	; 0x74
 8003e42:	9002      	str	r0, [sp, #8]
 8003e44:	9006      	str	r0, [sp, #24]
 8003e46:	9107      	str	r1, [sp, #28]
 8003e48:	9104      	str	r1, [sp, #16]
 8003e4a:	4809      	ldr	r0, [pc, #36]	; (8003e70 <siprintf+0x38>)
 8003e4c:	4909      	ldr	r1, [pc, #36]	; (8003e74 <siprintf+0x3c>)
 8003e4e:	cb04      	ldmia	r3!, {r2}
 8003e50:	9105      	str	r1, [sp, #20]
 8003e52:	6800      	ldr	r0, [r0, #0]
 8003e54:	a902      	add	r1, sp, #8
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	f000 f892 	bl	8003f80 <_svfiprintf_r>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	9a02      	ldr	r2, [sp, #8]
 8003e60:	7013      	strb	r3, [r2, #0]
 8003e62:	b01c      	add	sp, #112	; 0x70
 8003e64:	bc08      	pop	{r3}
 8003e66:	b003      	add	sp, #12
 8003e68:	4718      	bx	r3
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	7fffffff 	.word	0x7fffffff
 8003e70:	20000034 	.word	0x20000034
 8003e74:	ffff0208 	.word	0xffff0208

08003e78 <strncmp>:
 8003e78:	b530      	push	{r4, r5, lr}
 8003e7a:	0005      	movs	r5, r0
 8003e7c:	1e10      	subs	r0, r2, #0
 8003e7e:	d008      	beq.n	8003e92 <strncmp+0x1a>
 8003e80:	2400      	movs	r4, #0
 8003e82:	3a01      	subs	r2, #1
 8003e84:	5d2b      	ldrb	r3, [r5, r4]
 8003e86:	5d08      	ldrb	r0, [r1, r4]
 8003e88:	4283      	cmp	r3, r0
 8003e8a:	d101      	bne.n	8003e90 <strncmp+0x18>
 8003e8c:	4294      	cmp	r4, r2
 8003e8e:	d101      	bne.n	8003e94 <strncmp+0x1c>
 8003e90:	1a18      	subs	r0, r3, r0
 8003e92:	bd30      	pop	{r4, r5, pc}
 8003e94:	3401      	adds	r4, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f4      	bne.n	8003e84 <strncmp+0xc>
 8003e9a:	e7f9      	b.n	8003e90 <strncmp+0x18>

08003e9c <__malloc_lock>:
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	4802      	ldr	r0, [pc, #8]	; (8003ea8 <__malloc_lock+0xc>)
 8003ea0:	f000 faf0 	bl	8004484 <__retarget_lock_acquire_recursive>
 8003ea4:	bd10      	pop	{r4, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	200002b8 	.word	0x200002b8

08003eac <__malloc_unlock>:
 8003eac:	b510      	push	{r4, lr}
 8003eae:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <__malloc_unlock+0xc>)
 8003eb0:	f000 fae9 	bl	8004486 <__retarget_lock_release_recursive>
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	200002b8 	.word	0x200002b8

08003ebc <__ssputs_r>:
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	688e      	ldr	r6, [r1, #8]
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	0007      	movs	r7, r0
 8003ec4:	000c      	movs	r4, r1
 8003ec6:	9203      	str	r2, [sp, #12]
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	429e      	cmp	r6, r3
 8003ecc:	d83c      	bhi.n	8003f48 <__ssputs_r+0x8c>
 8003ece:	2390      	movs	r3, #144	; 0x90
 8003ed0:	898a      	ldrh	r2, [r1, #12]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	421a      	tst	r2, r3
 8003ed6:	d034      	beq.n	8003f42 <__ssputs_r+0x86>
 8003ed8:	6909      	ldr	r1, [r1, #16]
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	6960      	ldr	r0, [r4, #20]
 8003ede:	1a5b      	subs	r3, r3, r1
 8003ee0:	9302      	str	r3, [sp, #8]
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	4343      	muls	r3, r0
 8003ee6:	0fdd      	lsrs	r5, r3, #31
 8003ee8:	18ed      	adds	r5, r5, r3
 8003eea:	9b01      	ldr	r3, [sp, #4]
 8003eec:	9802      	ldr	r0, [sp, #8]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	181b      	adds	r3, r3, r0
 8003ef2:	106d      	asrs	r5, r5, #1
 8003ef4:	42ab      	cmp	r3, r5
 8003ef6:	d900      	bls.n	8003efa <__ssputs_r+0x3e>
 8003ef8:	001d      	movs	r5, r3
 8003efa:	0553      	lsls	r3, r2, #21
 8003efc:	d532      	bpl.n	8003f64 <__ssputs_r+0xa8>
 8003efe:	0029      	movs	r1, r5
 8003f00:	0038      	movs	r0, r7
 8003f02:	f7ff ff11 	bl	8003d28 <_malloc_r>
 8003f06:	1e06      	subs	r6, r0, #0
 8003f08:	d109      	bne.n	8003f1e <__ssputs_r+0x62>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	2340      	movs	r3, #64	; 0x40
 8003f10:	2001      	movs	r0, #1
 8003f12:	89a2      	ldrh	r2, [r4, #12]
 8003f14:	4240      	negs	r0, r0
 8003f16:	4313      	orrs	r3, r2
 8003f18:	81a3      	strh	r3, [r4, #12]
 8003f1a:	b005      	add	sp, #20
 8003f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f1e:	9a02      	ldr	r2, [sp, #8]
 8003f20:	6921      	ldr	r1, [r4, #16]
 8003f22:	f000 fabc 	bl	800449e <memcpy>
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <__ssputs_r+0xc0>)
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	81a3      	strh	r3, [r4, #12]
 8003f32:	9b02      	ldr	r3, [sp, #8]
 8003f34:	6126      	str	r6, [r4, #16]
 8003f36:	18f6      	adds	r6, r6, r3
 8003f38:	6026      	str	r6, [r4, #0]
 8003f3a:	6165      	str	r5, [r4, #20]
 8003f3c:	9e01      	ldr	r6, [sp, #4]
 8003f3e:	1aed      	subs	r5, r5, r3
 8003f40:	60a5      	str	r5, [r4, #8]
 8003f42:	9b01      	ldr	r3, [sp, #4]
 8003f44:	429e      	cmp	r6, r3
 8003f46:	d900      	bls.n	8003f4a <__ssputs_r+0x8e>
 8003f48:	9e01      	ldr	r6, [sp, #4]
 8003f4a:	0032      	movs	r2, r6
 8003f4c:	9903      	ldr	r1, [sp, #12]
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	f000 faae 	bl	80044b0 <memmove>
 8003f54:	68a3      	ldr	r3, [r4, #8]
 8003f56:	2000      	movs	r0, #0
 8003f58:	1b9b      	subs	r3, r3, r6
 8003f5a:	60a3      	str	r3, [r4, #8]
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	199e      	adds	r6, r3, r6
 8003f60:	6026      	str	r6, [r4, #0]
 8003f62:	e7da      	b.n	8003f1a <__ssputs_r+0x5e>
 8003f64:	002a      	movs	r2, r5
 8003f66:	0038      	movs	r0, r7
 8003f68:	f000 fab5 	bl	80044d6 <_realloc_r>
 8003f6c:	1e06      	subs	r6, r0, #0
 8003f6e:	d1e0      	bne.n	8003f32 <__ssputs_r+0x76>
 8003f70:	0038      	movs	r0, r7
 8003f72:	6921      	ldr	r1, [r4, #16]
 8003f74:	f7ff fe6c 	bl	8003c50 <_free_r>
 8003f78:	e7c7      	b.n	8003f0a <__ssputs_r+0x4e>
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	fffffb7f 	.word	0xfffffb7f

08003f80 <_svfiprintf_r>:
 8003f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f82:	b0a1      	sub	sp, #132	; 0x84
 8003f84:	9003      	str	r0, [sp, #12]
 8003f86:	001d      	movs	r5, r3
 8003f88:	898b      	ldrh	r3, [r1, #12]
 8003f8a:	000f      	movs	r7, r1
 8003f8c:	0016      	movs	r6, r2
 8003f8e:	061b      	lsls	r3, r3, #24
 8003f90:	d511      	bpl.n	8003fb6 <_svfiprintf_r+0x36>
 8003f92:	690b      	ldr	r3, [r1, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10e      	bne.n	8003fb6 <_svfiprintf_r+0x36>
 8003f98:	2140      	movs	r1, #64	; 0x40
 8003f9a:	f7ff fec5 	bl	8003d28 <_malloc_r>
 8003f9e:	6038      	str	r0, [r7, #0]
 8003fa0:	6138      	str	r0, [r7, #16]
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d105      	bne.n	8003fb2 <_svfiprintf_r+0x32>
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	9a03      	ldr	r2, [sp, #12]
 8003faa:	3801      	subs	r0, #1
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	b021      	add	sp, #132	; 0x84
 8003fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb2:	2340      	movs	r3, #64	; 0x40
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	ac08      	add	r4, sp, #32
 8003fba:	6163      	str	r3, [r4, #20]
 8003fbc:	3320      	adds	r3, #32
 8003fbe:	7663      	strb	r3, [r4, #25]
 8003fc0:	3310      	adds	r3, #16
 8003fc2:	76a3      	strb	r3, [r4, #26]
 8003fc4:	9507      	str	r5, [sp, #28]
 8003fc6:	0035      	movs	r5, r6
 8003fc8:	782b      	ldrb	r3, [r5, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <_svfiprintf_r+0x52>
 8003fce:	2b25      	cmp	r3, #37	; 0x25
 8003fd0:	d147      	bne.n	8004062 <_svfiprintf_r+0xe2>
 8003fd2:	1bab      	subs	r3, r5, r6
 8003fd4:	9305      	str	r3, [sp, #20]
 8003fd6:	42b5      	cmp	r5, r6
 8003fd8:	d00c      	beq.n	8003ff4 <_svfiprintf_r+0x74>
 8003fda:	0032      	movs	r2, r6
 8003fdc:	0039      	movs	r1, r7
 8003fde:	9803      	ldr	r0, [sp, #12]
 8003fe0:	f7ff ff6c 	bl	8003ebc <__ssputs_r>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d100      	bne.n	8003fea <_svfiprintf_r+0x6a>
 8003fe8:	e0ae      	b.n	8004148 <_svfiprintf_r+0x1c8>
 8003fea:	6962      	ldr	r2, [r4, #20]
 8003fec:	9b05      	ldr	r3, [sp, #20]
 8003fee:	4694      	mov	ip, r2
 8003ff0:	4463      	add	r3, ip
 8003ff2:	6163      	str	r3, [r4, #20]
 8003ff4:	782b      	ldrb	r3, [r5, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d100      	bne.n	8003ffc <_svfiprintf_r+0x7c>
 8003ffa:	e0a5      	b.n	8004148 <_svfiprintf_r+0x1c8>
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	2300      	movs	r3, #0
 8004000:	4252      	negs	r2, r2
 8004002:	6062      	str	r2, [r4, #4]
 8004004:	a904      	add	r1, sp, #16
 8004006:	3254      	adds	r2, #84	; 0x54
 8004008:	1852      	adds	r2, r2, r1
 800400a:	1c6e      	adds	r6, r5, #1
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	60e3      	str	r3, [r4, #12]
 8004010:	60a3      	str	r3, [r4, #8]
 8004012:	7013      	strb	r3, [r2, #0]
 8004014:	65a3      	str	r3, [r4, #88]	; 0x58
 8004016:	2205      	movs	r2, #5
 8004018:	7831      	ldrb	r1, [r6, #0]
 800401a:	4854      	ldr	r0, [pc, #336]	; (800416c <_svfiprintf_r+0x1ec>)
 800401c:	f000 fa34 	bl	8004488 <memchr>
 8004020:	1c75      	adds	r5, r6, #1
 8004022:	2800      	cmp	r0, #0
 8004024:	d11f      	bne.n	8004066 <_svfiprintf_r+0xe6>
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	06d3      	lsls	r3, r2, #27
 800402a:	d504      	bpl.n	8004036 <_svfiprintf_r+0xb6>
 800402c:	2353      	movs	r3, #83	; 0x53
 800402e:	a904      	add	r1, sp, #16
 8004030:	185b      	adds	r3, r3, r1
 8004032:	2120      	movs	r1, #32
 8004034:	7019      	strb	r1, [r3, #0]
 8004036:	0713      	lsls	r3, r2, #28
 8004038:	d504      	bpl.n	8004044 <_svfiprintf_r+0xc4>
 800403a:	2353      	movs	r3, #83	; 0x53
 800403c:	a904      	add	r1, sp, #16
 800403e:	185b      	adds	r3, r3, r1
 8004040:	212b      	movs	r1, #43	; 0x2b
 8004042:	7019      	strb	r1, [r3, #0]
 8004044:	7833      	ldrb	r3, [r6, #0]
 8004046:	2b2a      	cmp	r3, #42	; 0x2a
 8004048:	d016      	beq.n	8004078 <_svfiprintf_r+0xf8>
 800404a:	0035      	movs	r5, r6
 800404c:	2100      	movs	r1, #0
 800404e:	200a      	movs	r0, #10
 8004050:	68e3      	ldr	r3, [r4, #12]
 8004052:	782a      	ldrb	r2, [r5, #0]
 8004054:	1c6e      	adds	r6, r5, #1
 8004056:	3a30      	subs	r2, #48	; 0x30
 8004058:	2a09      	cmp	r2, #9
 800405a:	d94e      	bls.n	80040fa <_svfiprintf_r+0x17a>
 800405c:	2900      	cmp	r1, #0
 800405e:	d111      	bne.n	8004084 <_svfiprintf_r+0x104>
 8004060:	e017      	b.n	8004092 <_svfiprintf_r+0x112>
 8004062:	3501      	adds	r5, #1
 8004064:	e7b0      	b.n	8003fc8 <_svfiprintf_r+0x48>
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <_svfiprintf_r+0x1ec>)
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	1ac0      	subs	r0, r0, r3
 800406c:	2301      	movs	r3, #1
 800406e:	4083      	lsls	r3, r0
 8004070:	4313      	orrs	r3, r2
 8004072:	002e      	movs	r6, r5
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	e7ce      	b.n	8004016 <_svfiprintf_r+0x96>
 8004078:	9b07      	ldr	r3, [sp, #28]
 800407a:	1d19      	adds	r1, r3, #4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	9107      	str	r1, [sp, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	db01      	blt.n	8004088 <_svfiprintf_r+0x108>
 8004084:	930b      	str	r3, [sp, #44]	; 0x2c
 8004086:	e004      	b.n	8004092 <_svfiprintf_r+0x112>
 8004088:	425b      	negs	r3, r3
 800408a:	60e3      	str	r3, [r4, #12]
 800408c:	2302      	movs	r3, #2
 800408e:	4313      	orrs	r3, r2
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	782b      	ldrb	r3, [r5, #0]
 8004094:	2b2e      	cmp	r3, #46	; 0x2e
 8004096:	d10a      	bne.n	80040ae <_svfiprintf_r+0x12e>
 8004098:	786b      	ldrb	r3, [r5, #1]
 800409a:	2b2a      	cmp	r3, #42	; 0x2a
 800409c:	d135      	bne.n	800410a <_svfiprintf_r+0x18a>
 800409e:	9b07      	ldr	r3, [sp, #28]
 80040a0:	3502      	adds	r5, #2
 80040a2:	1d1a      	adds	r2, r3, #4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	9207      	str	r2, [sp, #28]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	db2b      	blt.n	8004104 <_svfiprintf_r+0x184>
 80040ac:	9309      	str	r3, [sp, #36]	; 0x24
 80040ae:	4e30      	ldr	r6, [pc, #192]	; (8004170 <_svfiprintf_r+0x1f0>)
 80040b0:	2203      	movs	r2, #3
 80040b2:	0030      	movs	r0, r6
 80040b4:	7829      	ldrb	r1, [r5, #0]
 80040b6:	f000 f9e7 	bl	8004488 <memchr>
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d006      	beq.n	80040cc <_svfiprintf_r+0x14c>
 80040be:	2340      	movs	r3, #64	; 0x40
 80040c0:	1b80      	subs	r0, r0, r6
 80040c2:	4083      	lsls	r3, r0
 80040c4:	6822      	ldr	r2, [r4, #0]
 80040c6:	3501      	adds	r5, #1
 80040c8:	4313      	orrs	r3, r2
 80040ca:	6023      	str	r3, [r4, #0]
 80040cc:	7829      	ldrb	r1, [r5, #0]
 80040ce:	2206      	movs	r2, #6
 80040d0:	4828      	ldr	r0, [pc, #160]	; (8004174 <_svfiprintf_r+0x1f4>)
 80040d2:	1c6e      	adds	r6, r5, #1
 80040d4:	7621      	strb	r1, [r4, #24]
 80040d6:	f000 f9d7 	bl	8004488 <memchr>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d03c      	beq.n	8004158 <_svfiprintf_r+0x1d8>
 80040de:	4b26      	ldr	r3, [pc, #152]	; (8004178 <_svfiprintf_r+0x1f8>)
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d125      	bne.n	8004130 <_svfiprintf_r+0x1b0>
 80040e4:	2207      	movs	r2, #7
 80040e6:	9b07      	ldr	r3, [sp, #28]
 80040e8:	3307      	adds	r3, #7
 80040ea:	4393      	bics	r3, r2
 80040ec:	3308      	adds	r3, #8
 80040ee:	9307      	str	r3, [sp, #28]
 80040f0:	6963      	ldr	r3, [r4, #20]
 80040f2:	9a04      	ldr	r2, [sp, #16]
 80040f4:	189b      	adds	r3, r3, r2
 80040f6:	6163      	str	r3, [r4, #20]
 80040f8:	e765      	b.n	8003fc6 <_svfiprintf_r+0x46>
 80040fa:	4343      	muls	r3, r0
 80040fc:	0035      	movs	r5, r6
 80040fe:	2101      	movs	r1, #1
 8004100:	189b      	adds	r3, r3, r2
 8004102:	e7a6      	b.n	8004052 <_svfiprintf_r+0xd2>
 8004104:	2301      	movs	r3, #1
 8004106:	425b      	negs	r3, r3
 8004108:	e7d0      	b.n	80040ac <_svfiprintf_r+0x12c>
 800410a:	2300      	movs	r3, #0
 800410c:	200a      	movs	r0, #10
 800410e:	001a      	movs	r2, r3
 8004110:	3501      	adds	r5, #1
 8004112:	6063      	str	r3, [r4, #4]
 8004114:	7829      	ldrb	r1, [r5, #0]
 8004116:	1c6e      	adds	r6, r5, #1
 8004118:	3930      	subs	r1, #48	; 0x30
 800411a:	2909      	cmp	r1, #9
 800411c:	d903      	bls.n	8004126 <_svfiprintf_r+0x1a6>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0c5      	beq.n	80040ae <_svfiprintf_r+0x12e>
 8004122:	9209      	str	r2, [sp, #36]	; 0x24
 8004124:	e7c3      	b.n	80040ae <_svfiprintf_r+0x12e>
 8004126:	4342      	muls	r2, r0
 8004128:	0035      	movs	r5, r6
 800412a:	2301      	movs	r3, #1
 800412c:	1852      	adds	r2, r2, r1
 800412e:	e7f1      	b.n	8004114 <_svfiprintf_r+0x194>
 8004130:	ab07      	add	r3, sp, #28
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	003a      	movs	r2, r7
 8004136:	0021      	movs	r1, r4
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <_svfiprintf_r+0x1fc>)
 800413a:	9803      	ldr	r0, [sp, #12]
 800413c:	e000      	b.n	8004140 <_svfiprintf_r+0x1c0>
 800413e:	bf00      	nop
 8004140:	9004      	str	r0, [sp, #16]
 8004142:	9b04      	ldr	r3, [sp, #16]
 8004144:	3301      	adds	r3, #1
 8004146:	d1d3      	bne.n	80040f0 <_svfiprintf_r+0x170>
 8004148:	89bb      	ldrh	r3, [r7, #12]
 800414a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800414c:	065b      	lsls	r3, r3, #25
 800414e:	d400      	bmi.n	8004152 <_svfiprintf_r+0x1d2>
 8004150:	e72d      	b.n	8003fae <_svfiprintf_r+0x2e>
 8004152:	2001      	movs	r0, #1
 8004154:	4240      	negs	r0, r0
 8004156:	e72a      	b.n	8003fae <_svfiprintf_r+0x2e>
 8004158:	ab07      	add	r3, sp, #28
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	003a      	movs	r2, r7
 800415e:	0021      	movs	r1, r4
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <_svfiprintf_r+0x1fc>)
 8004162:	9803      	ldr	r0, [sp, #12]
 8004164:	f000 f87c 	bl	8004260 <_printf_i>
 8004168:	e7ea      	b.n	8004140 <_svfiprintf_r+0x1c0>
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	08004620 	.word	0x08004620
 8004170:	08004626 	.word	0x08004626
 8004174:	0800462a 	.word	0x0800462a
 8004178:	00000000 	.word	0x00000000
 800417c:	08003ebd 	.word	0x08003ebd

08004180 <_printf_common>:
 8004180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004182:	0015      	movs	r5, r2
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	688a      	ldr	r2, [r1, #8]
 8004188:	690b      	ldr	r3, [r1, #16]
 800418a:	000c      	movs	r4, r1
 800418c:	9000      	str	r0, [sp, #0]
 800418e:	4293      	cmp	r3, r2
 8004190:	da00      	bge.n	8004194 <_printf_common+0x14>
 8004192:	0013      	movs	r3, r2
 8004194:	0022      	movs	r2, r4
 8004196:	602b      	str	r3, [r5, #0]
 8004198:	3243      	adds	r2, #67	; 0x43
 800419a:	7812      	ldrb	r2, [r2, #0]
 800419c:	2a00      	cmp	r2, #0
 800419e:	d001      	beq.n	80041a4 <_printf_common+0x24>
 80041a0:	3301      	adds	r3, #1
 80041a2:	602b      	str	r3, [r5, #0]
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	069b      	lsls	r3, r3, #26
 80041a8:	d502      	bpl.n	80041b0 <_printf_common+0x30>
 80041aa:	682b      	ldr	r3, [r5, #0]
 80041ac:	3302      	adds	r3, #2
 80041ae:	602b      	str	r3, [r5, #0]
 80041b0:	6822      	ldr	r2, [r4, #0]
 80041b2:	2306      	movs	r3, #6
 80041b4:	0017      	movs	r7, r2
 80041b6:	401f      	ands	r7, r3
 80041b8:	421a      	tst	r2, r3
 80041ba:	d027      	beq.n	800420c <_printf_common+0x8c>
 80041bc:	0023      	movs	r3, r4
 80041be:	3343      	adds	r3, #67	; 0x43
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	1e5a      	subs	r2, r3, #1
 80041c4:	4193      	sbcs	r3, r2
 80041c6:	6822      	ldr	r2, [r4, #0]
 80041c8:	0692      	lsls	r2, r2, #26
 80041ca:	d430      	bmi.n	800422e <_printf_common+0xae>
 80041cc:	0022      	movs	r2, r4
 80041ce:	9901      	ldr	r1, [sp, #4]
 80041d0:	9800      	ldr	r0, [sp, #0]
 80041d2:	9e08      	ldr	r6, [sp, #32]
 80041d4:	3243      	adds	r2, #67	; 0x43
 80041d6:	47b0      	blx	r6
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d025      	beq.n	8004228 <_printf_common+0xa8>
 80041dc:	2306      	movs	r3, #6
 80041de:	6820      	ldr	r0, [r4, #0]
 80041e0:	682a      	ldr	r2, [r5, #0]
 80041e2:	68e1      	ldr	r1, [r4, #12]
 80041e4:	2500      	movs	r5, #0
 80041e6:	4003      	ands	r3, r0
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d103      	bne.n	80041f4 <_printf_common+0x74>
 80041ec:	1a8d      	subs	r5, r1, r2
 80041ee:	43eb      	mvns	r3, r5
 80041f0:	17db      	asrs	r3, r3, #31
 80041f2:	401d      	ands	r5, r3
 80041f4:	68a3      	ldr	r3, [r4, #8]
 80041f6:	6922      	ldr	r2, [r4, #16]
 80041f8:	4293      	cmp	r3, r2
 80041fa:	dd01      	ble.n	8004200 <_printf_common+0x80>
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	18ed      	adds	r5, r5, r3
 8004200:	2700      	movs	r7, #0
 8004202:	42bd      	cmp	r5, r7
 8004204:	d120      	bne.n	8004248 <_printf_common+0xc8>
 8004206:	2000      	movs	r0, #0
 8004208:	e010      	b.n	800422c <_printf_common+0xac>
 800420a:	3701      	adds	r7, #1
 800420c:	68e3      	ldr	r3, [r4, #12]
 800420e:	682a      	ldr	r2, [r5, #0]
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	42bb      	cmp	r3, r7
 8004214:	ddd2      	ble.n	80041bc <_printf_common+0x3c>
 8004216:	0022      	movs	r2, r4
 8004218:	2301      	movs	r3, #1
 800421a:	9901      	ldr	r1, [sp, #4]
 800421c:	9800      	ldr	r0, [sp, #0]
 800421e:	9e08      	ldr	r6, [sp, #32]
 8004220:	3219      	adds	r2, #25
 8004222:	47b0      	blx	r6
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d1f0      	bne.n	800420a <_printf_common+0x8a>
 8004228:	2001      	movs	r0, #1
 800422a:	4240      	negs	r0, r0
 800422c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800422e:	2030      	movs	r0, #48	; 0x30
 8004230:	18e1      	adds	r1, r4, r3
 8004232:	3143      	adds	r1, #67	; 0x43
 8004234:	7008      	strb	r0, [r1, #0]
 8004236:	0021      	movs	r1, r4
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	3145      	adds	r1, #69	; 0x45
 800423c:	7809      	ldrb	r1, [r1, #0]
 800423e:	18a2      	adds	r2, r4, r2
 8004240:	3243      	adds	r2, #67	; 0x43
 8004242:	3302      	adds	r3, #2
 8004244:	7011      	strb	r1, [r2, #0]
 8004246:	e7c1      	b.n	80041cc <_printf_common+0x4c>
 8004248:	0022      	movs	r2, r4
 800424a:	2301      	movs	r3, #1
 800424c:	9901      	ldr	r1, [sp, #4]
 800424e:	9800      	ldr	r0, [sp, #0]
 8004250:	9e08      	ldr	r6, [sp, #32]
 8004252:	321a      	adds	r2, #26
 8004254:	47b0      	blx	r6
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	d0e6      	beq.n	8004228 <_printf_common+0xa8>
 800425a:	3701      	adds	r7, #1
 800425c:	e7d1      	b.n	8004202 <_printf_common+0x82>
	...

08004260 <_printf_i>:
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	b08b      	sub	sp, #44	; 0x2c
 8004264:	9206      	str	r2, [sp, #24]
 8004266:	000a      	movs	r2, r1
 8004268:	3243      	adds	r2, #67	; 0x43
 800426a:	9307      	str	r3, [sp, #28]
 800426c:	9005      	str	r0, [sp, #20]
 800426e:	9204      	str	r2, [sp, #16]
 8004270:	7e0a      	ldrb	r2, [r1, #24]
 8004272:	000c      	movs	r4, r1
 8004274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004276:	2a78      	cmp	r2, #120	; 0x78
 8004278:	d807      	bhi.n	800428a <_printf_i+0x2a>
 800427a:	2a62      	cmp	r2, #98	; 0x62
 800427c:	d809      	bhi.n	8004292 <_printf_i+0x32>
 800427e:	2a00      	cmp	r2, #0
 8004280:	d100      	bne.n	8004284 <_printf_i+0x24>
 8004282:	e0c1      	b.n	8004408 <_printf_i+0x1a8>
 8004284:	2a58      	cmp	r2, #88	; 0x58
 8004286:	d100      	bne.n	800428a <_printf_i+0x2a>
 8004288:	e08c      	b.n	80043a4 <_printf_i+0x144>
 800428a:	0026      	movs	r6, r4
 800428c:	3642      	adds	r6, #66	; 0x42
 800428e:	7032      	strb	r2, [r6, #0]
 8004290:	e022      	b.n	80042d8 <_printf_i+0x78>
 8004292:	0010      	movs	r0, r2
 8004294:	3863      	subs	r0, #99	; 0x63
 8004296:	2815      	cmp	r0, #21
 8004298:	d8f7      	bhi.n	800428a <_printf_i+0x2a>
 800429a:	f7fb ff3b 	bl	8000114 <__gnu_thumb1_case_shi>
 800429e:	0016      	.short	0x0016
 80042a0:	fff6001f 	.word	0xfff6001f
 80042a4:	fff6fff6 	.word	0xfff6fff6
 80042a8:	001ffff6 	.word	0x001ffff6
 80042ac:	fff6fff6 	.word	0xfff6fff6
 80042b0:	fff6fff6 	.word	0xfff6fff6
 80042b4:	003600a8 	.word	0x003600a8
 80042b8:	fff6009a 	.word	0xfff6009a
 80042bc:	00b9fff6 	.word	0x00b9fff6
 80042c0:	0036fff6 	.word	0x0036fff6
 80042c4:	fff6fff6 	.word	0xfff6fff6
 80042c8:	009e      	.short	0x009e
 80042ca:	0026      	movs	r6, r4
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	3642      	adds	r6, #66	; 0x42
 80042d0:	1d11      	adds	r1, r2, #4
 80042d2:	6019      	str	r1, [r3, #0]
 80042d4:	6813      	ldr	r3, [r2, #0]
 80042d6:	7033      	strb	r3, [r6, #0]
 80042d8:	2301      	movs	r3, #1
 80042da:	e0a7      	b.n	800442c <_printf_i+0x1cc>
 80042dc:	6808      	ldr	r0, [r1, #0]
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	1d0a      	adds	r2, r1, #4
 80042e2:	0605      	lsls	r5, r0, #24
 80042e4:	d50b      	bpl.n	80042fe <_printf_i+0x9e>
 80042e6:	680d      	ldr	r5, [r1, #0]
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	da03      	bge.n	80042f6 <_printf_i+0x96>
 80042ee:	232d      	movs	r3, #45	; 0x2d
 80042f0:	9a04      	ldr	r2, [sp, #16]
 80042f2:	426d      	negs	r5, r5
 80042f4:	7013      	strb	r3, [r2, #0]
 80042f6:	4b61      	ldr	r3, [pc, #388]	; (800447c <_printf_i+0x21c>)
 80042f8:	270a      	movs	r7, #10
 80042fa:	9303      	str	r3, [sp, #12]
 80042fc:	e01b      	b.n	8004336 <_printf_i+0xd6>
 80042fe:	680d      	ldr	r5, [r1, #0]
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	0641      	lsls	r1, r0, #25
 8004304:	d5f1      	bpl.n	80042ea <_printf_i+0x8a>
 8004306:	b22d      	sxth	r5, r5
 8004308:	e7ef      	b.n	80042ea <_printf_i+0x8a>
 800430a:	680d      	ldr	r5, [r1, #0]
 800430c:	6819      	ldr	r1, [r3, #0]
 800430e:	1d08      	adds	r0, r1, #4
 8004310:	6018      	str	r0, [r3, #0]
 8004312:	062e      	lsls	r6, r5, #24
 8004314:	d501      	bpl.n	800431a <_printf_i+0xba>
 8004316:	680d      	ldr	r5, [r1, #0]
 8004318:	e003      	b.n	8004322 <_printf_i+0xc2>
 800431a:	066d      	lsls	r5, r5, #25
 800431c:	d5fb      	bpl.n	8004316 <_printf_i+0xb6>
 800431e:	680d      	ldr	r5, [r1, #0]
 8004320:	b2ad      	uxth	r5, r5
 8004322:	4b56      	ldr	r3, [pc, #344]	; (800447c <_printf_i+0x21c>)
 8004324:	2708      	movs	r7, #8
 8004326:	9303      	str	r3, [sp, #12]
 8004328:	2a6f      	cmp	r2, #111	; 0x6f
 800432a:	d000      	beq.n	800432e <_printf_i+0xce>
 800432c:	3702      	adds	r7, #2
 800432e:	0023      	movs	r3, r4
 8004330:	2200      	movs	r2, #0
 8004332:	3343      	adds	r3, #67	; 0x43
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	6863      	ldr	r3, [r4, #4]
 8004338:	60a3      	str	r3, [r4, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	db03      	blt.n	8004346 <_printf_i+0xe6>
 800433e:	2204      	movs	r2, #4
 8004340:	6821      	ldr	r1, [r4, #0]
 8004342:	4391      	bics	r1, r2
 8004344:	6021      	str	r1, [r4, #0]
 8004346:	2d00      	cmp	r5, #0
 8004348:	d102      	bne.n	8004350 <_printf_i+0xf0>
 800434a:	9e04      	ldr	r6, [sp, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00c      	beq.n	800436a <_printf_i+0x10a>
 8004350:	9e04      	ldr	r6, [sp, #16]
 8004352:	0028      	movs	r0, r5
 8004354:	0039      	movs	r1, r7
 8004356:	f7fb ff6d 	bl	8000234 <__aeabi_uidivmod>
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	3e01      	subs	r6, #1
 800435e:	5c5b      	ldrb	r3, [r3, r1]
 8004360:	7033      	strb	r3, [r6, #0]
 8004362:	002b      	movs	r3, r5
 8004364:	0005      	movs	r5, r0
 8004366:	429f      	cmp	r7, r3
 8004368:	d9f3      	bls.n	8004352 <_printf_i+0xf2>
 800436a:	2f08      	cmp	r7, #8
 800436c:	d109      	bne.n	8004382 <_printf_i+0x122>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	07db      	lsls	r3, r3, #31
 8004372:	d506      	bpl.n	8004382 <_printf_i+0x122>
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	6922      	ldr	r2, [r4, #16]
 8004378:	4293      	cmp	r3, r2
 800437a:	dc02      	bgt.n	8004382 <_printf_i+0x122>
 800437c:	2330      	movs	r3, #48	; 0x30
 800437e:	3e01      	subs	r6, #1
 8004380:	7033      	strb	r3, [r6, #0]
 8004382:	9b04      	ldr	r3, [sp, #16]
 8004384:	1b9b      	subs	r3, r3, r6
 8004386:	6123      	str	r3, [r4, #16]
 8004388:	9b07      	ldr	r3, [sp, #28]
 800438a:	0021      	movs	r1, r4
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	9805      	ldr	r0, [sp, #20]
 8004390:	9b06      	ldr	r3, [sp, #24]
 8004392:	aa09      	add	r2, sp, #36	; 0x24
 8004394:	f7ff fef4 	bl	8004180 <_printf_common>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d14c      	bne.n	8004436 <_printf_i+0x1d6>
 800439c:	2001      	movs	r0, #1
 800439e:	4240      	negs	r0, r0
 80043a0:	b00b      	add	sp, #44	; 0x2c
 80043a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a4:	3145      	adds	r1, #69	; 0x45
 80043a6:	700a      	strb	r2, [r1, #0]
 80043a8:	4a34      	ldr	r2, [pc, #208]	; (800447c <_printf_i+0x21c>)
 80043aa:	9203      	str	r2, [sp, #12]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	6821      	ldr	r1, [r4, #0]
 80043b0:	ca20      	ldmia	r2!, {r5}
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	0608      	lsls	r0, r1, #24
 80043b6:	d516      	bpl.n	80043e6 <_printf_i+0x186>
 80043b8:	07cb      	lsls	r3, r1, #31
 80043ba:	d502      	bpl.n	80043c2 <_printf_i+0x162>
 80043bc:	2320      	movs	r3, #32
 80043be:	4319      	orrs	r1, r3
 80043c0:	6021      	str	r1, [r4, #0]
 80043c2:	2710      	movs	r7, #16
 80043c4:	2d00      	cmp	r5, #0
 80043c6:	d1b2      	bne.n	800432e <_printf_i+0xce>
 80043c8:	2320      	movs	r3, #32
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	439a      	bics	r2, r3
 80043ce:	6022      	str	r2, [r4, #0]
 80043d0:	e7ad      	b.n	800432e <_printf_i+0xce>
 80043d2:	2220      	movs	r2, #32
 80043d4:	6809      	ldr	r1, [r1, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	6022      	str	r2, [r4, #0]
 80043da:	0022      	movs	r2, r4
 80043dc:	2178      	movs	r1, #120	; 0x78
 80043de:	3245      	adds	r2, #69	; 0x45
 80043e0:	7011      	strb	r1, [r2, #0]
 80043e2:	4a27      	ldr	r2, [pc, #156]	; (8004480 <_printf_i+0x220>)
 80043e4:	e7e1      	b.n	80043aa <_printf_i+0x14a>
 80043e6:	0648      	lsls	r0, r1, #25
 80043e8:	d5e6      	bpl.n	80043b8 <_printf_i+0x158>
 80043ea:	b2ad      	uxth	r5, r5
 80043ec:	e7e4      	b.n	80043b8 <_printf_i+0x158>
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	680d      	ldr	r5, [r1, #0]
 80043f2:	1d10      	adds	r0, r2, #4
 80043f4:	6949      	ldr	r1, [r1, #20]
 80043f6:	6018      	str	r0, [r3, #0]
 80043f8:	6813      	ldr	r3, [r2, #0]
 80043fa:	062e      	lsls	r6, r5, #24
 80043fc:	d501      	bpl.n	8004402 <_printf_i+0x1a2>
 80043fe:	6019      	str	r1, [r3, #0]
 8004400:	e002      	b.n	8004408 <_printf_i+0x1a8>
 8004402:	066d      	lsls	r5, r5, #25
 8004404:	d5fb      	bpl.n	80043fe <_printf_i+0x19e>
 8004406:	8019      	strh	r1, [r3, #0]
 8004408:	2300      	movs	r3, #0
 800440a:	9e04      	ldr	r6, [sp, #16]
 800440c:	6123      	str	r3, [r4, #16]
 800440e:	e7bb      	b.n	8004388 <_printf_i+0x128>
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	1d11      	adds	r1, r2, #4
 8004414:	6019      	str	r1, [r3, #0]
 8004416:	6816      	ldr	r6, [r2, #0]
 8004418:	2100      	movs	r1, #0
 800441a:	0030      	movs	r0, r6
 800441c:	6862      	ldr	r2, [r4, #4]
 800441e:	f000 f833 	bl	8004488 <memchr>
 8004422:	2800      	cmp	r0, #0
 8004424:	d001      	beq.n	800442a <_printf_i+0x1ca>
 8004426:	1b80      	subs	r0, r0, r6
 8004428:	6060      	str	r0, [r4, #4]
 800442a:	6863      	ldr	r3, [r4, #4]
 800442c:	6123      	str	r3, [r4, #16]
 800442e:	2300      	movs	r3, #0
 8004430:	9a04      	ldr	r2, [sp, #16]
 8004432:	7013      	strb	r3, [r2, #0]
 8004434:	e7a8      	b.n	8004388 <_printf_i+0x128>
 8004436:	6923      	ldr	r3, [r4, #16]
 8004438:	0032      	movs	r2, r6
 800443a:	9906      	ldr	r1, [sp, #24]
 800443c:	9805      	ldr	r0, [sp, #20]
 800443e:	9d07      	ldr	r5, [sp, #28]
 8004440:	47a8      	blx	r5
 8004442:	1c43      	adds	r3, r0, #1
 8004444:	d0aa      	beq.n	800439c <_printf_i+0x13c>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	079b      	lsls	r3, r3, #30
 800444a:	d415      	bmi.n	8004478 <_printf_i+0x218>
 800444c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800444e:	68e0      	ldr	r0, [r4, #12]
 8004450:	4298      	cmp	r0, r3
 8004452:	daa5      	bge.n	80043a0 <_printf_i+0x140>
 8004454:	0018      	movs	r0, r3
 8004456:	e7a3      	b.n	80043a0 <_printf_i+0x140>
 8004458:	0022      	movs	r2, r4
 800445a:	2301      	movs	r3, #1
 800445c:	9906      	ldr	r1, [sp, #24]
 800445e:	9805      	ldr	r0, [sp, #20]
 8004460:	9e07      	ldr	r6, [sp, #28]
 8004462:	3219      	adds	r2, #25
 8004464:	47b0      	blx	r6
 8004466:	1c43      	adds	r3, r0, #1
 8004468:	d098      	beq.n	800439c <_printf_i+0x13c>
 800446a:	3501      	adds	r5, #1
 800446c:	68e3      	ldr	r3, [r4, #12]
 800446e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	42ab      	cmp	r3, r5
 8004474:	dcf0      	bgt.n	8004458 <_printf_i+0x1f8>
 8004476:	e7e9      	b.n	800444c <_printf_i+0x1ec>
 8004478:	2500      	movs	r5, #0
 800447a:	e7f7      	b.n	800446c <_printf_i+0x20c>
 800447c:	08004631 	.word	0x08004631
 8004480:	08004642 	.word	0x08004642

08004484 <__retarget_lock_acquire_recursive>:
 8004484:	4770      	bx	lr

08004486 <__retarget_lock_release_recursive>:
 8004486:	4770      	bx	lr

08004488 <memchr>:
 8004488:	b2c9      	uxtb	r1, r1
 800448a:	1882      	adds	r2, r0, r2
 800448c:	4290      	cmp	r0, r2
 800448e:	d101      	bne.n	8004494 <memchr+0xc>
 8004490:	2000      	movs	r0, #0
 8004492:	4770      	bx	lr
 8004494:	7803      	ldrb	r3, [r0, #0]
 8004496:	428b      	cmp	r3, r1
 8004498:	d0fb      	beq.n	8004492 <memchr+0xa>
 800449a:	3001      	adds	r0, #1
 800449c:	e7f6      	b.n	800448c <memchr+0x4>

0800449e <memcpy>:
 800449e:	2300      	movs	r3, #0
 80044a0:	b510      	push	{r4, lr}
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d100      	bne.n	80044a8 <memcpy+0xa>
 80044a6:	bd10      	pop	{r4, pc}
 80044a8:	5ccc      	ldrb	r4, [r1, r3]
 80044aa:	54c4      	strb	r4, [r0, r3]
 80044ac:	3301      	adds	r3, #1
 80044ae:	e7f8      	b.n	80044a2 <memcpy+0x4>

080044b0 <memmove>:
 80044b0:	b510      	push	{r4, lr}
 80044b2:	4288      	cmp	r0, r1
 80044b4:	d902      	bls.n	80044bc <memmove+0xc>
 80044b6:	188b      	adds	r3, r1, r2
 80044b8:	4298      	cmp	r0, r3
 80044ba:	d303      	bcc.n	80044c4 <memmove+0x14>
 80044bc:	2300      	movs	r3, #0
 80044be:	e007      	b.n	80044d0 <memmove+0x20>
 80044c0:	5c8b      	ldrb	r3, [r1, r2]
 80044c2:	5483      	strb	r3, [r0, r2]
 80044c4:	3a01      	subs	r2, #1
 80044c6:	d2fb      	bcs.n	80044c0 <memmove+0x10>
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	5ccc      	ldrb	r4, [r1, r3]
 80044cc:	54c4      	strb	r4, [r0, r3]
 80044ce:	3301      	adds	r3, #1
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d1fa      	bne.n	80044ca <memmove+0x1a>
 80044d4:	e7f8      	b.n	80044c8 <memmove+0x18>

080044d6 <_realloc_r>:
 80044d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044d8:	0007      	movs	r7, r0
 80044da:	000e      	movs	r6, r1
 80044dc:	0014      	movs	r4, r2
 80044de:	2900      	cmp	r1, #0
 80044e0:	d105      	bne.n	80044ee <_realloc_r+0x18>
 80044e2:	0011      	movs	r1, r2
 80044e4:	f7ff fc20 	bl	8003d28 <_malloc_r>
 80044e8:	0005      	movs	r5, r0
 80044ea:	0028      	movs	r0, r5
 80044ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044ee:	2a00      	cmp	r2, #0
 80044f0:	d103      	bne.n	80044fa <_realloc_r+0x24>
 80044f2:	f7ff fbad 	bl	8003c50 <_free_r>
 80044f6:	0025      	movs	r5, r4
 80044f8:	e7f7      	b.n	80044ea <_realloc_r+0x14>
 80044fa:	f000 f81b 	bl	8004534 <_malloc_usable_size_r>
 80044fe:	9001      	str	r0, [sp, #4]
 8004500:	4284      	cmp	r4, r0
 8004502:	d803      	bhi.n	800450c <_realloc_r+0x36>
 8004504:	0035      	movs	r5, r6
 8004506:	0843      	lsrs	r3, r0, #1
 8004508:	42a3      	cmp	r3, r4
 800450a:	d3ee      	bcc.n	80044ea <_realloc_r+0x14>
 800450c:	0021      	movs	r1, r4
 800450e:	0038      	movs	r0, r7
 8004510:	f7ff fc0a 	bl	8003d28 <_malloc_r>
 8004514:	1e05      	subs	r5, r0, #0
 8004516:	d0e8      	beq.n	80044ea <_realloc_r+0x14>
 8004518:	9b01      	ldr	r3, [sp, #4]
 800451a:	0022      	movs	r2, r4
 800451c:	429c      	cmp	r4, r3
 800451e:	d900      	bls.n	8004522 <_realloc_r+0x4c>
 8004520:	001a      	movs	r2, r3
 8004522:	0031      	movs	r1, r6
 8004524:	0028      	movs	r0, r5
 8004526:	f7ff ffba 	bl	800449e <memcpy>
 800452a:	0031      	movs	r1, r6
 800452c:	0038      	movs	r0, r7
 800452e:	f7ff fb8f 	bl	8003c50 <_free_r>
 8004532:	e7da      	b.n	80044ea <_realloc_r+0x14>

08004534 <_malloc_usable_size_r>:
 8004534:	1f0b      	subs	r3, r1, #4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	1f18      	subs	r0, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	da01      	bge.n	8004542 <_malloc_usable_size_r+0xe>
 800453e:	580b      	ldr	r3, [r1, r0]
 8004540:	18c0      	adds	r0, r0, r3
 8004542:	4770      	bx	lr

08004544 <_init>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr

08004550 <_fini>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr
