
Test_Uart_008_G071RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b0  080046b0  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046b8  080046b8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080046c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000098  08004758  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08004758  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013617  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c1  00000000  00000000  000336d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00035c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00036d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c00  00000000  00000000  00037ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013322  00000000  00000000  000518a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7943  00000000  00000000  00064bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ffc  00000000  00000000  0010c558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000098 	.word	0x20000098
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004598 	.word	0x08004598

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000009c 	.word	0x2000009c
 8000100:	08004598 	.word	0x08004598

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fcfa 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f848 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f9b8 	bl	80009c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f968 	bl	8000924 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000654:	f000 f88e 	bl	8000774 <MX_RTC_Init>
  MX_TIM14_Init();
 8000658:	f000 f8c4 	bl	80007e4 <MX_TIM14_Init>
  MX_TIM16_Init();
 800065c:	f000 f8ea 	bl	8000834 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000660:	f000 f912 	bl	8000888 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_IT ( &htim14 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <main+0x80>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2202      	movs	r2, #2
 800066a:	4252      	negs	r2, r2
 800066c:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_IT ( &htim16 , TIM_IT_UPDATE ) ; // żeby nie generować przerwania TIM6 od razu: https://stackoverflow.com/questions/71099885/why-hal-tim-periodelapsedcallback-gets-called-immediately-after-hal-tim-base-sta
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <main+0x84>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2202      	movs	r2, #2
 8000674:	4252      	negs	r2, r2
 8000676:	611a      	str	r2, [r3, #16]

  uart_status = HAL_UART_Transmit ( &huart2 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <main+0x88>)
 800067a:	0018      	movs	r0, r3
 800067c:	f7ff fd42 	bl	8000104 <strlen>
 8000680:	0003      	movs	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	4910      	ldr	r1, [pc, #64]	; (80006c8 <main+0x88>)
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <main+0x8c>)
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	f002 fbb7 	bl	8002dfc <HAL_UART_Transmit>
 800068e:	0003      	movs	r3, r0
 8000690:	001a      	movs	r2, r3
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <main+0x90>)
 8000694:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_UART_CLEAR_OREFLAG ( &huart2 ) ;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <main+0x8c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2208      	movs	r2, #8
 800069c:	621a      	str	r2, [r3, #32]
	  __HAL_UART_CLEAR_IDLEFLAG ( &huart2 ) ;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <main+0x8c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2210      	movs	r2, #16
 80006a4:	621a      	str	r2, [r3, #32]
	  send2uart ( &huart2 , gn_mostrecent_at_comm , gn_mostrecent_answer ) ;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <main+0x94>)
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <main+0x98>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <main+0x8c>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 f9d5 	bl	8000a60 <send2uart>
	  //__HAL_UART_CLEAR_OREFLAG ( &huart2 ) ;
	  //__HAL_UART_CLEAR_IDLEFLAG ( &huart2 ) ;
	  wait_for_tim16x ( 1 ) ;
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 fa64 	bl	8000b84 <wait_for_tim16x>
	  __HAL_UART_CLEAR_OREFLAG ( &huart2 ) ;
 80006bc:	e7eb      	b.n	8000696 <main+0x56>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	200000e0 	.word	0x200000e0
 80006c4:	2000012c 	.word	0x2000012c
 80006c8:	20000000 	.word	0x20000000
 80006cc:	2000020c 	.word	0x2000020c
 80006d0:	200002a2 	.word	0x200002a2
 80006d4:	20000020 	.word	0x20000020
 80006d8:	20000024 	.word	0x20000024

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b093      	sub	sp, #76	; 0x4c
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	2410      	movs	r4, #16
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2338      	movs	r3, #56	; 0x38
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f003 facf 	bl	8003c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	2310      	movs	r3, #16
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f003 fac8 	bl	8003c90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	0018      	movs	r0, r3
 8000706:	f000 ff7f 	bl	8001608 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	220a      	movs	r2, #10
 800070e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	0052      	lsls	r2, r2, #1
 8000716:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000718:	0021      	movs	r1, r4
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2240      	movs	r2, #64	; 0x40
 8000724:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2201      	movs	r2, #1
 800072a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	187b      	adds	r3, r7, r1
 8000734:	0018      	movs	r0, r3
 8000736:	f000 ffb3 	bl	80016a0 <HAL_RCC_OscConfig>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800073e:	f000 fa7b 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	003b      	movs	r3, r7
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	003b      	movs	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	003b      	movs	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000754:	003b      	movs	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075a:	003b      	movs	r3, r7
 800075c:	2100      	movs	r1, #0
 800075e:	0018      	movs	r0, r3
 8000760:	f001 fab8 	bl	8001cd4 <HAL_RCC_ClockConfig>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000768:	f000 fa66 	bl	8000c38 <Error_Handler>
  }
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b013      	add	sp, #76	; 0x4c
 8000772:	bd90      	pop	{r4, r7, pc}

08000774 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_RTC_Init+0x68>)
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <MX_RTC_Init+0x6c>)
 800077c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_RTC_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_RTC_Init+0x68>)
 8000786:	227f      	movs	r2, #127	; 0x7f
 8000788:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_RTC_Init+0x68>)
 800078c:	22ff      	movs	r2, #255	; 0xff
 800078e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_RTC_Init+0x68>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_RTC_Init+0x68>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_RTC_Init+0x68>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_RTC_Init+0x68>)
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	05d2      	lsls	r2, r2, #23
 80007a8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_RTC_Init+0x68>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_RTC_Init+0x68>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fdf0 	bl	8002398 <HAL_RTC_Init>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 fa3c 	bl	8000c38 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 30, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_RTC_Init+0x68>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	211e      	movs	r1, #30
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 ff36 	bl	8002638 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80007d0:	f000 fa32 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	200000b4 	.word	0x200000b4
 80007e0:	40002800 	.word	0x40002800

080007e4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_TIM14_Init+0x40>)
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_TIM14_Init+0x44>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_TIM14_Init+0x40>)
 80007f0:	4a0e      	ldr	r2, [pc, #56]	; (800082c <MX_TIM14_Init+0x48>)
 80007f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_TIM14_Init+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_TIM14_Init+0x40>)
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <MX_TIM14_Init+0x4c>)
 80007fe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_TIM14_Init+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_TIM14_Init+0x40>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <MX_TIM14_Init+0x40>)
 800080e:	0018      	movs	r0, r3
 8000810:	f001 ffd2 	bl	80027b8 <HAL_TIM_Base_Init>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000818:	f000 fa0e 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	200000e0 	.word	0x200000e0
 8000828:	40002000 	.word	0x40002000
 800082c:	00003e7f 	.word	0x00003e7f
 8000830:	000003e7 	.word	0x000003e7

08000834 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_TIM16_Init+0x44>)
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <MX_TIM16_Init+0x48>)
 800083c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_TIM16_Init+0x44>)
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <MX_TIM16_Init+0x4c>)
 8000842:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_TIM16_Init+0x44>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_TIM16_Init+0x44>)
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <MX_TIM16_Init+0x50>)
 800084e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_TIM16_Init+0x44>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_TIM16_Init+0x44>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_TIM16_Init+0x44>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MX_TIM16_Init+0x44>)
 8000864:	0018      	movs	r0, r3
 8000866:	f001 ffa7 	bl	80027b8 <HAL_TIM_Base_Init>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800086e:	f000 f9e3 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000012c 	.word	0x2000012c
 800087c:	40014400 	.word	0x40014400
 8000880:	00003e7f 	.word	0x00003e7f
 8000884:	0000270f 	.word	0x0000270f

08000888 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <MX_USART1_UART_Init+0x94>)
 800088e:	4a24      	ldr	r2, [pc, #144]	; (8000920 <MX_USART1_UART_Init+0x98>)
 8000890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <MX_USART1_UART_Init+0x94>)
 8000894:	22e1      	movs	r2, #225	; 0xe1
 8000896:	0252      	lsls	r2, r2, #9
 8000898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_USART1_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f002 fa3c 	bl	8002d50 <HAL_UART_Init>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f9ac 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	0018      	movs	r0, r3
 80008e6:	f003 f8c9 	bl	8003a7c <HAL_UARTEx_SetTxFifoThreshold>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 f9a3 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_USART1_UART_Init+0x94>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	0018      	movs	r0, r3
 80008f8:	f003 f900 	bl	8003afc <HAL_UARTEx_SetRxFifoThreshold>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 f99a 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <MX_USART1_UART_Init+0x94>)
 8000906:	0018      	movs	r0, r3
 8000908:	f003 f87e 	bl	8003a08 <HAL_UARTEx_DisableFifoMode>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f992 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	20000178 	.word	0x20000178
 8000920:	40013800 	.word	0x40013800

08000924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 800092a:	4a24      	ldr	r2, [pc, #144]	; (80009bc <MX_USART2_UART_Init+0x98>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092e:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 8000930:	22e1      	movs	r2, #225	; 0xe1
 8000932:	0252      	lsls	r2, r2, #9
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 800096e:	0018      	movs	r0, r3
 8000970:	f002 f9ee 	bl	8002d50 <HAL_UART_Init>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000978:	f000 f95e 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 800097e:	2100      	movs	r1, #0
 8000980:	0018      	movs	r0, r3
 8000982:	f003 f87b 	bl	8003a7c <HAL_UARTEx_SetTxFifoThreshold>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800098a:	f000 f955 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 8000990:	2100      	movs	r1, #0
 8000992:	0018      	movs	r0, r3
 8000994:	f003 f8b2 	bl	8003afc <HAL_UARTEx_SetRxFifoThreshold>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800099c:	f000 f94c 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x94>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f003 f830 	bl	8003a08 <HAL_UARTEx_DisableFifoMode>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009ac:	f000 f944 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	2000020c 	.word	0x2000020c
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b089      	sub	sp, #36	; 0x24
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	240c      	movs	r4, #12
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	0018      	movs	r0, r3
 80009cc:	2314      	movs	r3, #20
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f003 f95d 	bl	8003c90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_GPIO_Init+0x9c>)
 80009d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <MX_GPIO_Init+0x9c>)
 80009dc:	2104      	movs	r1, #4
 80009de:	430a      	orrs	r2, r1
 80009e0:	635a      	str	r2, [r3, #52]	; 0x34
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_GPIO_Init+0x9c>)
 80009e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e6:	2204      	movs	r2, #4
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_GPIO_Init+0x9c>)
 80009f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_GPIO_Init+0x9c>)
 80009f4:	2120      	movs	r1, #32
 80009f6:	430a      	orrs	r2, r1
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_GPIO_Init+0x9c>)
 80009fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fe:	2220      	movs	r2, #32
 8000a00:	4013      	ands	r3, r2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_GPIO_Init+0x9c>)
 8000a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_GPIO_Init+0x9c>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	635a      	str	r2, [r3, #52]	; 0x34
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_GPIO_Init+0x9c>)
 8000a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a16:	2201      	movs	r2, #1
 8000a18:	4013      	ands	r3, r2
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000a1e:	23a0      	movs	r3, #160	; 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fdd0 	bl	80015cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000a2c:	0021      	movs	r1, r4
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2220      	movs	r2, #32
 8000a32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2201      	movs	r2, #1
 8000a38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2202      	movs	r2, #2
 8000a44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a46:	187a      	adds	r2, r7, r1
 8000a48:	23a0      	movs	r3, #160	; 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fc58 	bl	8001304 <HAL_GPIO_Init>

}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b009      	add	sp, #36	; 0x24
 8000a5a:	bd90      	pop	{r4, r7, pc}
 8000a5c:	40021000 	.word	0x40021000

08000a60 <send2uart>:

/* USER CODE BEGIN 4 */

void send2uart ( UART_HandleTypeDef* huart , const char* at_command , const char* answer )
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
	sprintf ( (char*) tx_buff , "%s" , at_command ) ;
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	493d      	ldr	r1, [pc, #244]	; (8000b64 <send2uart+0x104>)
 8000a70:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <send2uart+0x108>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f003 f914 	bl	8003ca0 <siprintf>
	uart_status = HAL_UART_Transmit ( huart , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 8000a78:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <send2uart+0x108>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fb42 	bl	8000104 <strlen>
 8000a80:	0003      	movs	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4938      	ldr	r1, [pc, #224]	; (8000b68 <send2uart+0x108>)
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	f002 f9b7 	bl	8002dfc <HAL_UART_Transmit>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	001a      	movs	r2, r3
 8000a92:	4b36      	ldr	r3, [pc, #216]	; (8000b6c <send2uart+0x10c>)
 8000a94:	701a      	strb	r2, [r3, #0]
	tx_buff[0] = 0 ;
 8000a96:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <send2uart+0x108>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
	uart_status = HAL_UART_Receive ( huart , rx_buff , sizeof ( rx_buff ) , UART_RX_TIMEOUT ) ;
 8000a9c:	4934      	ldr	r1, [pc, #208]	; (8000b70 <send2uart+0x110>)
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	2364      	movs	r3, #100	; 0x64
 8000aa2:	22c8      	movs	r2, #200	; 0xc8
 8000aa4:	f002 fa46 	bl	8002f34 <HAL_UART_Receive>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	001a      	movs	r2, r3
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <send2uart+0x10c>)
 8000aae:	701a      	strb	r2, [r3, #0]
	//uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , UART_RX_TIMEOUT ) ;
	tim16_on = 1 ;
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <send2uart+0x114>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000ab6:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <send2uart+0x118>)
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f001 fed5 	bl	8002868 <HAL_TIM_Base_Start_IT>
	while ( tim16_on )
 8000abe:	e02e      	b.n	8000b1e <send2uart+0xbe>
	{
		if ( strncmp ( (char*) rx_buff , answer , strlen ( answer ) ) == 0 )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fb1e 	bl	8000104 <strlen>
 8000ac8:	0002      	movs	r2, r0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <send2uart+0x110>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f003 f906 	bl	8003ce0 <strncmp>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d118      	bne.n	8000b0a <send2uart+0xaa>
		{
			sprintf ( (char*) tx_buff , "Yes. %s" , rx_buff ) ;
 8000ad8:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <send2uart+0x110>)
 8000ada:	4928      	ldr	r1, [pc, #160]	; (8000b7c <send2uart+0x11c>)
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <send2uart+0x108>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f003 f8de 	bl	8003ca0 <siprintf>
			uart_status = HAL_UART_Transmit ( huart , (const uint8_t *) tx_buff ,  strlen ( (char*) rx_buff ) , UART_TX_TIMEOUT ) ;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <send2uart+0x110>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f7ff fb0c 	bl	8000104 <strlen>
 8000aec:	0003      	movs	r3, r0
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	491d      	ldr	r1, [pc, #116]	; (8000b68 <send2uart+0x108>)
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	2364      	movs	r3, #100	; 0x64
 8000af6:	f002 f981 	bl	8002dfc <HAL_UART_Transmit>
 8000afa:	0003      	movs	r3, r0
 8000afc:	001a      	movs	r2, r3
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <send2uart+0x10c>)
 8000b00:	701a      	strb	r2, [r3, #0]
			tx_buff[0] = 0 ;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <send2uart+0x108>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
			break ;
 8000b08:	e00d      	b.n	8000b26 <send2uart+0xc6>
		}
		uart_status = HAL_UART_Receive ( huart , rx_buff , sizeof ( rx_buff ) , UART_RX_TIMEOUT ) ;
 8000b0a:	4919      	ldr	r1, [pc, #100]	; (8000b70 <send2uart+0x110>)
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	22c8      	movs	r2, #200	; 0xc8
 8000b12:	f002 fa0f 	bl	8002f34 <HAL_UART_Receive>
 8000b16:	0003      	movs	r3, r0
 8000b18:	001a      	movs	r2, r3
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <send2uart+0x10c>)
 8000b1c:	701a      	strb	r2, [r3, #0]
	while ( tim16_on )
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <send2uart+0x114>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1cc      	bne.n	8000ac0 <send2uart+0x60>
		//uart_status = HAL_UARTEx_ReceiveToIdle ( &huart1 , rx_buff , sizeof ( rx_buff ) , &rx_len , UART_RX_TIMEOUT ) ;
	}
	sprintf ( (char*) tx_buff , "No. %s" , rx_buff ) ;
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <send2uart+0x110>)
 8000b28:	4915      	ldr	r1, [pc, #84]	; (8000b80 <send2uart+0x120>)
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <send2uart+0x108>)
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f003 f8b7 	bl	8003ca0 <siprintf>
	uart_status = HAL_UART_Transmit ( huart , (const uint8_t *) tx_buff ,  strlen ( (char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <send2uart+0x108>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fae5 	bl	8000104 <strlen>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	490a      	ldr	r1, [pc, #40]	; (8000b68 <send2uart+0x108>)
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	2364      	movs	r3, #100	; 0x64
 8000b44:	f002 f95a 	bl	8002dfc <HAL_UART_Transmit>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	001a      	movs	r2, r3
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <send2uart+0x10c>)
 8000b4e:	701a      	strb	r2, [r3, #0]
	tx_buff[0] = 0 ;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <send2uart+0x108>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
	rx_buff[0] = 0 ;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <send2uart+0x110>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b004      	add	sp, #16
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	080045e0 	.word	0x080045e0
 8000b68:	2000036c 	.word	0x2000036c
 8000b6c:	200002a2 	.word	0x200002a2
 8000b70:	200002a4 	.word	0x200002a4
 8000b74:	200002a1 	.word	0x200002a1
 8000b78:	2000012c 	.word	0x2000012c
 8000b7c:	080045e4 	.word	0x080045e4
 8000b80:	080045ec 	.word	0x080045ec

08000b84 <wait_for_tim16x>:

void wait_for_tim16x ( uint8_t x )
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	0002      	movs	r2, r0
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	701a      	strb	r2, [r3, #0]
	uint8_t i ;
	for ( i = 0 ; i < x ; i++ )
 8000b90:	230f      	movs	r3, #15
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e012      	b.n	8000bc0 <wait_for_tim16x+0x3c>
	{
		tim16_on = 1 ;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <wait_for_tim16x+0x54>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT ( &htim16 ) ;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <wait_for_tim16x+0x58>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 fe60 	bl	8002868 <HAL_TIM_Base_Start_IT>
		while ( tim16_on )
 8000ba8:	e000      	b.n	8000bac <wait_for_tim16x+0x28>
			__NOP () ;
 8000baa:	46c0      	nop			; (mov r8, r8)
		while ( tim16_on )
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <wait_for_tim16x+0x54>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1fa      	bne.n	8000baa <wait_for_tim16x+0x26>
	for ( i = 0 ; i < x ; i++ )
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	3201      	adds	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fa      	adds	r2, r7, r3
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	7812      	ldrb	r2, [r2, #0]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d3e5      	bcc.n	8000b9a <wait_for_tim16x+0x16>
	}
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200002a1 	.word	0x200002a1
 8000bdc:	2000012c 	.word	0x2000012c

08000be0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM14 )
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d106      	bne.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		tim14_on = 0 ;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim14 ) ;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f001 fe90 	bl	8002920 <HAL_TIM_Base_Stop_IT>
	}
	if ( htim->Instance == TIM16 )
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a09      	ldr	r2, [pc, #36]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d106      	bne.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		tim16_on = 0 ;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT ( &htim16 ) ;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f001 fe84 	bl	8002920 <HAL_TIM_Base_Stop_IT>
	}
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40002000 	.word	0x40002000
 8000c24:	200002a0 	.word	0x200002a0
 8000c28:	200000e0 	.word	0x200000e0
 8000c2c:	40014400 	.word	0x40014400
 8000c30:	200002a1 	.word	0x200002a1
 8000c34:	2000012c 	.word	0x2000012c

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_MspInit+0x44>)
 8000c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_MspInit+0x44>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_MspInit+0x44>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x44>)
 8000c64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_MspInit+0x44>)
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	0549      	lsls	r1, r1, #21
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_MspInit+0x44>)
 8000c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	055b      	lsls	r3, r3, #21
 8000c78:	4013      	ands	r3, r2
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b091      	sub	sp, #68	; 0x44
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	240c      	movs	r4, #12
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	0018      	movs	r0, r3
 8000c9a:	2334      	movs	r3, #52	; 0x34
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f002 fff6 	bl	8003c90 <memset>
  if(hrtc->Instance==RTC)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_RTC_MspInit+0x84>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12c      	bne.n	8000d08 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0292      	lsls	r2, r2, #10
 8000cb4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2280      	movs	r2, #128	; 0x80
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 f9b1 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000cca:	f7ff ffb5 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_RTC_MspInit+0x88>)
 8000cd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_RTC_MspInit+0x88>)
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	0209      	lsls	r1, r1, #8
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_RTC_MspInit+0x88>)
 8000cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_RTC_MspInit+0x88>)
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	00c9      	lsls	r1, r1, #3
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_RTC_MspInit+0x88>)
 8000cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f000 facf 	bl	80012a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000d02:	2002      	movs	r0, #2
 8000d04:	f000 fae1 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b011      	add	sp, #68	; 0x44
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	40002800 	.word	0x40002800
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <HAL_TIM_Base_MspInit+0x80>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d116      	bne.n	8000d58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <HAL_TIM_Base_MspInit+0x84>)
 8000d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <HAL_TIM_Base_MspInit+0x84>)
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	0209      	lsls	r1, r1, #8
 8000d34:	430a      	orrs	r2, r1
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_TIM_Base_MspInit+0x84>)
 8000d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2013      	movs	r0, #19
 8000d4c:	f000 faa8 	bl	80012a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000d50:	2013      	movs	r0, #19
 8000d52:	f000 faba 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d56:	e01a      	b.n	8000d8e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM16)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_TIM_Base_MspInit+0x88>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d115      	bne.n	8000d8e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_TIM_Base_MspInit+0x84>)
 8000d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_TIM_Base_MspInit+0x84>)
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	0289      	lsls	r1, r1, #10
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_TIM_Base_MspInit+0x84>)
 8000d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	029b      	lsls	r3, r3, #10
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	2015      	movs	r0, #21
 8000d84:	f000 fa8c 	bl	80012a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000d88:	2015      	movs	r0, #21
 8000d8a:	f000 fa9e 	bl	80012ca <HAL_NVIC_EnableIRQ>
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b004      	add	sp, #16
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40002000 	.word	0x40002000
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40014400 	.word	0x40014400

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b099      	sub	sp, #100	; 0x64
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	234c      	movs	r3, #76	; 0x4c
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	0018      	movs	r0, r3
 8000db2:	2314      	movs	r3, #20
 8000db4:	001a      	movs	r2, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	f002 ff6a 	bl	8003c90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	2418      	movs	r4, #24
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	2334      	movs	r3, #52	; 0x34
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f002 ff62 	bl	8003c90 <memset>
  if(huart->Instance==USART1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a45      	ldr	r2, [pc, #276]	; (8000ee8 <HAL_UART_MspInit+0x144>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d13e      	bne.n	8000e54 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	0018      	movs	r0, r3
 8000de6:	f001 f91f 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dee:	f7ff ff23 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df2:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df6:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	01c9      	lsls	r1, r1, #7
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000e00:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	01db      	lsls	r3, r3, #7
 8000e08:	4013      	ands	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b37      	ldr	r3, [pc, #220]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000e14:	2104      	movs	r1, #4
 8000e16:	430a      	orrs	r2, r1
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1a:	4b34      	ldr	r3, [pc, #208]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1e:	2204      	movs	r2, #4
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e26:	214c      	movs	r1, #76	; 0x4c
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2230      	movs	r2, #48	; 0x30
 8000e2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2202      	movs	r2, #2
 8000e32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2201      	movs	r2, #1
 8000e44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	4a29      	ldr	r2, [pc, #164]	; (8000ef0 <HAL_UART_MspInit+0x14c>)
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	0010      	movs	r0, r2
 8000e4e:	f000 fa59 	bl	8001304 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e52:	e044      	b.n	8000ede <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <HAL_UART_MspInit+0x150>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d13f      	bne.n	8000ede <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e5e:	2118      	movs	r1, #24
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2202      	movs	r2, #2
 8000e64:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 f8da 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000e78:	f7ff fede 	bl	8000c38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0289      	lsls	r1, r1, #10
 8000e86:	430a      	orrs	r2, r1
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	029b      	lsls	r3, r3, #10
 8000e92:	4013      	ands	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0x148>)
 8000ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_STLK_Pin|USART2_RX_STLK_Pin;
 8000eb0:	214c      	movs	r1, #76	; 0x4c
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	220c      	movs	r2, #12
 8000eb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2202      	movs	r2, #2
 8000ebc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2201      	movs	r2, #1
 8000ece:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	187a      	adds	r2, r7, r1
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 fa13 	bl	8001304 <HAL_GPIO_Init>
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b019      	add	sp, #100	; 0x64
 8000ee4:	bd90      	pop	{r4, r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	50000800 	.word	0x50000800
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1c:	f000 f8f8 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <RTC_TAMP_IRQHandler+0x14>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 fc1c 	bl	800276c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	200000b4 	.word	0x200000b4

08000f40 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <TIM14_IRQHandler+0x14>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 fd18 	bl	800297c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	200000e0 	.word	0x200000e0

08000f58 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <TIM16_IRQHandler+0x14>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 fd0c 	bl	800297c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	2000012c 	.word	0x2000012c

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f002 fe4c 	bl	8003c3c <__errno>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	425b      	negs	r3, r3
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	18d2      	adds	r2, r2, r3
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <_sbrk+0x64>)
 8000fc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b006      	add	sp, #24
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20009000 	.word	0x20009000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	20000468 	.word	0x20000468
 8000fd8:	20000480 	.word	0x20000480

08000fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fec:	f7ff fff6 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	; (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	; (8001034 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001016:	f002 fe17 	bl	8003c48 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800101a:	f7ff fb11 	bl	8000640 <main>

0800101e <LoopForever>:

LoopForever:
  b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   r0, =_estack
 8001020:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800102c:	080046c0 	.word	0x080046c0
  ldr r2, =_sbss
 8001030:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001034:	20000480 	.word	0x20000480

08001038 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_COMP_IRQHandler>
	...

0800103c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_Init+0x3c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Init+0x3c>)
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	0049      	lsls	r1, r1, #1
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f810 	bl	800107c <HAL_InitTick>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d003      	beq.n	8001068 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e001      	b.n	800106c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fdec 	bl	8000c44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40022000 	.word	0x40022000

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_InitTick+0x88>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d02b      	beq.n	80010ec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <HAL_InitTick+0x8c>)
 8001096:	681c      	ldr	r4, [r3, #0]
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_InitTick+0x88>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	0019      	movs	r1, r3
 800109e:	23fa      	movs	r3, #250	; 0xfa
 80010a0:	0098      	lsls	r0, r3, #2
 80010a2:	f7ff f841 	bl	8000128 <__udivsi3>
 80010a6:	0003      	movs	r3, r0
 80010a8:	0019      	movs	r1, r3
 80010aa:	0020      	movs	r0, r4
 80010ac:	f7ff f83c 	bl	8000128 <__udivsi3>
 80010b0:	0003      	movs	r3, r0
 80010b2:	0018      	movs	r0, r3
 80010b4:	f000 f919 	bl	80012ea <HAL_SYSTICK_Config>
 80010b8:	1e03      	subs	r3, r0, #0
 80010ba:	d112      	bne.n	80010e2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d80a      	bhi.n	80010d8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	2301      	movs	r3, #1
 80010c6:	425b      	negs	r3, r3
 80010c8:	2200      	movs	r2, #0
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 f8e8 	bl	80012a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_InitTick+0x90>)
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e00d      	b.n	80010f4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010d8:	230f      	movs	r3, #15
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e008      	b.n	80010f4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e2:	230f      	movs	r3, #15
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e003      	b.n	80010f4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ec:	230f      	movs	r3, #15
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010f4:	230f      	movs	r3, #15
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	781b      	ldrb	r3, [r3, #0]
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b005      	add	sp, #20
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	20000030 	.word	0x20000030
 8001108:	20000028 	.word	0x20000028
 800110c:	2000002c 	.word	0x2000002c

08001110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x1c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	001a      	movs	r2, r3
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x20>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	18d2      	adds	r2, r2, r3
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_IncTick+0x20>)
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	20000030 	.word	0x20000030
 8001130:	2000046c 	.word	0x2000046c

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <HAL_GetTick+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	2000046c 	.word	0x2000046c

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	0002      	movs	r2, r0
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b7f      	cmp	r3, #127	; 0x7f
 800115a:	d809      	bhi.n	8001170 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	001a      	movs	r2, r3
 8001162:	231f      	movs	r3, #31
 8001164:	401a      	ands	r2, r3
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_EnableIRQ+0x30>)
 8001168:	2101      	movs	r1, #1
 800116a:	4091      	lsls	r1, r2
 800116c:	000a      	movs	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	0002      	movs	r2, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b7f      	cmp	r3, #127	; 0x7f
 8001190:	d828      	bhi.n	80011e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001192:	4a2f      	ldr	r2, [pc, #188]	; (8001250 <__NVIC_SetPriority+0xd4>)
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b25b      	sxtb	r3, r3
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	33c0      	adds	r3, #192	; 0xc0
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	589b      	ldr	r3, [r3, r2]
 80011a2:	1dfa      	adds	r2, r7, #7
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	0011      	movs	r1, r2
 80011a8:	2203      	movs	r2, #3
 80011aa:	400a      	ands	r2, r1
 80011ac:	00d2      	lsls	r2, r2, #3
 80011ae:	21ff      	movs	r1, #255	; 0xff
 80011b0:	4091      	lsls	r1, r2
 80011b2:	000a      	movs	r2, r1
 80011b4:	43d2      	mvns	r2, r2
 80011b6:	401a      	ands	r2, r3
 80011b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	019b      	lsls	r3, r3, #6
 80011be:	22ff      	movs	r2, #255	; 0xff
 80011c0:	401a      	ands	r2, r3
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	0018      	movs	r0, r3
 80011c8:	2303      	movs	r3, #3
 80011ca:	4003      	ands	r3, r0
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d0:	481f      	ldr	r0, [pc, #124]	; (8001250 <__NVIC_SetPriority+0xd4>)
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	430a      	orrs	r2, r1
 80011dc:	33c0      	adds	r3, #192	; 0xc0
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011e2:	e031      	b.n	8001248 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e4:	4a1b      	ldr	r2, [pc, #108]	; (8001254 <__NVIC_SetPriority+0xd8>)
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	0019      	movs	r1, r3
 80011ec:	230f      	movs	r3, #15
 80011ee:	400b      	ands	r3, r1
 80011f0:	3b08      	subs	r3, #8
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3306      	adds	r3, #6
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	18d3      	adds	r3, r2, r3
 80011fa:	3304      	adds	r3, #4
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	1dfa      	adds	r2, r7, #7
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	0011      	movs	r1, r2
 8001204:	2203      	movs	r2, #3
 8001206:	400a      	ands	r2, r1
 8001208:	00d2      	lsls	r2, r2, #3
 800120a:	21ff      	movs	r1, #255	; 0xff
 800120c:	4091      	lsls	r1, r2
 800120e:	000a      	movs	r2, r1
 8001210:	43d2      	mvns	r2, r2
 8001212:	401a      	ands	r2, r3
 8001214:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	019b      	lsls	r3, r3, #6
 800121a:	22ff      	movs	r2, #255	; 0xff
 800121c:	401a      	ands	r2, r3
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	0018      	movs	r0, r3
 8001224:	2303      	movs	r3, #3
 8001226:	4003      	ands	r3, r0
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122c:	4809      	ldr	r0, [pc, #36]	; (8001254 <__NVIC_SetPriority+0xd8>)
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	001c      	movs	r4, r3
 8001234:	230f      	movs	r3, #15
 8001236:	4023      	ands	r3, r4
 8001238:	3b08      	subs	r3, #8
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	430a      	orrs	r2, r1
 800123e:	3306      	adds	r3, #6
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	18c3      	adds	r3, r0, r3
 8001244:	3304      	adds	r3, #4
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b003      	add	sp, #12
 800124e:	bd90      	pop	{r4, r7, pc}
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	1e5a      	subs	r2, r3, #1
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	045b      	lsls	r3, r3, #17
 8001268:	429a      	cmp	r2, r3
 800126a:	d301      	bcc.n	8001270 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126c:	2301      	movs	r3, #1
 800126e:	e010      	b.n	8001292 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <SysTick_Config+0x44>)
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	3a01      	subs	r2, #1
 8001276:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001278:	2301      	movs	r3, #1
 800127a:	425b      	negs	r3, r3
 800127c:	2103      	movs	r1, #3
 800127e:	0018      	movs	r0, r3
 8001280:	f7ff ff7c 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x44>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x44>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	210f      	movs	r1, #15
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	1c02      	adds	r2, r0, #0
 80012b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	0011      	movs	r1, r2
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b004      	add	sp, #16
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	0002      	movs	r2, r0
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff ff33 	bl	8001148 <__NVIC_EnableIRQ>
}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff ffaf 	bl	8001258 <SysTick_Config>
 80012fa:	0003      	movs	r3, r0
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b002      	add	sp, #8
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001312:	e147      	b.n	80015a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2101      	movs	r1, #1
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4091      	lsls	r1, r2
 800131e:	000a      	movs	r2, r1
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d100      	bne.n	800132c <HAL_GPIO_Init+0x28>
 800132a:	e138      	b.n	800159e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2203      	movs	r2, #3
 8001332:	4013      	ands	r3, r2
 8001334:	2b01      	cmp	r3, #1
 8001336:	d005      	beq.n	8001344 <HAL_GPIO_Init+0x40>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	4013      	ands	r3, r2
 8001340:	2b02      	cmp	r3, #2
 8001342:	d130      	bne.n	80013a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	409a      	lsls	r2, r3
 8001352:	0013      	movs	r3, r2
 8001354:	43da      	mvns	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	409a      	lsls	r2, r3
 8001366:	0013      	movs	r3, r2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800137a:	2201      	movs	r2, #1
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	43da      	mvns	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	2201      	movs	r2, #1
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2203      	movs	r2, #3
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d017      	beq.n	80013e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	43da      	mvns	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d123      	bne.n	8001436 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	58d3      	ldr	r3, [r2, r3]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2207      	movs	r2, #7
 8001400:	4013      	ands	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	409a      	lsls	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	43da      	mvns	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	691a      	ldr	r2, [r3, #16]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2107      	movs	r1, #7
 800141a:	400b      	ands	r3, r1
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	08da      	lsrs	r2, r3, #3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3208      	adds	r2, #8
 8001430:	0092      	lsls	r2, r2, #2
 8001432:	6939      	ldr	r1, [r7, #16]
 8001434:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2203      	movs	r2, #3
 8001454:	401a      	ands	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	409a      	lsls	r2, r3
 800145c:	0013      	movs	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	23c0      	movs	r3, #192	; 0xc0
 8001470:	029b      	lsls	r3, r3, #10
 8001472:	4013      	ands	r3, r2
 8001474:	d100      	bne.n	8001478 <HAL_GPIO_Init+0x174>
 8001476:	e092      	b.n	800159e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001478:	4a50      	ldr	r2, [pc, #320]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3318      	adds	r3, #24
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	589b      	ldr	r3, [r3, r2]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2203      	movs	r2, #3
 800148a:	4013      	ands	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	220f      	movs	r2, #15
 8001490:	409a      	lsls	r2, r3
 8001492:	0013      	movs	r3, r2
 8001494:	43da      	mvns	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	23a0      	movs	r3, #160	; 0xa0
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0x1ca>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a45      	ldr	r2, [pc, #276]	; (80015c0 <HAL_GPIO_Init+0x2bc>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00d      	beq.n	80014ca <HAL_GPIO_Init+0x1c6>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a44      	ldr	r2, [pc, #272]	; (80015c4 <HAL_GPIO_Init+0x2c0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_GPIO_Init+0x1c2>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a43      	ldr	r2, [pc, #268]	; (80015c8 <HAL_GPIO_Init+0x2c4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_Init+0x1be>
 80014be:	2303      	movs	r3, #3
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x1cc>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e004      	b.n	80014d0 <HAL_GPIO_Init+0x1cc>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_Init+0x1cc>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_GPIO_Init+0x1cc>
 80014ce:	2300      	movs	r3, #0
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	2103      	movs	r1, #3
 80014d4:	400a      	ands	r2, r1
 80014d6:	00d2      	lsls	r2, r2, #3
 80014d8:	4093      	lsls	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014e0:	4936      	ldr	r1, [pc, #216]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3318      	adds	r3, #24
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ee:	4b33      	ldr	r3, [pc, #204]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43da      	mvns	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	035b      	lsls	r3, r3, #13
 8001506:	4013      	ands	r3, r2
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001512:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43da      	mvns	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	039b      	lsls	r3, r3, #14
 8001530:	4013      	ands	r3, r2
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001542:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001544:	2384      	movs	r3, #132	; 0x84
 8001546:	58d3      	ldr	r3, [r2, r3]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43da      	mvns	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	029b      	lsls	r3, r3, #10
 800155c:	4013      	ands	r3, r2
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001568:	4914      	ldr	r1, [pc, #80]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 800156a:	2284      	movs	r2, #132	; 0x84
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	58d3      	ldr	r3, [r2, r3]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43da      	mvns	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	025b      	lsls	r3, r3, #9
 800158a:	4013      	ands	r3, r2
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001596:	4909      	ldr	r1, [pc, #36]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	40da      	lsrs	r2, r3
 80015ac:	1e13      	subs	r3, r2, #0
 80015ae:	d000      	beq.n	80015b2 <HAL_GPIO_Init+0x2ae>
 80015b0:	e6b0      	b.n	8001314 <HAL_GPIO_Init+0x10>
  }
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b006      	add	sp, #24
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021800 	.word	0x40021800
 80015c0:	50000400 	.word	0x50000400
 80015c4:	50000800 	.word	0x50000800
 80015c8:	50000c00 	.word	0x50000c00

080015cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	0008      	movs	r0, r1
 80015d6:	0011      	movs	r1, r2
 80015d8:	1cbb      	adds	r3, r7, #2
 80015da:	1c02      	adds	r2, r0, #0
 80015dc:	801a      	strh	r2, [r3, #0]
 80015de:	1c7b      	adds	r3, r7, #1
 80015e0:	1c0a      	adds	r2, r1, #0
 80015e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e4:	1c7b      	adds	r3, r7, #1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ec:	1cbb      	adds	r3, r7, #2
 80015ee:	881a      	ldrh	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f6:	1cbb      	adds	r3, r7, #2
 80015f8:	881a      	ldrh	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	429a      	cmp	r2, r3
 800162a:	d11f      	bne.n	800166c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	0013      	movs	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	189b      	adds	r3, r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4912      	ldr	r1, [pc, #72]	; (8001684 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800163a:	0018      	movs	r0, r3
 800163c:	f7fe fd74 	bl	8000128 <__udivsi3>
 8001640:	0003      	movs	r3, r0
 8001642:	3301      	adds	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001646:	e008      	b.n	800165a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3b01      	subs	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e001      	b.n	800165a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e009      	b.n	800166e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	401a      	ands	r2, r3
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	429a      	cmp	r2, r3
 800166a:	d0ed      	beq.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b004      	add	sp, #16
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	40007000 	.word	0x40007000
 800167c:	fffff9ff 	.word	0xfffff9ff
 8001680:	20000028 	.word	0x20000028
 8001684:	000f4240 	.word	0x000f4240

08001688 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <LL_RCC_GetAPB1Prescaler+0x14>)
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	23e0      	movs	r3, #224	; 0xe0
 8001692:	01db      	lsls	r3, r3, #7
 8001694:	4013      	ands	r3, r2
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e2fe      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCC_OscConfig+0x1e>
 80016bc:	e07c      	b.n	80017b8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016be:	4bc3      	ldr	r3, [pc, #780]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2238      	movs	r2, #56	; 0x38
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c8:	4bc0      	ldr	r3, [pc, #768]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2203      	movs	r2, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b10      	cmp	r3, #16
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x3e>
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d002      	beq.n	80016e4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d10b      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	4bb9      	ldr	r3, [pc, #740]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	029b      	lsls	r3, r3, #10
 80016ec:	4013      	ands	r3, r2
 80016ee:	d062      	beq.n	80017b6 <HAL_RCC_OscConfig+0x116>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d15e      	bne.n	80017b6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e2d9      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x78>
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4baf      	ldr	r3, [pc, #700]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	0249      	lsls	r1, r1, #9
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e020      	b.n	800175a <HAL_RCC_OscConfig+0xba>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	23a0      	movs	r3, #160	; 0xa0
 800171e:	02db      	lsls	r3, r3, #11
 8001720:	429a      	cmp	r2, r3
 8001722:	d10e      	bne.n	8001742 <HAL_RCC_OscConfig+0xa2>
 8001724:	4ba9      	ldr	r3, [pc, #676]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4ba8      	ldr	r3, [pc, #672]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	02c9      	lsls	r1, r1, #11
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	4ba6      	ldr	r3, [pc, #664]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4ba5      	ldr	r3, [pc, #660]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	0249      	lsls	r1, r1, #9
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0xba>
 8001742:	4ba2      	ldr	r3, [pc, #648]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4ba1      	ldr	r3, [pc, #644]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001748:	49a1      	ldr	r1, [pc, #644]	; (80019d0 <HAL_RCC_OscConfig+0x330>)
 800174a:	400a      	ands	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4b9f      	ldr	r3, [pc, #636]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b9e      	ldr	r3, [pc, #632]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001754:	499f      	ldr	r1, [pc, #636]	; (80019d4 <HAL_RCC_OscConfig+0x334>)
 8001756:	400a      	ands	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d014      	beq.n	800178c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fce7 	bl	8001134 <HAL_GetTick>
 8001766:	0003      	movs	r3, r0
 8001768:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fce2 	bl	8001134 <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e298      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177e:	4b93      	ldr	r3, [pc, #588]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	4013      	ands	r3, r2
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0xcc>
 800178a:	e015      	b.n	80017b8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fcd2 	bl	8001134 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001796:	f7ff fccd 	bl	8001134 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b64      	cmp	r3, #100	; 0x64
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e283      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a8:	4b88      	ldr	r3, [pc, #544]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	029b      	lsls	r3, r3, #10
 80017b0:	4013      	ands	r3, r2
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0xf6>
 80017b4:	e000      	b.n	80017b8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2202      	movs	r2, #2
 80017be:	4013      	ands	r3, r2
 80017c0:	d100      	bne.n	80017c4 <HAL_RCC_OscConfig+0x124>
 80017c2:	e099      	b.n	80018f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c4:	4b81      	ldr	r3, [pc, #516]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2238      	movs	r2, #56	; 0x38
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2203      	movs	r2, #3
 80017d4:	4013      	ands	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b10      	cmp	r3, #16
 80017dc:	d102      	bne.n	80017e4 <HAL_RCC_OscConfig+0x144>
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d002      	beq.n	80017ea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d135      	bne.n	8001856 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ea:	4b78      	ldr	r3, [pc, #480]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4013      	ands	r3, r2
 80017f4:	d005      	beq.n	8001802 <HAL_RCC_OscConfig+0x162>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e256      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a74      	ldr	r2, [pc, #464]	; (80019d8 <HAL_RCC_OscConfig+0x338>)
 8001808:	4013      	ands	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	021a      	lsls	r2, r3, #8
 8001812:	4b6e      	ldr	r3, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001814:	430a      	orrs	r2, r1
 8001816:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d112      	bne.n	8001844 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800181e:	4b6b      	ldr	r3, [pc, #428]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6e      	ldr	r2, [pc, #440]	; (80019dc <HAL_RCC_OscConfig+0x33c>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001832:	4b66      	ldr	r3, [pc, #408]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	0adb      	lsrs	r3, r3, #11
 8001838:	2207      	movs	r2, #7
 800183a:	4013      	ands	r3, r2
 800183c:	4a68      	ldr	r2, [pc, #416]	; (80019e0 <HAL_RCC_OscConfig+0x340>)
 800183e:	40da      	lsrs	r2, r3
 8001840:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <HAL_RCC_OscConfig+0x344>)
 8001842:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x348>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff fc17 	bl	800107c <HAL_InitTick>
 800184e:	1e03      	subs	r3, r0, #0
 8001850:	d051      	beq.n	80018f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e22c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d030      	beq.n	80018c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800185e:	4b5b      	ldr	r3, [pc, #364]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a5e      	ldr	r2, [pc, #376]	; (80019dc <HAL_RCC_OscConfig+0x33c>)
 8001864:	4013      	ands	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	4b57      	ldr	r3, [pc, #348]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001872:	4b56      	ldr	r3, [pc, #344]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b55      	ldr	r3, [pc, #340]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	0049      	lsls	r1, r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fc58 	bl	8001134 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fc53 	bl	8001134 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e209      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189c:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4013      	ands	r3, r2
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b48      	ldr	r3, [pc, #288]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <HAL_RCC_OscConfig+0x338>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	021a      	lsls	r2, r3, #8
 80018b8:	4b44      	ldr	r3, [pc, #272]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	e01b      	b.n	80018f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018c0:	4b42      	ldr	r3, [pc, #264]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b41      	ldr	r3, [pc, #260]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018c6:	4949      	ldr	r1, [pc, #292]	; (80019ec <HAL_RCC_OscConfig+0x34c>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fc32 	bl	8001134 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fc2d 	bl	8001134 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1e3      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e8:	4b38      	ldr	r3, [pc, #224]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4013      	ands	r3, r2
 80018f2:	d1f0      	bne.n	80018d6 <HAL_RCC_OscConfig+0x236>
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2208      	movs	r2, #8
 80018fe:	4013      	ands	r3, r2
 8001900:	d047      	beq.n	8001992 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001902:	4b32      	ldr	r3, [pc, #200]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2238      	movs	r2, #56	; 0x38
 8001908:	4013      	ands	r3, r2
 800190a:	2b18      	cmp	r3, #24
 800190c:	d10a      	bne.n	8001924 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800190e:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001912:	2202      	movs	r2, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d03c      	beq.n	8001992 <HAL_RCC_OscConfig+0x2f2>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d138      	bne.n	8001992 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e1c5      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d019      	beq.n	8001960 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 800192e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fbfc 	bl	8001134 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001942:	f7ff fbf7 	bl	8001134 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1ad      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d0f1      	beq.n	8001942 <HAL_RCC_OscConfig+0x2a2>
 800195e:	e018      	b.n	8001992 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001962:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 8001966:	2101      	movs	r1, #1
 8001968:	438a      	bics	r2, r1
 800196a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff fbe2 	bl	8001134 <HAL_GetTick>
 8001970:	0003      	movs	r3, r0
 8001972:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001976:	f7ff fbdd 	bl	8001134 <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e193      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 800198a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d1f1      	bne.n	8001976 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2204      	movs	r2, #4
 8001998:	4013      	ands	r3, r2
 800199a:	d100      	bne.n	800199e <HAL_RCC_OscConfig+0x2fe>
 800199c:	e0c6      	b.n	8001b2c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199e:	231f      	movs	r3, #31
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2238      	movs	r2, #56	; 0x38
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d11e      	bne.n	80019f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_OscConfig+0x32c>)
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	d100      	bne.n	80019be <HAL_RCC_OscConfig+0x31e>
 80019bc:	e0b6      	b.n	8001b2c <HAL_RCC_OscConfig+0x48c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d000      	beq.n	80019c8 <HAL_RCC_OscConfig+0x328>
 80019c6:	e0b1      	b.n	8001b2c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e171      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	fffeffff 	.word	0xfffeffff
 80019d4:	fffbffff 	.word	0xfffbffff
 80019d8:	ffff80ff 	.word	0xffff80ff
 80019dc:	ffffc7ff 	.word	0xffffc7ff
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	20000028 	.word	0x20000028
 80019e8:	2000002c 	.word	0x2000002c
 80019ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019f0:	4bb1      	ldr	r3, [pc, #708]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 80019f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	055b      	lsls	r3, r3, #21
 80019f8:	4013      	ands	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_OscConfig+0x360>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x362>
 8001a00:	2300      	movs	r3, #0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d011      	beq.n	8001a2a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4bac      	ldr	r3, [pc, #688]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a0a:	4bab      	ldr	r3, [pc, #684]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	0549      	lsls	r1, r1, #21
 8001a10:	430a      	orrs	r2, r1
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a14:	4ba8      	ldr	r3, [pc, #672]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	055b      	lsls	r3, r3, #21
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a22:	231f      	movs	r3, #31
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2a:	4ba4      	ldr	r3, [pc, #656]	; (8001cbc <HAL_RCC_OscConfig+0x61c>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	d11a      	bne.n	8001a6c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a36:	4ba1      	ldr	r3, [pc, #644]	; (8001cbc <HAL_RCC_OscConfig+0x61c>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4ba0      	ldr	r3, [pc, #640]	; (8001cbc <HAL_RCC_OscConfig+0x61c>)
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	0049      	lsls	r1, r1, #1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fb76 	bl	8001134 <HAL_GetTick>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4e:	f7ff fb71 	bl	8001134 <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e127      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a60:	4b96      	ldr	r3, [pc, #600]	; (8001cbc <HAL_RCC_OscConfig+0x61c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3e2>
 8001a74:	4b90      	ldr	r3, [pc, #576]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a78:	4b8f      	ldr	r3, [pc, #572]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a80:	e01c      	b.n	8001abc <HAL_RCC_OscConfig+0x41c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x404>
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a8e:	4b8a      	ldr	r3, [pc, #552]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a90:	2104      	movs	r1, #4
 8001a92:	430a      	orrs	r2, r1
 8001a94:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a9a:	4b87      	ldr	r3, [pc, #540]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0x41c>
 8001aa4:	4b84      	ldr	r3, [pc, #528]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001aa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aa8:	4b83      	ldr	r3, [pc, #524]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	438a      	bics	r2, r1
 8001aae:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ab0:	4b81      	ldr	r3, [pc, #516]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001ab2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab4:	4b80      	ldr	r3, [pc, #512]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	438a      	bics	r2, r1
 8001aba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d014      	beq.n	8001aee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb36 	bl	8001134 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff fb31 	bl	8001134 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	4a79      	ldr	r2, [pc, #484]	; (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e0e6      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae2:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x42e>
 8001aec:	e013      	b.n	8001b16 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff fb21 	bl	8001134 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af6:	e009      	b.n	8001b0c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff fb1c 	bl	8001134 <HAL_GetTick>
 8001afc:	0002      	movs	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	4a6f      	ldr	r2, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x620>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0d1      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b16:	231f      	movs	r3, #31
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b20:	4b65      	ldr	r3, [pc, #404]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b24:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b26:	4967      	ldr	r1, [pc, #412]	; (8001cc4 <HAL_RCC_OscConfig+0x624>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d100      	bne.n	8001b36 <HAL_RCC_OscConfig+0x496>
 8001b34:	e0bb      	b.n	8001cae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b36:	4b60      	ldr	r3, [pc, #384]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2238      	movs	r2, #56	; 0x38
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d100      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4a4>
 8001b42:	e07b      	b.n	8001c3c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d156      	bne.n	8001bfa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b5a      	ldr	r3, [pc, #360]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b52:	495d      	ldr	r1, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x628>)
 8001b54:	400a      	ands	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff faec 	bl	8001134 <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff fae7 	bl	8001134 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e09d      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	049b      	lsls	r3, r3, #18
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b80:	4b4d      	ldr	r3, [pc, #308]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a51      	ldr	r2, [pc, #324]	; (8001ccc <HAL_RCC_OscConfig+0x62c>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bac:	431a      	orrs	r2, r3
 8001bae:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	0449      	lsls	r1, r1, #17
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	0549      	lsls	r1, r1, #21
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fab0 	bl	8001134 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff faab 	bl	8001134 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e061      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	049b      	lsls	r3, r3, #18
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x53a>
 8001bf8:	e059      	b.n	8001cae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001c00:	4931      	ldr	r1, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x628>)
 8001c02:	400a      	ands	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff fa95 	bl	8001134 <HAL_GetTick>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff fa90 	bl	8001134 <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e046      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	049b      	lsls	r3, r3, #18
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001c34:	4926      	ldr	r1, [pc, #152]	; (8001cd0 <HAL_RCC_OscConfig+0x630>)
 8001c36:	400a      	ands	r2, r1
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	e038      	b.n	8001cae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e033      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x618>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2203      	movs	r2, #3
 8001c52:	401a      	ands	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d126      	bne.n	8001caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2270      	movs	r2, #112	; 0x70
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d11f      	bne.n	8001caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	23fe      	movs	r3, #254	; 0xfe
 8001c6e:	01db      	lsls	r3, r3, #7
 8001c70:	401a      	ands	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d116      	bne.n	8001caa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	23f8      	movs	r3, #248	; 0xf8
 8001c80:	039b      	lsls	r3, r3, #14
 8001c82:	401a      	ands	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d10e      	bne.n	8001caa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	23e0      	movs	r3, #224	; 0xe0
 8001c90:	051b      	lsls	r3, r3, #20
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	0f5b      	lsrs	r3, r3, #29
 8001ca0:	075a      	lsls	r2, r3, #29
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b008      	add	sp, #32
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	00001388 	.word	0x00001388
 8001cc4:	efffffff 	.word	0xefffffff
 8001cc8:	feffffff 	.word	0xfeffffff
 8001ccc:	11c1808c 	.word	0x11c1808c
 8001cd0:	eefefffc 	.word	0xeefefffc

08001cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0e9      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2207      	movs	r2, #7
 8001cee:	4013      	ands	r3, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d91e      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b73      	ldr	r3, [pc, #460]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	0019      	movs	r1, r3
 8001d00:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d08:	f7ff fa14 	bl	8001134 <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d10:	e009      	b.n	8001d26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d12:	f7ff fa0f 	bl	8001134 <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	4a6a      	ldr	r2, [pc, #424]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e0ca      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1ee      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d015      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2204      	movs	r2, #4
 8001d44:	4013      	ands	r3, r2
 8001d46:	d006      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d48:	4b60      	ldr	r3, [pc, #384]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d4e:	21e0      	movs	r1, #224	; 0xe0
 8001d50:	01c9      	lsls	r1, r1, #7
 8001d52:	430a      	orrs	r2, r1
 8001d54:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d56:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4a5d      	ldr	r2, [pc, #372]	; (8001ed0 <HAL_RCC_ClockConfig+0x1fc>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4013      	ands	r3, r2
 8001d72:	d057      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	029b      	lsls	r3, r3, #10
 8001d84:	4013      	ands	r3, r2
 8001d86:	d12b      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e097      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d94:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	049b      	lsls	r3, r3, #18
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d11f      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e08b      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dac:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4013      	ands	r3, r2
 8001db6:	d113      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e07f      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc4:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d108      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e074      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e06d      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de0:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2207      	movs	r2, #7
 8001de6:	4393      	bics	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df4:	f7ff f99e 	bl	8001134 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfc:	e009      	b.n	8001e12 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfe:	f7ff f999 	bl	8001134 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4a2f      	ldr	r2, [pc, #188]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e054      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2238      	movs	r2, #56	; 0x38
 8001e18:	401a      	ands	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1ec      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2207      	movs	r2, #7
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d21e      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2207      	movs	r2, #7
 8001e38:	4393      	bics	r3, r2
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e44:	f7ff f976 	bl	8001134 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4e:	f7ff f971 	bl	8001134 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e02c      	b.n	8001ebc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2207      	movs	r2, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1ee      	bne.n	8001e4e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2204      	movs	r2, #4
 8001e76:	4013      	ands	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <HAL_RCC_ClockConfig+0x200>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e8e:	f000 f829 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001e92:	0001      	movs	r1, r0
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_RCC_ClockConfig+0x204>)
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	58d3      	ldr	r3, [r2, r3]
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	000a      	movs	r2, r1
 8001eaa:	40da      	lsrs	r2, r3
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_ClockConfig+0x208>)
 8001eae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x20c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff f8e1 	bl	800107c <HAL_InitTick>
 8001eba:	0003      	movs	r3, r0
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b004      	add	sp, #16
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	00001388 	.word	0x00001388
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	fffff0ff 	.word	0xfffff0ff
 8001ed4:	ffff8fff 	.word	0xffff8fff
 8001ed8:	080045f4 	.word	0x080045f4
 8001edc:	20000028 	.word	0x20000028
 8001ee0:	2000002c 	.word	0x2000002c

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eea:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2238      	movs	r2, #56	; 0x38
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d10f      	bne.n	8001f14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ef4:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0adb      	lsrs	r3, r3, #11
 8001efa:	2207      	movs	r2, #7
 8001efc:	4013      	ands	r3, r2
 8001efe:	2201      	movs	r2, #1
 8001f00:	409a      	lsls	r2, r3
 8001f02:	0013      	movs	r3, r2
 8001f04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	4835      	ldr	r0, [pc, #212]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f0a:	f7fe f90d 	bl	8000128 <__udivsi3>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	e05d      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2238      	movs	r2, #56	; 0x38
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e054      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2238      	movs	r2, #56	; 0x38
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d138      	bne.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2203      	movs	r2, #3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	2207      	movs	r2, #7
 8001f44:	4013      	ands	r3, r2
 8001f46:	3301      	adds	r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d10d      	bne.n	8001f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	4824      	ldr	r0, [pc, #144]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f54:	f7fe f8e8 	bl	8000128 <__udivsi3>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	227f      	movs	r2, #127	; 0x7f
 8001f64:	4013      	ands	r3, r2
 8001f66:	434b      	muls	r3, r1
 8001f68:	617b      	str	r3, [r7, #20]
        break;
 8001f6a:	e00d      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	481c      	ldr	r0, [pc, #112]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f70:	f7fe f8da 	bl	8000128 <__udivsi3>
 8001f74:	0003      	movs	r3, r0
 8001f76:	0019      	movs	r1, r3
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	227f      	movs	r2, #127	; 0x7f
 8001f80:	4013      	ands	r3, r2
 8001f82:	434b      	muls	r3, r1
 8001f84:	617b      	str	r3, [r7, #20]
        break;
 8001f86:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f88:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0f5b      	lsrs	r3, r3, #29
 8001f8e:	2207      	movs	r2, #7
 8001f90:	4013      	ands	r3, r2
 8001f92:	3301      	adds	r3, #1
 8001f94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	6978      	ldr	r0, [r7, #20]
 8001f9a:	f7fe f8c5 	bl	8000128 <__udivsi3>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	e015      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2238      	movs	r2, #56	; 0x38
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d103      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2238      	movs	r2, #56	; 0x38
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b18      	cmp	r3, #24
 8001fc2:	d103      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fc4:	23fa      	movs	r3, #250	; 0xfa
 8001fc6:	01db      	lsls	r3, r3, #7
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e001      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fd0:	693b      	ldr	r3, [r7, #16]
}
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b006      	add	sp, #24
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b02      	ldr	r3, [pc, #8]	; (8001ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	20000028 	.word	0x20000028

08001ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ffc:	b5b0      	push	{r4, r5, r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002000:	f7ff fff2 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002004:	0004      	movs	r4, r0
 8002006:	f7ff fb3f 	bl	8001688 <LL_RCC_GetAPB1Prescaler>
 800200a:	0003      	movs	r3, r0
 800200c:	0b1a      	lsrs	r2, r3, #12
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	58d3      	ldr	r3, [r2, r3]
 8002014:	221f      	movs	r2, #31
 8002016:	4013      	ands	r3, r2
 8002018:	40dc      	lsrs	r4, r3
 800201a:	0023      	movs	r3, r4
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	bdb0      	pop	{r4, r5, r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	08004634 	.word	0x08004634

08002028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002030:	2313      	movs	r3, #19
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002038:	2312      	movs	r3, #18
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	4013      	ands	r3, r2
 800204a:	d100      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800204c:	e0a3      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2011      	movs	r0, #17
 8002050:	183b      	adds	r3, r7, r0
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4bc3      	ldr	r3, [pc, #780]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	055b      	lsls	r3, r3, #21
 800205e:	4013      	ands	r3, r2
 8002060:	d110      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4bc0      	ldr	r3, [pc, #768]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002066:	4bbf      	ldr	r3, [pc, #764]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0549      	lsls	r1, r1, #21
 800206c:	430a      	orrs	r2, r1
 800206e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002070:	4bbc      	ldr	r3, [pc, #752]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	055b      	lsls	r3, r3, #21
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207e:	183b      	adds	r3, r7, r0
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002084:	4bb8      	ldr	r3, [pc, #736]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4bb7      	ldr	r3, [pc, #732]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800208a:	2180      	movs	r1, #128	; 0x80
 800208c:	0049      	lsls	r1, r1, #1
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002092:	f7ff f84f 	bl	8001134 <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800209a:	e00b      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209c:	f7ff f84a 	bl	8001134 <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d904      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020aa:	2313      	movs	r3, #19
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	2203      	movs	r2, #3
 80020b0:	701a      	strb	r2, [r3, #0]
        break;
 80020b2:	e005      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b4:	4bac      	ldr	r3, [pc, #688]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	d0ed      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020c0:	2313      	movs	r3, #19
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d154      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ca:	4ba6      	ldr	r3, [pc, #664]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020ce:	23c0      	movs	r3, #192	; 0xc0
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4013      	ands	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d019      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d014      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e6:	4b9f      	ldr	r3, [pc, #636]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	4aa0      	ldr	r2, [pc, #640]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f0:	4b9c      	ldr	r3, [pc, #624]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020f4:	4b9b      	ldr	r3, [pc, #620]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	0249      	lsls	r1, r1, #9
 80020fa:	430a      	orrs	r2, r1
 80020fc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020fe:	4b99      	ldr	r3, [pc, #612]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002100:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002102:	4b98      	ldr	r3, [pc, #608]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002104:	499a      	ldr	r1, [pc, #616]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002106:	400a      	ands	r2, r1
 8002108:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800210a:	4b96      	ldr	r3, [pc, #600]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2201      	movs	r2, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d016      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7ff f80c 	bl	8001134 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002120:	e00c      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7ff f807 	bl	8001134 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	4a91      	ldr	r2, [pc, #580]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d904      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002132:	2313      	movs	r3, #19
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	2203      	movs	r2, #3
 8002138:	701a      	strb	r2, [r3, #0]
            break;
 800213a:	e004      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213c:	4b89      	ldr	r3, [pc, #548]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d0ed      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002146:	2313      	movs	r3, #19
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002150:	4b84      	ldr	r3, [pc, #528]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	4a85      	ldr	r2, [pc, #532]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002156:	4013      	ands	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215e:	4b81      	ldr	r3, [pc, #516]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002160:	430a      	orrs	r2, r1
 8002162:	65da      	str	r2, [r3, #92]	; 0x5c
 8002164:	e00c      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002166:	2312      	movs	r3, #18
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	2213      	movs	r2, #19
 800216c:	18ba      	adds	r2, r7, r2
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e005      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002174:	2312      	movs	r3, #18
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	2213      	movs	r2, #19
 800217a:	18ba      	adds	r2, r7, r2
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002180:	2311      	movs	r3, #17
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b76      	ldr	r3, [pc, #472]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800218e:	4b75      	ldr	r3, [pc, #468]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002190:	4979      	ldr	r1, [pc, #484]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002192:	400a      	ands	r2, r1
 8002194:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	4013      	ands	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a0:	4b70      	ldr	r3, [pc, #448]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	2203      	movs	r2, #3
 80021a6:	4393      	bics	r3, r2
 80021a8:	0019      	movs	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2202      	movs	r2, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	d009      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021be:	4b69      	ldr	r3, [pc, #420]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c2:	220c      	movs	r2, #12
 80021c4:	4393      	bics	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b65      	ldr	r3, [pc, #404]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2210      	movs	r2, #16
 80021d8:	4013      	ands	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021dc:	4b61      	ldr	r3, [pc, #388]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	4a66      	ldr	r2, [pc, #408]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b5e      	ldr	r3, [pc, #376]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ec:	430a      	orrs	r2, r1
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4013      	ands	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021fc:	4b59      	ldr	r3, [pc, #356]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	4a5f      	ldr	r2, [pc, #380]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	4b56      	ldr	r3, [pc, #344]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220c:	430a      	orrs	r2, r1
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4013      	ands	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	4b4e      	ldr	r3, [pc, #312]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222c:	430a      	orrs	r2, r1
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2220      	movs	r2, #32
 8002236:	4013      	ands	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224a:	430a      	orrs	r2, r1
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	01db      	lsls	r3, r3, #7
 8002256:	4013      	ands	r3, r2
 8002258:	d015      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800225a:	4b42      	ldr	r3, [pc, #264]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	0899      	lsrs	r1, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002268:	430a      	orrs	r2, r1
 800226a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	05db      	lsls	r3, r3, #23
 8002274:	429a      	cmp	r2, r3
 8002276:	d106      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002278:	4b3a      	ldr	r3, [pc, #232]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	0249      	lsls	r1, r1, #9
 8002282:	430a      	orrs	r2, r1
 8002284:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	031b      	lsls	r3, r3, #12
 800228e:	4013      	ands	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	2240      	movs	r2, #64	; 0x40
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a0:	4b30      	ldr	r3, [pc, #192]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	039b      	lsls	r3, r3, #14
 80022ae:	4013      	ands	r3, r2
 80022b0:	d016      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022b2:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	4a35      	ldr	r2, [pc, #212]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c2:	430a      	orrs	r2, r1
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	03db      	lsls	r3, r3, #15
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d106      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0449      	lsls	r1, r1, #17
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	03db      	lsls	r3, r3, #15
 80022e8:	4013      	ands	r3, r2
 80022ea:	d016      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	4a27      	ldr	r2, [pc, #156]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	045b      	lsls	r3, r3, #17
 8002308:	429a      	cmp	r2, r3
 800230a:	d106      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800230c:	4b15      	ldr	r3, [pc, #84]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002312:	2180      	movs	r1, #128	; 0x80
 8002314:	0449      	lsls	r1, r1, #17
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4013      	ands	r3, r2
 8002324:	d016      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	4a1a      	ldr	r2, [pc, #104]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800232c:	4013      	ands	r3, r2
 800232e:	0019      	movs	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002336:	430a      	orrs	r2, r1
 8002338:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	01db      	lsls	r3, r3, #7
 8002342:	429a      	cmp	r2, r3
 8002344:	d106      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234c:	2180      	movs	r1, #128	; 0x80
 800234e:	0249      	lsls	r1, r1, #9
 8002350:	430a      	orrs	r2, r1
 8002352:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002354:	2312      	movs	r3, #18
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	781b      	ldrb	r3, [r3, #0]
}
 800235a:	0018      	movs	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	b006      	add	sp, #24
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	40021000 	.word	0x40021000
 8002368:	40007000 	.word	0x40007000
 800236c:	fffffcff 	.word	0xfffffcff
 8002370:	fffeffff 	.word	0xfffeffff
 8002374:	00001388 	.word	0x00001388
 8002378:	efffffff 	.word	0xefffffff
 800237c:	fffff3ff 	.word	0xfffff3ff
 8002380:	fff3ffff 	.word	0xfff3ffff
 8002384:	ffcfffff 	.word	0xffcfffff
 8002388:	ffffcfff 	.word	0xffffcfff
 800238c:	ffbfffff 	.word	0xffbfffff
 8002390:	feffffff 	.word	0xfeffffff
 8002394:	ffff3fff 	.word	0xffff3fff

08002398 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002398:	b5b0      	push	{r4, r5, r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023a0:	230f      	movs	r3, #15
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d100      	bne.n	80023b0 <HAL_RTC_Init+0x18>
 80023ae:	e08c      	b.n	80024ca <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2229      	movs	r2, #41	; 0x29
 80023b4:	5c9b      	ldrb	r3, [r3, r2]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2228      	movs	r2, #40	; 0x28
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2288      	movs	r2, #136	; 0x88
 80023c8:	0212      	lsls	r2, r2, #8
 80023ca:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f7fe fc5c 	bl	8000c8c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2229      	movs	r2, #41	; 0x29
 80023d8:	2102      	movs	r1, #2
 80023da:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2210      	movs	r2, #16
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d062      	beq.n	80024b0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	22ca      	movs	r2, #202	; 0xca
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2253      	movs	r2, #83	; 0x53
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80023fa:	250f      	movs	r5, #15
 80023fc:	197c      	adds	r4, r7, r5
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f000 f892 	bl	800252a <RTC_EnterInitMode>
 8002406:	0003      	movs	r3, r0
 8002408:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800240a:	0028      	movs	r0, r5
 800240c:	183b      	adds	r3, r7, r0
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d12c      	bne.n	800246e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	492e      	ldr	r1, [pc, #184]	; (80024d8 <HAL_RTC_Init+0x140>)
 8002420:	400a      	ands	r2, r1
 8002422:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6999      	ldr	r1, [r3, #24]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6912      	ldr	r2, [r2, #16]
 800244a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6919      	ldr	r1, [r3, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	041a      	lsls	r2, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002460:	183c      	adds	r4, r7, r0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f8a3 	bl	80025b0 <RTC_ExitInitMode>
 800246a:	0003      	movs	r3, r0
 800246c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800246e:	230f      	movs	r3, #15
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d116      	bne.n	80024a6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	00d2      	lsls	r2, r2, #3
 8002484:	08d2      	lsrs	r2, r2, #3
 8002486:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6999      	ldr	r1, [r3, #24]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24
 80024ae:	e003      	b.n	80024b8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80024b0:	230f      	movs	r3, #15
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80024b8:	230f      	movs	r3, #15
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2229      	movs	r2, #41	; 0x29
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80024ca:	230f      	movs	r3, #15
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	781b      	ldrb	r3, [r3, #0]
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b004      	add	sp, #16
 80024d6:	bdb0      	pop	{r4, r5, r7, pc}
 80024d8:	fb8fffbf 	.word	0xfb8fffbf

080024dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	21a0      	movs	r1, #160	; 0xa0
 80024f0:	438a      	bics	r2, r1
 80024f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80024f4:	f7fe fe1e 	bl	8001134 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80024fc:	e00a      	b.n	8002514 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80024fe:	f7fe fe19 	bl	8001134 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad2      	subs	r2, r2, r3
 8002508:	23fa      	movs	r3, #250	; 0xfa
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	429a      	cmp	r2, r3
 800250e:	d901      	bls.n	8002514 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e006      	b.n	8002522 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	4013      	ands	r3, r2
 800251e:	d0ee      	beq.n	80024fe <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}

0800252a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002532:	230f      	movs	r3, #15
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2240      	movs	r2, #64	; 0x40
 8002542:	4013      	ands	r3, r2
 8002544:	d12c      	bne.n	80025a0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002556:	f7fe fded 	bl	8001134 <HAL_GetTick>
 800255a:	0003      	movs	r3, r0
 800255c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800255e:	e014      	b.n	800258a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002560:	f7fe fde8 	bl	8001134 <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad2      	subs	r2, r2, r3
 800256a:	200f      	movs	r0, #15
 800256c:	183b      	adds	r3, r7, r0
 800256e:	1839      	adds	r1, r7, r0
 8002570:	7809      	ldrb	r1, [r1, #0]
 8002572:	7019      	strb	r1, [r3, #0]
 8002574:	23fa      	movs	r3, #250	; 0xfa
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d906      	bls.n	800258a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800257c:	183b      	adds	r3, r7, r0
 800257e:	2203      	movs	r2, #3
 8002580:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2229      	movs	r2, #41	; 0x29
 8002586:	2103      	movs	r1, #3
 8002588:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2240      	movs	r2, #64	; 0x40
 8002592:	4013      	ands	r3, r2
 8002594:	d104      	bne.n	80025a0 <RTC_EnterInitMode+0x76>
 8002596:	230f      	movs	r3, #15
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d1df      	bne.n	8002560 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80025a0:	230f      	movs	r3, #15
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	781b      	ldrb	r3, [r3, #0]
}
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b004      	add	sp, #16
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	240f      	movs	r4, #15
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <RTC_ExitInitMode+0x84>)
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <RTC_ExitInitMode+0x84>)
 80025c6:	2180      	movs	r1, #128	; 0x80
 80025c8:	438a      	bics	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <RTC_ExitInitMode+0x84>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2220      	movs	r2, #32
 80025d2:	4013      	ands	r3, r2
 80025d4:	d10d      	bne.n	80025f2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff ff7f 	bl	80024dc <HAL_RTC_WaitForSynchro>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d021      	beq.n	8002626 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2229      	movs	r2, #41	; 0x29
 80025e6:	2103      	movs	r1, #3
 80025e8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	2203      	movs	r2, #3
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e019      	b.n	8002626 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <RTC_ExitInitMode+0x84>)
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <RTC_ExitInitMode+0x84>)
 80025f8:	2120      	movs	r1, #32
 80025fa:	438a      	bics	r2, r1
 80025fc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff ff6b 	bl	80024dc <HAL_RTC_WaitForSynchro>
 8002606:	1e03      	subs	r3, r0, #0
 8002608:	d007      	beq.n	800261a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2229      	movs	r2, #41	; 0x29
 800260e:	2103      	movs	r1, #3
 8002610:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002612:	230f      	movs	r3, #15
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <RTC_ExitInitMode+0x84>)
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <RTC_ExitInitMode+0x84>)
 8002620:	2120      	movs	r1, #32
 8002622:	430a      	orrs	r2, r1
 8002624:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002626:	230f      	movs	r3, #15
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	781b      	ldrb	r3, [r3, #0]
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b005      	add	sp, #20
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	40002800 	.word	0x40002800

08002638 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2228      	movs	r2, #40	; 0x28
 8002648:	5c9b      	ldrb	r3, [r3, r2]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800264e:	2302      	movs	r3, #2
 8002650:	e082      	b.n	8002758 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2228      	movs	r2, #40	; 0x28
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2229      	movs	r2, #41	; 0x29
 800265e:	2102      	movs	r1, #2
 8002660:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	22ca      	movs	r2, #202	; 0xca
 8002668:	625a      	str	r2, [r3, #36]	; 0x24
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2253      	movs	r2, #83	; 0x53
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4938      	ldr	r1, [pc, #224]	; (8002760 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800267e:	400a      	ands	r2, r1
 8002680:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2104      	movs	r1, #4
 800268e:	430a      	orrs	r2, r1
 8002690:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	4013      	ands	r3, r2
 800269a:	d121      	bne.n	80026e0 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 800269c:	f7fe fd4a 	bl	8001134 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80026a4:	e016      	b.n	80026d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80026a6:	f7fe fd45 	bl	8001134 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	1ad2      	subs	r2, r2, r3
 80026b0:	23fa      	movs	r3, #250	; 0xfa
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d90d      	bls.n	80026d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	22ff      	movs	r2, #255	; 0xff
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2229      	movs	r2, #41	; 0x29
 80026c4:	2103      	movs	r1, #3
 80026c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2228      	movs	r2, #40	; 0x28
 80026cc:	2100      	movs	r1, #0
 80026ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e041      	b.n	8002758 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2204      	movs	r2, #4
 80026dc:	4013      	ands	r3, r2
 80026de:	d0e2      	beq.n	80026a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2107      	movs	r1, #7
 80026f4:	438a      	bics	r2, r1
 80026f6:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6999      	ldr	r1, [r3, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	430a      	orrs	r2, r1
 8002706:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002708:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	58d3      	ldr	r3, [r2, r3]
 800270e:	4916      	ldr	r1, [pc, #88]	; (8002768 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	0312      	lsls	r2, r2, #12
 8002714:	4313      	orrs	r3, r2
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	01c9      	lsls	r1, r1, #7
 8002728:	430a      	orrs	r2, r1
 800272a:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	00c9      	lsls	r1, r1, #3
 800273a:	430a      	orrs	r2, r1
 800273c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	22ff      	movs	r2, #255	; 0xff
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2229      	movs	r2, #41	; 0x29
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2228      	movs	r2, #40	; 0x28
 8002752:	2100      	movs	r1, #0
 8002754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b006      	add	sp, #24
 800275e:	bd80      	pop	{r7, pc}
 8002760:	fffffbff 	.word	0xfffffbff
 8002764:	40002800 	.word	0x40002800
 8002768:	40021800 	.word	0x40021800

0800276c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277a:	2204      	movs	r2, #4
 800277c:	4013      	ands	r3, r2
 800277e:	d00b      	beq.n	8002798 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2104      	movs	r1, #4
 800278c:	430a      	orrs	r2, r1
 800278e:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f000 f808 	bl	80027a8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2229      	movs	r2, #41	; 0x29
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e04a      	b.n	8002860 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	223d      	movs	r2, #61	; 0x3d
 80027ce:	5c9b      	ldrb	r3, [r3, r2]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d107      	bne.n	80027e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223c      	movs	r2, #60	; 0x3c
 80027da:	2100      	movs	r1, #0
 80027dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7fe fa99 	bl	8000d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	223d      	movs	r2, #61	; 0x3d
 80027ea:	2102      	movs	r1, #2
 80027ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	0019      	movs	r1, r3
 80027f8:	0010      	movs	r0, r2
 80027fa:	f000 fa11 	bl	8002c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2248      	movs	r2, #72	; 0x48
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	223e      	movs	r2, #62	; 0x3e
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	223f      	movs	r2, #63	; 0x3f
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2241      	movs	r2, #65	; 0x41
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2242      	movs	r2, #66	; 0x42
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2243      	movs	r2, #67	; 0x43
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2244      	movs	r2, #68	; 0x44
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2245      	movs	r2, #69	; 0x45
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2246      	movs	r2, #70	; 0x46
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2247      	movs	r2, #71	; 0x47
 8002852:	2101      	movs	r1, #1
 8002854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	223d      	movs	r2, #61	; 0x3d
 800285a:	2101      	movs	r1, #1
 800285c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	223d      	movs	r2, #61	; 0x3d
 8002874:	5c9b      	ldrb	r3, [r3, r2]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d001      	beq.n	8002880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e042      	b.n	8002906 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	223d      	movs	r2, #61	; 0x3d
 8002884:	2102      	movs	r1, #2
 8002886:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2101      	movs	r1, #1
 8002894:	430a      	orrs	r2, r1
 8002896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <HAL_TIM_Base_Start_IT+0xa8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00f      	beq.n	80028c2 <HAL_TIM_Base_Start_IT+0x5a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	05db      	lsls	r3, r3, #23
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d009      	beq.n	80028c2 <HAL_TIM_Base_Start_IT+0x5a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_TIM_Base_Start_IT+0xac>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_TIM_Base_Start_IT+0x5a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a16      	ldr	r2, [pc, #88]	; (8002918 <HAL_TIM_Base_Start_IT+0xb0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d116      	bne.n	80028f0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_TIM_Base_Start_IT+0xb4>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b06      	cmp	r3, #6
 80028d2:	d016      	beq.n	8002902 <HAL_TIM_Base_Start_IT+0x9a>
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	025b      	lsls	r3, r3, #9
 80028da:	429a      	cmp	r2, r3
 80028dc:	d011      	beq.n	8002902 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2101      	movs	r1, #1
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ee:	e008      	b.n	8002902 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e000      	b.n	8002904 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002902:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40000400 	.word	0x40000400
 8002918:	40014000 	.word	0x40014000
 800291c:	00010007 	.word	0x00010007

08002920 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2101      	movs	r1, #1
 8002934:	438a      	bics	r2, r1
 8002936:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <HAL_TIM_Base_Stop_IT+0x54>)
 8002940:	4013      	ands	r3, r2
 8002942:	d10d      	bne.n	8002960 <HAL_TIM_Base_Stop_IT+0x40>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_TIM_Base_Stop_IT+0x58>)
 800294c:	4013      	ands	r3, r2
 800294e:	d107      	bne.n	8002960 <HAL_TIM_Base_Stop_IT+0x40>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	438a      	bics	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	223d      	movs	r2, #61	; 0x3d
 8002964:	2101      	movs	r1, #1
 8002966:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	00001111 	.word	0x00001111
 8002978:	00000444 	.word	0x00000444

0800297c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d124      	bne.n	80029dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	2b02      	cmp	r3, #2
 800299e:	d11d      	bne.n	80029dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2203      	movs	r2, #3
 80029a6:	4252      	negs	r2, r2
 80029a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2203      	movs	r2, #3
 80029b8:	4013      	ands	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 f916 	bl	8002bf0 <HAL_TIM_IC_CaptureCallback>
 80029c4:	e007      	b.n	80029d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 f909 	bl	8002be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 f915 	bl	8002c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2204      	movs	r2, #4
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d125      	bne.n	8002a36 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2204      	movs	r2, #4
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d11e      	bne.n	8002a36 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2205      	movs	r2, #5
 80029fe:	4252      	negs	r2, r2
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2202      	movs	r2, #2
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	23c0      	movs	r3, #192	; 0xc0
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4013      	ands	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 f8e9 	bl	8002bf0 <HAL_TIM_IC_CaptureCallback>
 8002a1e:	e007      	b.n	8002a30 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 f8dc 	bl	8002be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f8e8 	bl	8002c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d124      	bne.n	8002a8e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d11d      	bne.n	8002a8e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2209      	movs	r2, #9
 8002a58:	4252      	negs	r2, r2
 8002a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d004      	beq.n	8002a78 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f8bd 	bl	8002bf0 <HAL_TIM_IC_CaptureCallback>
 8002a76:	e007      	b.n	8002a88 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 f8b0 	bl	8002be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f8bc 	bl	8002c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2210      	movs	r2, #16
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d125      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2210      	movs	r2, #16
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d11e      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2211      	movs	r2, #17
 8002ab0:	4252      	negs	r2, r2
 8002ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	23c0      	movs	r3, #192	; 0xc0
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f890 	bl	8002bf0 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e007      	b.n	8002ae2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 f883 	bl	8002be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 f88f 	bl	8002c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2201      	movs	r2, #1
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10f      	bne.n	8002b16 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d108      	bne.n	8002b16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	4252      	negs	r2, r2
 8002b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7fe f865 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d10f      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b80      	cmp	r3, #128	; 0x80
 8002b30:	d108      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2281      	movs	r2, #129	; 0x81
 8002b38:	4252      	negs	r2, r2
 8002b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 f8f6 	bl	8002d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	401a      	ands	r2, r3
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d10e      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <HAL_TIM_IRQHandler+0x260>)
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 f8e5 	bl	8002d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d10f      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d108      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2241      	movs	r2, #65	; 0x41
 8002b98:	4252      	negs	r2, r2
 8002b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 f836 	bl	8002c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2220      	movs	r2, #32
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d108      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2221      	movs	r2, #33	; 0x21
 8002bc6:	4252      	negs	r2, r2
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 f8a7 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b002      	add	sp, #8
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	fffffeff 	.word	0xfffffeff

08002be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b002      	add	sp, #8
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a34      	ldr	r2, [pc, #208]	; (8002d04 <TIM_Base_SetConfig+0xe4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d008      	beq.n	8002c4a <TIM_Base_SetConfig+0x2a>
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	05db      	lsls	r3, r3, #23
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0x2a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a30      	ldr	r2, [pc, #192]	; (8002d08 <TIM_Base_SetConfig+0xe8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2270      	movs	r2, #112	; 0x70
 8002c4e:	4393      	bics	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a29      	ldr	r2, [pc, #164]	; (8002d04 <TIM_Base_SetConfig+0xe4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d018      	beq.n	8002c96 <TIM_Base_SetConfig+0x76>
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	2380      	movs	r3, #128	; 0x80
 8002c68:	05db      	lsls	r3, r3, #23
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d013      	beq.n	8002c96 <TIM_Base_SetConfig+0x76>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <TIM_Base_SetConfig+0xe8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00f      	beq.n	8002c96 <TIM_Base_SetConfig+0x76>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a24      	ldr	r2, [pc, #144]	; (8002d0c <TIM_Base_SetConfig+0xec>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00b      	beq.n	8002c96 <TIM_Base_SetConfig+0x76>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <TIM_Base_SetConfig+0xf0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <TIM_Base_SetConfig+0x76>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <TIM_Base_SetConfig+0xf4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d003      	beq.n	8002c96 <TIM_Base_SetConfig+0x76>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <TIM_Base_SetConfig+0xf8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d108      	bne.n	8002ca8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a20      	ldr	r2, [pc, #128]	; (8002d1c <TIM_Base_SetConfig+0xfc>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	4393      	bics	r3, r2
 8002cae:	001a      	movs	r2, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <TIM_Base_SetConfig+0xe4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00b      	beq.n	8002cee <TIM_Base_SetConfig+0xce>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <TIM_Base_SetConfig+0xf0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <TIM_Base_SetConfig+0xce>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <TIM_Base_SetConfig+0xf4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d003      	beq.n	8002cee <TIM_Base_SetConfig+0xce>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <TIM_Base_SetConfig+0xf8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d103      	bne.n	8002cf6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	615a      	str	r2, [r3, #20]
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b004      	add	sp, #16
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40000400 	.word	0x40000400
 8002d0c:	40002000 	.word	0x40002000
 8002d10:	40014000 	.word	0x40014000
 8002d14:	40014400 	.word	0x40014400
 8002d18:	40014800 	.word	0x40014800
 8002d1c:	fffffcff 	.word	0xfffffcff

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e046      	b.n	8002df0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2288      	movs	r2, #136	; 0x88
 8002d66:	589b      	ldr	r3, [r3, r2]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d107      	bne.n	8002d7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2284      	movs	r2, #132	; 0x84
 8002d70:	2100      	movs	r1, #0
 8002d72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7fe f814 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2288      	movs	r2, #136	; 0x88
 8002d80:	2124      	movs	r1, #36	; 0x24
 8002d82:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2101      	movs	r1, #1
 8002d90:	438a      	bics	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 f9ae 	bl	80030f8 <UART_SetConfig>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e024      	b.n	8002df0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 fc5f 	bl	8003674 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	490d      	ldr	r1, [pc, #52]	; (8002df8 <HAL_UART_Init+0xa8>)
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	212a      	movs	r1, #42	; 0x2a
 8002dd2:	438a      	bics	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2101      	movs	r1, #1
 8002de2:	430a      	orrs	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f000 fcf7 	bl	80037dc <UART_CheckIdleState>
 8002dee:	0003      	movs	r3, r0
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b002      	add	sp, #8
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	ffffb7ff 	.word	0xffffb7ff

08002dfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	1dbb      	adds	r3, r7, #6
 8002e0a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2288      	movs	r2, #136	; 0x88
 8002e10:	589b      	ldr	r3, [r3, r2]
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d000      	beq.n	8002e18 <HAL_UART_Transmit+0x1c>
 8002e16:	e088      	b.n	8002f2a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_UART_Transmit+0x2a>
 8002e1e:	1dbb      	adds	r3, r7, #6
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e080      	b.n	8002f2c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	015b      	lsls	r3, r3, #5
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d109      	bne.n	8002e4a <HAL_UART_Transmit+0x4e>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2201      	movs	r2, #1
 8002e42:	4013      	ands	r3, r2
 8002e44:	d001      	beq.n	8002e4a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e070      	b.n	8002f2c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2290      	movs	r2, #144	; 0x90
 8002e4e:	2100      	movs	r1, #0
 8002e50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2288      	movs	r2, #136	; 0x88
 8002e56:	2121      	movs	r1, #33	; 0x21
 8002e58:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5a:	f7fe f96b 	bl	8001134 <HAL_GetTick>
 8002e5e:	0003      	movs	r3, r0
 8002e60:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1dba      	adds	r2, r7, #6
 8002e66:	2154      	movs	r1, #84	; 0x54
 8002e68:	8812      	ldrh	r2, [r2, #0]
 8002e6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1dba      	adds	r2, r7, #6
 8002e70:	2156      	movs	r1, #86	; 0x56
 8002e72:	8812      	ldrh	r2, [r2, #0]
 8002e74:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	015b      	lsls	r3, r3, #5
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d108      	bne.n	8002e94 <HAL_UART_Transmit+0x98>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d104      	bne.n	8002e94 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e003      	b.n	8002e9c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e9c:	e02c      	b.n	8002ef8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	0013      	movs	r3, r2
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	f000 fce4 	bl	8003878 <UART_WaitOnFlagUntilTimeout>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e039      	b.n	8002f2c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	05d2      	lsls	r2, r2, #23
 8002eca:	0dd2      	lsrs	r2, r2, #23
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	61bb      	str	r3, [r7, #24]
 8002ed4:	e007      	b.n	8002ee6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2256      	movs	r2, #86	; 0x56
 8002eea:	5a9b      	ldrh	r3, [r3, r2]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b299      	uxth	r1, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2256      	movs	r2, #86	; 0x56
 8002ef6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2256      	movs	r2, #86	; 0x56
 8002efc:	5a9b      	ldrh	r3, [r3, r2]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1cc      	bne.n	8002e9e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2140      	movs	r1, #64	; 0x40
 8002f12:	f000 fcb1 	bl	8003878 <UART_WaitOnFlagUntilTimeout>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e006      	b.n	8002f2c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2288      	movs	r2, #136	; 0x88
 8002f22:	2120      	movs	r1, #32
 8002f24:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
  }
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b008      	add	sp, #32
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	1dbb      	adds	r3, r7, #6
 8002f42:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	228c      	movs	r2, #140	; 0x8c
 8002f48:	589b      	ldr	r3, [r3, r2]
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d000      	beq.n	8002f50 <HAL_UART_Receive+0x1c>
 8002f4e:	e0cc      	b.n	80030ea <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_UART_Receive+0x2a>
 8002f56:	1dbb      	adds	r3, r7, #6
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0c4      	b.n	80030ec <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	015b      	lsls	r3, r3, #5
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d109      	bne.n	8002f82 <HAL_UART_Receive+0x4e>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d001      	beq.n	8002f82 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0b4      	b.n	80030ec <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2290      	movs	r2, #144	; 0x90
 8002f86:	2100      	movs	r1, #0
 8002f88:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	228c      	movs	r2, #140	; 0x8c
 8002f8e:	2122      	movs	r1, #34	; 0x22
 8002f90:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f98:	f7fe f8cc 	bl	8001134 <HAL_GetTick>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1dba      	adds	r2, r7, #6
 8002fa4:	215c      	movs	r1, #92	; 0x5c
 8002fa6:	8812      	ldrh	r2, [r2, #0]
 8002fa8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1dba      	adds	r2, r7, #6
 8002fae:	215e      	movs	r1, #94	; 0x5e
 8002fb0:	8812      	ldrh	r2, [r2, #0]
 8002fb2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	015b      	lsls	r3, r3, #5
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d10d      	bne.n	8002fdc <HAL_UART_Receive+0xa8>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <HAL_UART_Receive+0x9e>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2260      	movs	r2, #96	; 0x60
 8002fcc:	4949      	ldr	r1, [pc, #292]	; (80030f4 <HAL_UART_Receive+0x1c0>)
 8002fce:	5299      	strh	r1, [r3, r2]
 8002fd0:	e02e      	b.n	8003030 <HAL_UART_Receive+0xfc>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2260      	movs	r2, #96	; 0x60
 8002fd6:	21ff      	movs	r1, #255	; 0xff
 8002fd8:	5299      	strh	r1, [r3, r2]
 8002fda:	e029      	b.n	8003030 <HAL_UART_Receive+0xfc>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10d      	bne.n	8003000 <HAL_UART_Receive+0xcc>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <HAL_UART_Receive+0xc2>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2260      	movs	r2, #96	; 0x60
 8002ff0:	21ff      	movs	r1, #255	; 0xff
 8002ff2:	5299      	strh	r1, [r3, r2]
 8002ff4:	e01c      	b.n	8003030 <HAL_UART_Receive+0xfc>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2260      	movs	r2, #96	; 0x60
 8002ffa:	217f      	movs	r1, #127	; 0x7f
 8002ffc:	5299      	strh	r1, [r3, r2]
 8002ffe:	e017      	b.n	8003030 <HAL_UART_Receive+0xfc>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	055b      	lsls	r3, r3, #21
 8003008:	429a      	cmp	r2, r3
 800300a:	d10d      	bne.n	8003028 <HAL_UART_Receive+0xf4>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d104      	bne.n	800301e <HAL_UART_Receive+0xea>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2260      	movs	r2, #96	; 0x60
 8003018:	217f      	movs	r1, #127	; 0x7f
 800301a:	5299      	strh	r1, [r3, r2]
 800301c:	e008      	b.n	8003030 <HAL_UART_Receive+0xfc>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2260      	movs	r2, #96	; 0x60
 8003022:	213f      	movs	r1, #63	; 0x3f
 8003024:	5299      	strh	r1, [r3, r2]
 8003026:	e003      	b.n	8003030 <HAL_UART_Receive+0xfc>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2260      	movs	r2, #96	; 0x60
 800302c:	2100      	movs	r1, #0
 800302e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003030:	2312      	movs	r3, #18
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	2160      	movs	r1, #96	; 0x60
 8003038:	5a52      	ldrh	r2, [r2, r1]
 800303a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	015b      	lsls	r3, r3, #5
 8003044:	429a      	cmp	r2, r3
 8003046:	d108      	bne.n	800305a <HAL_UART_Receive+0x126>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	e003      	b.n	8003062 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003062:	e036      	b.n	80030d2 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	0013      	movs	r3, r2
 800306e:	2200      	movs	r2, #0
 8003070:	2120      	movs	r1, #32
 8003072:	f000 fc01 	bl	8003878 <UART_WaitOnFlagUntilTimeout>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d001      	beq.n	800307e <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e036      	b.n	80030ec <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10e      	bne.n	80030a2 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	b29b      	uxth	r3, r3
 800308c:	2212      	movs	r2, #18
 800308e:	18ba      	adds	r2, r7, r2
 8003090:	8812      	ldrh	r2, [r2, #0]
 8003092:	4013      	ands	r3, r2
 8003094:	b29a      	uxth	r2, r3
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	3302      	adds	r3, #2
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	e00e      	b.n	80030c0 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2212      	movs	r2, #18
 80030ac:	18ba      	adds	r2, r7, r2
 80030ae:	8812      	ldrh	r2, [r2, #0]
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	4013      	ands	r3, r2
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3301      	adds	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	225e      	movs	r2, #94	; 0x5e
 80030c4:	5a9b      	ldrh	r3, [r3, r2]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b299      	uxth	r1, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	225e      	movs	r2, #94	; 0x5e
 80030d0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	225e      	movs	r2, #94	; 0x5e
 80030d6:	5a9b      	ldrh	r3, [r3, r2]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1c2      	bne.n	8003064 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	228c      	movs	r2, #140	; 0x8c
 80030e2:	2120      	movs	r1, #32
 80030e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b008      	add	sp, #32
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	000001ff 	.word	0x000001ff

080030f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b090      	sub	sp, #64	; 0x40
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003100:	231a      	movs	r3, #26
 8003102:	2220      	movs	r2, #32
 8003104:	189b      	adds	r3, r3, r2
 8003106:	19db      	adds	r3, r3, r7
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4aaf      	ldr	r2, [pc, #700]	; (80033e8 <UART_SetConfig+0x2f0>)
 800312c:	4013      	ands	r3, r2
 800312e:	0019      	movs	r1, r3
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003136:	430b      	orrs	r3, r1
 8003138:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4aaa      	ldr	r2, [pc, #680]	; (80033ec <UART_SetConfig+0x2f4>)
 8003142:	4013      	ands	r3, r2
 8003144:	0018      	movs	r0, r3
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	68d9      	ldr	r1, [r3, #12]
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	0003      	movs	r3, r0
 8003150:	430b      	orrs	r3, r1
 8003152:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4aa4      	ldr	r2, [pc, #656]	; (80033f0 <UART_SetConfig+0x2f8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800316a:	4313      	orrs	r3, r2
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a9f      	ldr	r2, [pc, #636]	; (80033f4 <UART_SetConfig+0x2fc>)
 8003176:	4013      	ands	r3, r2
 8003178:	0019      	movs	r1, r3
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	430b      	orrs	r3, r1
 8003182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	220f      	movs	r2, #15
 800318c:	4393      	bics	r3, r2
 800318e:	0018      	movs	r0, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	0003      	movs	r3, r0
 800319a:	430b      	orrs	r3, r1
 800319c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a95      	ldr	r2, [pc, #596]	; (80033f8 <UART_SetConfig+0x300>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d131      	bne.n	800320c <UART_SetConfig+0x114>
 80031a8:	4b94      	ldr	r3, [pc, #592]	; (80033fc <UART_SetConfig+0x304>)
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	2203      	movs	r2, #3
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d01d      	beq.n	80031f0 <UART_SetConfig+0xf8>
 80031b4:	d823      	bhi.n	80031fe <UART_SetConfig+0x106>
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d00c      	beq.n	80031d4 <UART_SetConfig+0xdc>
 80031ba:	d820      	bhi.n	80031fe <UART_SetConfig+0x106>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <UART_SetConfig+0xce>
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d00e      	beq.n	80031e2 <UART_SetConfig+0xea>
 80031c4:	e01b      	b.n	80031fe <UART_SetConfig+0x106>
 80031c6:	231b      	movs	r3, #27
 80031c8:	2220      	movs	r2, #32
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	19db      	adds	r3, r3, r7
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e0b4      	b.n	800333e <UART_SetConfig+0x246>
 80031d4:	231b      	movs	r3, #27
 80031d6:	2220      	movs	r2, #32
 80031d8:	189b      	adds	r3, r3, r2
 80031da:	19db      	adds	r3, r3, r7
 80031dc:	2202      	movs	r2, #2
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e0ad      	b.n	800333e <UART_SetConfig+0x246>
 80031e2:	231b      	movs	r3, #27
 80031e4:	2220      	movs	r2, #32
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	19db      	adds	r3, r3, r7
 80031ea:	2204      	movs	r2, #4
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e0a6      	b.n	800333e <UART_SetConfig+0x246>
 80031f0:	231b      	movs	r3, #27
 80031f2:	2220      	movs	r2, #32
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	19db      	adds	r3, r3, r7
 80031f8:	2208      	movs	r2, #8
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e09f      	b.n	800333e <UART_SetConfig+0x246>
 80031fe:	231b      	movs	r3, #27
 8003200:	2220      	movs	r2, #32
 8003202:	189b      	adds	r3, r3, r2
 8003204:	19db      	adds	r3, r3, r7
 8003206:	2210      	movs	r2, #16
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e098      	b.n	800333e <UART_SetConfig+0x246>
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a7b      	ldr	r2, [pc, #492]	; (8003400 <UART_SetConfig+0x308>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d131      	bne.n	800327a <UART_SetConfig+0x182>
 8003216:	4b79      	ldr	r3, [pc, #484]	; (80033fc <UART_SetConfig+0x304>)
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	220c      	movs	r2, #12
 800321c:	4013      	ands	r3, r2
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d01d      	beq.n	800325e <UART_SetConfig+0x166>
 8003222:	d823      	bhi.n	800326c <UART_SetConfig+0x174>
 8003224:	2b08      	cmp	r3, #8
 8003226:	d00c      	beq.n	8003242 <UART_SetConfig+0x14a>
 8003228:	d820      	bhi.n	800326c <UART_SetConfig+0x174>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <UART_SetConfig+0x13c>
 800322e:	2b04      	cmp	r3, #4
 8003230:	d00e      	beq.n	8003250 <UART_SetConfig+0x158>
 8003232:	e01b      	b.n	800326c <UART_SetConfig+0x174>
 8003234:	231b      	movs	r3, #27
 8003236:	2220      	movs	r2, #32
 8003238:	189b      	adds	r3, r3, r2
 800323a:	19db      	adds	r3, r3, r7
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e07d      	b.n	800333e <UART_SetConfig+0x246>
 8003242:	231b      	movs	r3, #27
 8003244:	2220      	movs	r2, #32
 8003246:	189b      	adds	r3, r3, r2
 8003248:	19db      	adds	r3, r3, r7
 800324a:	2202      	movs	r2, #2
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e076      	b.n	800333e <UART_SetConfig+0x246>
 8003250:	231b      	movs	r3, #27
 8003252:	2220      	movs	r2, #32
 8003254:	189b      	adds	r3, r3, r2
 8003256:	19db      	adds	r3, r3, r7
 8003258:	2204      	movs	r2, #4
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e06f      	b.n	800333e <UART_SetConfig+0x246>
 800325e:	231b      	movs	r3, #27
 8003260:	2220      	movs	r2, #32
 8003262:	189b      	adds	r3, r3, r2
 8003264:	19db      	adds	r3, r3, r7
 8003266:	2208      	movs	r2, #8
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e068      	b.n	800333e <UART_SetConfig+0x246>
 800326c:	231b      	movs	r3, #27
 800326e:	2220      	movs	r2, #32
 8003270:	189b      	adds	r3, r3, r2
 8003272:	19db      	adds	r3, r3, r7
 8003274:	2210      	movs	r2, #16
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e061      	b.n	800333e <UART_SetConfig+0x246>
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a61      	ldr	r2, [pc, #388]	; (8003404 <UART_SetConfig+0x30c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d106      	bne.n	8003292 <UART_SetConfig+0x19a>
 8003284:	231b      	movs	r3, #27
 8003286:	2220      	movs	r2, #32
 8003288:	189b      	adds	r3, r3, r2
 800328a:	19db      	adds	r3, r3, r7
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e055      	b.n	800333e <UART_SetConfig+0x246>
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a5c      	ldr	r2, [pc, #368]	; (8003408 <UART_SetConfig+0x310>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d106      	bne.n	80032aa <UART_SetConfig+0x1b2>
 800329c:	231b      	movs	r3, #27
 800329e:	2220      	movs	r2, #32
 80032a0:	189b      	adds	r3, r3, r2
 80032a2:	19db      	adds	r3, r3, r7
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e049      	b.n	800333e <UART_SetConfig+0x246>
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a50      	ldr	r2, [pc, #320]	; (80033f0 <UART_SetConfig+0x2f8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d13e      	bne.n	8003332 <UART_SetConfig+0x23a>
 80032b4:	4b51      	ldr	r3, [pc, #324]	; (80033fc <UART_SetConfig+0x304>)
 80032b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032b8:	23c0      	movs	r3, #192	; 0xc0
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	4013      	ands	r3, r2
 80032be:	22c0      	movs	r2, #192	; 0xc0
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d027      	beq.n	8003316 <UART_SetConfig+0x21e>
 80032c6:	22c0      	movs	r2, #192	; 0xc0
 80032c8:	0112      	lsls	r2, r2, #4
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d82a      	bhi.n	8003324 <UART_SetConfig+0x22c>
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	0112      	lsls	r2, r2, #4
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d011      	beq.n	80032fa <UART_SetConfig+0x202>
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	0112      	lsls	r2, r2, #4
 80032da:	4293      	cmp	r3, r2
 80032dc:	d822      	bhi.n	8003324 <UART_SetConfig+0x22c>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <UART_SetConfig+0x1f4>
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	00d2      	lsls	r2, r2, #3
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00e      	beq.n	8003308 <UART_SetConfig+0x210>
 80032ea:	e01b      	b.n	8003324 <UART_SetConfig+0x22c>
 80032ec:	231b      	movs	r3, #27
 80032ee:	2220      	movs	r2, #32
 80032f0:	189b      	adds	r3, r3, r2
 80032f2:	19db      	adds	r3, r3, r7
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e021      	b.n	800333e <UART_SetConfig+0x246>
 80032fa:	231b      	movs	r3, #27
 80032fc:	2220      	movs	r2, #32
 80032fe:	189b      	adds	r3, r3, r2
 8003300:	19db      	adds	r3, r3, r7
 8003302:	2202      	movs	r2, #2
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	e01a      	b.n	800333e <UART_SetConfig+0x246>
 8003308:	231b      	movs	r3, #27
 800330a:	2220      	movs	r2, #32
 800330c:	189b      	adds	r3, r3, r2
 800330e:	19db      	adds	r3, r3, r7
 8003310:	2204      	movs	r2, #4
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e013      	b.n	800333e <UART_SetConfig+0x246>
 8003316:	231b      	movs	r3, #27
 8003318:	2220      	movs	r2, #32
 800331a:	189b      	adds	r3, r3, r2
 800331c:	19db      	adds	r3, r3, r7
 800331e:	2208      	movs	r2, #8
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e00c      	b.n	800333e <UART_SetConfig+0x246>
 8003324:	231b      	movs	r3, #27
 8003326:	2220      	movs	r2, #32
 8003328:	189b      	adds	r3, r3, r2
 800332a:	19db      	adds	r3, r3, r7
 800332c:	2210      	movs	r2, #16
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e005      	b.n	800333e <UART_SetConfig+0x246>
 8003332:	231b      	movs	r3, #27
 8003334:	2220      	movs	r2, #32
 8003336:	189b      	adds	r3, r3, r2
 8003338:	19db      	adds	r3, r3, r7
 800333a:	2210      	movs	r2, #16
 800333c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2b      	ldr	r2, [pc, #172]	; (80033f0 <UART_SetConfig+0x2f8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d000      	beq.n	800334a <UART_SetConfig+0x252>
 8003348:	e0a9      	b.n	800349e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800334a:	231b      	movs	r3, #27
 800334c:	2220      	movs	r2, #32
 800334e:	189b      	adds	r3, r3, r2
 8003350:	19db      	adds	r3, r3, r7
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d015      	beq.n	8003384 <UART_SetConfig+0x28c>
 8003358:	dc18      	bgt.n	800338c <UART_SetConfig+0x294>
 800335a:	2b04      	cmp	r3, #4
 800335c:	d00d      	beq.n	800337a <UART_SetConfig+0x282>
 800335e:	dc15      	bgt.n	800338c <UART_SetConfig+0x294>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <UART_SetConfig+0x272>
 8003364:	2b02      	cmp	r3, #2
 8003366:	d005      	beq.n	8003374 <UART_SetConfig+0x27c>
 8003368:	e010      	b.n	800338c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800336a:	f7fe fe47 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 800336e:	0003      	movs	r3, r0
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003372:	e014      	b.n	800339e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <UART_SetConfig+0x314>)
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003378:	e011      	b.n	800339e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fdb3 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 800337e:	0003      	movs	r3, r0
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003382:	e00c      	b.n	800339e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800338a:	e008      	b.n	800339e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003390:	231a      	movs	r3, #26
 8003392:	2220      	movs	r2, #32
 8003394:	189b      	adds	r3, r3, r2
 8003396:	19db      	adds	r3, r3, r7
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
        break;
 800339c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800339e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d100      	bne.n	80033a6 <UART_SetConfig+0x2ae>
 80033a4:	e14b      	b.n	800363e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <UART_SetConfig+0x318>)
 80033ac:	0052      	lsls	r2, r2, #1
 80033ae:	5ad3      	ldrh	r3, [r2, r3]
 80033b0:	0019      	movs	r1, r3
 80033b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033b4:	f7fc feb8 	bl	8000128 <__udivsi3>
 80033b8:	0003      	movs	r3, r0
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	0013      	movs	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	189b      	adds	r3, r3, r2
 80033c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d305      	bcc.n	80033d8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d91d      	bls.n	8003414 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80033d8:	231a      	movs	r3, #26
 80033da:	2220      	movs	r2, #32
 80033dc:	189b      	adds	r3, r3, r2
 80033de:	19db      	adds	r3, r3, r7
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	e12b      	b.n	800363e <UART_SetConfig+0x546>
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	cfff69f3 	.word	0xcfff69f3
 80033ec:	ffffcfff 	.word	0xffffcfff
 80033f0:	40008000 	.word	0x40008000
 80033f4:	11fff4ff 	.word	0x11fff4ff
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	00f42400 	.word	0x00f42400
 8003410:	08004654 	.word	0x08004654
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	2300      	movs	r3, #0
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003420:	4b92      	ldr	r3, [pc, #584]	; (800366c <UART_SetConfig+0x574>)
 8003422:	0052      	lsls	r2, r2, #1
 8003424:	5ad3      	ldrh	r3, [r2, r3]
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	69b8      	ldr	r0, [r7, #24]
 8003432:	69f9      	ldr	r1, [r7, #28]
 8003434:	f7fc ffee 	bl	8000414 <__aeabi_uldivmod>
 8003438:	0002      	movs	r2, r0
 800343a:	000b      	movs	r3, r1
 800343c:	0e11      	lsrs	r1, r2, #24
 800343e:	021d      	lsls	r5, r3, #8
 8003440:	430d      	orrs	r5, r1
 8003442:	0214      	lsls	r4, r2, #8
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68b8      	ldr	r0, [r7, #8]
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	1900      	adds	r0, r0, r4
 8003456:	4169      	adcs	r1, r5
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f7fc ffd5 	bl	8000414 <__aeabi_uldivmod>
 800346a:	0002      	movs	r2, r0
 800346c:	000b      	movs	r3, r1
 800346e:	0013      	movs	r3, r2
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003474:	23c0      	movs	r3, #192	; 0xc0
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	429a      	cmp	r2, r3
 800347a:	d309      	bcc.n	8003490 <UART_SetConfig+0x398>
 800347c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	035b      	lsls	r3, r3, #13
 8003482:	429a      	cmp	r2, r3
 8003484:	d204      	bcs.n	8003490 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	e0d6      	b.n	800363e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003490:	231a      	movs	r3, #26
 8003492:	2220      	movs	r2, #32
 8003494:	189b      	adds	r3, r3, r2
 8003496:	19db      	adds	r3, r3, r7
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e0cf      	b.n	800363e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	69da      	ldr	r2, [r3, #28]
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d000      	beq.n	80034ac <UART_SetConfig+0x3b4>
 80034aa:	e070      	b.n	800358e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80034ac:	231b      	movs	r3, #27
 80034ae:	2220      	movs	r2, #32
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	19db      	adds	r3, r3, r7
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d015      	beq.n	80034e6 <UART_SetConfig+0x3ee>
 80034ba:	dc18      	bgt.n	80034ee <UART_SetConfig+0x3f6>
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d00d      	beq.n	80034dc <UART_SetConfig+0x3e4>
 80034c0:	dc15      	bgt.n	80034ee <UART_SetConfig+0x3f6>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <UART_SetConfig+0x3d4>
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d005      	beq.n	80034d6 <UART_SetConfig+0x3de>
 80034ca:	e010      	b.n	80034ee <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034cc:	f7fe fd96 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 80034d0:	0003      	movs	r3, r0
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034d4:	e014      	b.n	8003500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d6:	4b66      	ldr	r3, [pc, #408]	; (8003670 <UART_SetConfig+0x578>)
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034da:	e011      	b.n	8003500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034dc:	f7fe fd02 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 80034e0:	0003      	movs	r3, r0
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034e4:	e00c      	b.n	8003500 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034ec:	e008      	b.n	8003500 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034f2:	231a      	movs	r3, #26
 80034f4:	2220      	movs	r2, #32
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	19db      	adds	r3, r3, r7
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
        break;
 80034fe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003502:	2b00      	cmp	r3, #0
 8003504:	d100      	bne.n	8003508 <UART_SetConfig+0x410>
 8003506:	e09a      	b.n	800363e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800350c:	4b57      	ldr	r3, [pc, #348]	; (800366c <UART_SetConfig+0x574>)
 800350e:	0052      	lsls	r2, r2, #1
 8003510:	5ad3      	ldrh	r3, [r2, r3]
 8003512:	0019      	movs	r1, r3
 8003514:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003516:	f7fc fe07 	bl	8000128 <__udivsi3>
 800351a:	0003      	movs	r3, r0
 800351c:	005a      	lsls	r2, r3, #1
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	18d2      	adds	r2, r2, r3
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	0019      	movs	r1, r3
 800352c:	0010      	movs	r0, r2
 800352e:	f7fc fdfb 	bl	8000128 <__udivsi3>
 8003532:	0003      	movs	r3, r0
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	2b0f      	cmp	r3, #15
 800353a:	d921      	bls.n	8003580 <UART_SetConfig+0x488>
 800353c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	025b      	lsls	r3, r3, #9
 8003542:	429a      	cmp	r2, r3
 8003544:	d21c      	bcs.n	8003580 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	b29a      	uxth	r2, r3
 800354a:	200e      	movs	r0, #14
 800354c:	2420      	movs	r4, #32
 800354e:	1903      	adds	r3, r0, r4
 8003550:	19db      	adds	r3, r3, r7
 8003552:	210f      	movs	r1, #15
 8003554:	438a      	bics	r2, r1
 8003556:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	b29b      	uxth	r3, r3
 800355e:	2207      	movs	r2, #7
 8003560:	4013      	ands	r3, r2
 8003562:	b299      	uxth	r1, r3
 8003564:	1903      	adds	r3, r0, r4
 8003566:	19db      	adds	r3, r3, r7
 8003568:	1902      	adds	r2, r0, r4
 800356a:	19d2      	adds	r2, r2, r7
 800356c:	8812      	ldrh	r2, [r2, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1902      	adds	r2, r0, r4
 8003578:	19d2      	adds	r2, r2, r7
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	e05e      	b.n	800363e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003580:	231a      	movs	r3, #26
 8003582:	2220      	movs	r2, #32
 8003584:	189b      	adds	r3, r3, r2
 8003586:	19db      	adds	r3, r3, r7
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e057      	b.n	800363e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800358e:	231b      	movs	r3, #27
 8003590:	2220      	movs	r2, #32
 8003592:	189b      	adds	r3, r3, r2
 8003594:	19db      	adds	r3, r3, r7
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d015      	beq.n	80035c8 <UART_SetConfig+0x4d0>
 800359c:	dc18      	bgt.n	80035d0 <UART_SetConfig+0x4d8>
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d00d      	beq.n	80035be <UART_SetConfig+0x4c6>
 80035a2:	dc15      	bgt.n	80035d0 <UART_SetConfig+0x4d8>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <UART_SetConfig+0x4b6>
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d005      	beq.n	80035b8 <UART_SetConfig+0x4c0>
 80035ac:	e010      	b.n	80035d0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ae:	f7fe fd25 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 80035b2:	0003      	movs	r3, r0
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035b6:	e014      	b.n	80035e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b8:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <UART_SetConfig+0x578>)
 80035ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035bc:	e011      	b.n	80035e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7fe fc91 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 80035c2:	0003      	movs	r3, r0
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035c6:	e00c      	b.n	80035e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035ce:	e008      	b.n	80035e2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80035d4:	231a      	movs	r3, #26
 80035d6:	2220      	movs	r2, #32
 80035d8:	189b      	adds	r3, r3, r2
 80035da:	19db      	adds	r3, r3, r7
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
        break;
 80035e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80035e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02a      	beq.n	800363e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ec:	4b1f      	ldr	r3, [pc, #124]	; (800366c <UART_SetConfig+0x574>)
 80035ee:	0052      	lsls	r2, r2, #1
 80035f0:	5ad3      	ldrh	r3, [r2, r3]
 80035f2:	0019      	movs	r1, r3
 80035f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035f6:	f7fc fd97 	bl	8000128 <__udivsi3>
 80035fa:	0003      	movs	r3, r0
 80035fc:	001a      	movs	r2, r3
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	18d2      	adds	r2, r2, r3
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	0019      	movs	r1, r3
 800360c:	0010      	movs	r0, r2
 800360e:	f7fc fd8b 	bl	8000128 <__udivsi3>
 8003612:	0003      	movs	r3, r0
 8003614:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d90a      	bls.n	8003632 <UART_SetConfig+0x53a>
 800361c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	025b      	lsls	r3, r3, #9
 8003622:	429a      	cmp	r2, r3
 8003624:	d205      	bcs.n	8003632 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	b29a      	uxth	r2, r3
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60da      	str	r2, [r3, #12]
 8003630:	e005      	b.n	800363e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003632:	231a      	movs	r3, #26
 8003634:	2220      	movs	r2, #32
 8003636:	189b      	adds	r3, r3, r2
 8003638:	19db      	adds	r3, r3, r7
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	226a      	movs	r2, #106	; 0x6a
 8003642:	2101      	movs	r1, #1
 8003644:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	2268      	movs	r2, #104	; 0x68
 800364a:	2101      	movs	r1, #1
 800364c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	2200      	movs	r2, #0
 8003652:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	2200      	movs	r2, #0
 8003658:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800365a:	231a      	movs	r3, #26
 800365c:	2220      	movs	r2, #32
 800365e:	189b      	adds	r3, r3, r2
 8003660:	19db      	adds	r3, r3, r7
 8003662:	781b      	ldrb	r3, [r3, #0]
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	b010      	add	sp, #64	; 0x40
 800366a:	bdb0      	pop	{r4, r5, r7, pc}
 800366c:	08004654 	.word	0x08004654
 8003670:	00f42400 	.word	0x00f42400

08003674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	2201      	movs	r2, #1
 8003682:	4013      	ands	r3, r2
 8003684:	d00b      	beq.n	800369e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a4a      	ldr	r2, [pc, #296]	; (80037b8 <UART_AdvFeatureConfig+0x144>)
 800368e:	4013      	ands	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	2202      	movs	r2, #2
 80036a4:	4013      	ands	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4a43      	ldr	r2, [pc, #268]	; (80037bc <UART_AdvFeatureConfig+0x148>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	2204      	movs	r2, #4
 80036c6:	4013      	ands	r3, r2
 80036c8:	d00b      	beq.n	80036e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <UART_AdvFeatureConfig+0x14c>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	2208      	movs	r2, #8
 80036e8:	4013      	ands	r3, r2
 80036ea:	d00b      	beq.n	8003704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a34      	ldr	r2, [pc, #208]	; (80037c4 <UART_AdvFeatureConfig+0x150>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	0019      	movs	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	2210      	movs	r2, #16
 800370a:	4013      	ands	r3, r2
 800370c:	d00b      	beq.n	8003726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a2c      	ldr	r2, [pc, #176]	; (80037c8 <UART_AdvFeatureConfig+0x154>)
 8003716:	4013      	ands	r3, r2
 8003718:	0019      	movs	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	2220      	movs	r2, #32
 800372c:	4013      	ands	r3, r2
 800372e:	d00b      	beq.n	8003748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	4a25      	ldr	r2, [pc, #148]	; (80037cc <UART_AdvFeatureConfig+0x158>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	2240      	movs	r2, #64	; 0x40
 800374e:	4013      	ands	r3, r2
 8003750:	d01d      	beq.n	800378e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <UART_AdvFeatureConfig+0x15c>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	035b      	lsls	r3, r3, #13
 8003772:	429a      	cmp	r2, r3
 8003774:	d10b      	bne.n	800378e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <UART_AdvFeatureConfig+0x160>)
 800377e:	4013      	ands	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	4013      	ands	r3, r2
 8003796:	d00b      	beq.n	80037b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <UART_AdvFeatureConfig+0x164>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	0019      	movs	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  }
}
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	fffdffff 	.word	0xfffdffff
 80037bc:	fffeffff 	.word	0xfffeffff
 80037c0:	fffbffff 	.word	0xfffbffff
 80037c4:	ffff7fff 	.word	0xffff7fff
 80037c8:	ffffefff 	.word	0xffffefff
 80037cc:	ffffdfff 	.word	0xffffdfff
 80037d0:	ffefffff 	.word	0xffefffff
 80037d4:	ff9fffff 	.word	0xff9fffff
 80037d8:	fff7ffff 	.word	0xfff7ffff

080037dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2290      	movs	r2, #144	; 0x90
 80037e8:	2100      	movs	r1, #0
 80037ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037ec:	f7fd fca2 	bl	8001134 <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2208      	movs	r2, #8
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d10c      	bne.n	800381c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	0391      	lsls	r1, r2, #14
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	4a1a      	ldr	r2, [pc, #104]	; (8003874 <UART_CheckIdleState+0x98>)
 800380c:	9200      	str	r2, [sp, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	f000 f832 	bl	8003878 <UART_WaitOnFlagUntilTimeout>
 8003814:	1e03      	subs	r3, r0, #0
 8003816:	d001      	beq.n	800381c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e026      	b.n	800386a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2204      	movs	r2, #4
 8003824:	4013      	ands	r3, r2
 8003826:	2b04      	cmp	r3, #4
 8003828:	d10c      	bne.n	8003844 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2280      	movs	r2, #128	; 0x80
 800382e:	03d1      	lsls	r1, r2, #15
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4a10      	ldr	r2, [pc, #64]	; (8003874 <UART_CheckIdleState+0x98>)
 8003834:	9200      	str	r2, [sp, #0]
 8003836:	2200      	movs	r2, #0
 8003838:	f000 f81e 	bl	8003878 <UART_WaitOnFlagUntilTimeout>
 800383c:	1e03      	subs	r3, r0, #0
 800383e:	d001      	beq.n	8003844 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e012      	b.n	800386a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2288      	movs	r2, #136	; 0x88
 8003848:	2120      	movs	r1, #32
 800384a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	228c      	movs	r2, #140	; 0x8c
 8003850:	2120      	movs	r1, #32
 8003852:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2284      	movs	r2, #132	; 0x84
 8003864:	2100      	movs	r1, #0
 8003866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b004      	add	sp, #16
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	01ffffff 	.word	0x01ffffff

08003878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b094      	sub	sp, #80	; 0x50
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	1dfb      	adds	r3, r7, #7
 8003886:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003888:	e0a7      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800388c:	3301      	adds	r3, #1
 800388e:	d100      	bne.n	8003892 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003890:	e0a3      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003892:	f7fd fc4f 	bl	8001134 <HAL_GetTick>
 8003896:	0002      	movs	r2, r0
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d13f      	bne.n	8003928 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
 80038b2:	2301      	movs	r3, #1
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	494e      	ldr	r1, [pc, #312]	; (8003a04 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80038ca:	400a      	ands	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	f383 8810 	msr	PRIMASK, r3
}
 80038d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038da:	f3ef 8310 	mrs	r3, PRIMASK
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	643b      	str	r3, [r7, #64]	; 0x40
 80038e4:	2301      	movs	r3, #1
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	438a      	bics	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	f383 8810 	msr	PRIMASK, r3
}
 800390a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2288      	movs	r2, #136	; 0x88
 8003910:	2120      	movs	r1, #32
 8003912:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	228c      	movs	r2, #140	; 0x8c
 8003918:	2120      	movs	r1, #32
 800391a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2284      	movs	r2, #132	; 0x84
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e069      	b.n	80039fc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2204      	movs	r2, #4
 8003930:	4013      	ands	r3, r2
 8003932:	d052      	beq.n	80039da <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	401a      	ands	r2, r3
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	429a      	cmp	r2, r3
 8003946:	d148      	bne.n	80039da <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	0112      	lsls	r2, r2, #4
 8003950:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003952:	f3ef 8310 	mrs	r3, PRIMASK
 8003956:	613b      	str	r3, [r7, #16]
  return(result);
 8003958:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800395c:	2301      	movs	r3, #1
 800395e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f383 8810 	msr	PRIMASK, r3
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4924      	ldr	r1, [pc, #144]	; (8003a04 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003974:	400a      	ands	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f383 8810 	msr	PRIMASK, r3
}
 8003982:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003984:	f3ef 8310 	mrs	r3, PRIMASK
 8003988:	61fb      	str	r3, [r7, #28]
  return(result);
 800398a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398c:	64bb      	str	r3, [r7, #72]	; 0x48
 800398e:	2301      	movs	r3, #1
 8003990:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f383 8810 	msr	PRIMASK, r3
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2101      	movs	r1, #1
 80039a6:	438a      	bics	r2, r1
 80039a8:	609a      	str	r2, [r3, #8]
 80039aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	f383 8810 	msr	PRIMASK, r3
}
 80039b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2288      	movs	r2, #136	; 0x88
 80039ba:	2120      	movs	r1, #32
 80039bc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	228c      	movs	r2, #140	; 0x8c
 80039c2:	2120      	movs	r1, #32
 80039c4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2290      	movs	r2, #144	; 0x90
 80039ca:	2120      	movs	r1, #32
 80039cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2284      	movs	r2, #132	; 0x84
 80039d2:	2100      	movs	r1, #0
 80039d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e010      	b.n	80039fc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	4013      	ands	r3, r2
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	425a      	negs	r2, r3
 80039ea:	4153      	adcs	r3, r2
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	001a      	movs	r2, r3
 80039f0:	1dfb      	adds	r3, r7, #7
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d100      	bne.n	80039fa <UART_WaitOnFlagUntilTimeout+0x182>
 80039f8:	e747      	b.n	800388a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b014      	add	sp, #80	; 0x50
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	fffffe5f 	.word	0xfffffe5f

08003a08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2284      	movs	r2, #132	; 0x84
 8003a14:	5c9b      	ldrb	r3, [r3, r2]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_UARTEx_DisableFifoMode+0x16>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e027      	b.n	8003a6e <HAL_UARTEx_DisableFifoMode+0x66>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2284      	movs	r2, #132	; 0x84
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2288      	movs	r2, #136	; 0x88
 8003a2a:	2124      	movs	r1, #36	; 0x24
 8003a2c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2101      	movs	r1, #1
 8003a42:	438a      	bics	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4a0b      	ldr	r2, [pc, #44]	; (8003a78 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2288      	movs	r2, #136	; 0x88
 8003a60:	2120      	movs	r1, #32
 8003a62:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2284      	movs	r2, #132	; 0x84
 8003a68:	2100      	movs	r1, #0
 8003a6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	0018      	movs	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b004      	add	sp, #16
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	dfffffff 	.word	0xdfffffff

08003a7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2284      	movs	r2, #132	; 0x84
 8003a8a:	5c9b      	ldrb	r3, [r3, r2]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e02e      	b.n	8003af2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2284      	movs	r2, #132	; 0x84
 8003a98:	2101      	movs	r1, #1
 8003a9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2288      	movs	r2, #136	; 0x88
 8003aa0:	2124      	movs	r1, #36	; 0x24
 8003aa2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	438a      	bics	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	08d9      	lsrs	r1, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 f854 	bl	8003b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2288      	movs	r2, #136	; 0x88
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2284      	movs	r2, #132	; 0x84
 8003aec:	2100      	movs	r1, #0
 8003aee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b004      	add	sp, #16
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2284      	movs	r2, #132	; 0x84
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e02f      	b.n	8003b74 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2284      	movs	r2, #132	; 0x84
 8003b18:	2101      	movs	r1, #1
 8003b1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2288      	movs	r2, #136	; 0x88
 8003b20:	2124      	movs	r1, #36	; 0x24
 8003b22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2101      	movs	r1, #1
 8003b38:	438a      	bics	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	0018      	movs	r0, r3
 8003b56:	f000 f813 	bl	8003b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2288      	movs	r2, #136	; 0x88
 8003b66:	2120      	movs	r1, #32
 8003b68:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2284      	movs	r2, #132	; 0x84
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	f1ffffff 	.word	0xf1ffffff

08003b80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d108      	bne.n	8003ba2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	226a      	movs	r2, #106	; 0x6a
 8003b94:	2101      	movs	r1, #1
 8003b96:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2268      	movs	r2, #104	; 0x68
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ba0:	e043      	b.n	8003c2a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ba2:	260f      	movs	r6, #15
 8003ba4:	19bb      	adds	r3, r7, r6
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003baa:	200e      	movs	r0, #14
 8003bac:	183b      	adds	r3, r7, r0
 8003bae:	2208      	movs	r2, #8
 8003bb0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	0e5b      	lsrs	r3, r3, #25
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	240d      	movs	r4, #13
 8003bbe:	193b      	adds	r3, r7, r4
 8003bc0:	2107      	movs	r1, #7
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	0f5b      	lsrs	r3, r3, #29
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	250c      	movs	r5, #12
 8003bd2:	197b      	adds	r3, r7, r5
 8003bd4:	2107      	movs	r1, #7
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bda:	183b      	adds	r3, r7, r0
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	197a      	adds	r2, r7, r5
 8003be0:	7812      	ldrb	r2, [r2, #0]
 8003be2:	4914      	ldr	r1, [pc, #80]	; (8003c34 <UARTEx_SetNbDataToProcess+0xb4>)
 8003be4:	5c8a      	ldrb	r2, [r1, r2]
 8003be6:	435a      	muls	r2, r3
 8003be8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003bea:	197b      	adds	r3, r7, r5
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <UARTEx_SetNbDataToProcess+0xb8>)
 8003bf0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	f7fc fb22 	bl	800023c <__divsi3>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	b299      	uxth	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	226a      	movs	r2, #106	; 0x6a
 8003c00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c02:	19bb      	adds	r3, r7, r6
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	193a      	adds	r2, r7, r4
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	490a      	ldr	r1, [pc, #40]	; (8003c34 <UARTEx_SetNbDataToProcess+0xb4>)
 8003c0c:	5c8a      	ldrb	r2, [r1, r2]
 8003c0e:	435a      	muls	r2, r3
 8003c10:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c12:	193b      	adds	r3, r7, r4
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <UARTEx_SetNbDataToProcess+0xb8>)
 8003c18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	f7fc fb0e 	bl	800023c <__divsi3>
 8003c20:	0003      	movs	r3, r0
 8003c22:	b299      	uxth	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2268      	movs	r2, #104	; 0x68
 8003c28:	5299      	strh	r1, [r3, r2]
}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b005      	add	sp, #20
 8003c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	0800466c 	.word	0x0800466c
 8003c38:	08004674 	.word	0x08004674

08003c3c <__errno>:
 8003c3c:	4b01      	ldr	r3, [pc, #4]	; (8003c44 <__errno+0x8>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	4770      	bx	lr
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	20000034 	.word	0x20000034

08003c48 <__libc_init_array>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	2600      	movs	r6, #0
 8003c4c:	4d0c      	ldr	r5, [pc, #48]	; (8003c80 <__libc_init_array+0x38>)
 8003c4e:	4c0d      	ldr	r4, [pc, #52]	; (8003c84 <__libc_init_array+0x3c>)
 8003c50:	1b64      	subs	r4, r4, r5
 8003c52:	10a4      	asrs	r4, r4, #2
 8003c54:	42a6      	cmp	r6, r4
 8003c56:	d109      	bne.n	8003c6c <__libc_init_array+0x24>
 8003c58:	2600      	movs	r6, #0
 8003c5a:	f000 fc9d 	bl	8004598 <_init>
 8003c5e:	4d0a      	ldr	r5, [pc, #40]	; (8003c88 <__libc_init_array+0x40>)
 8003c60:	4c0a      	ldr	r4, [pc, #40]	; (8003c8c <__libc_init_array+0x44>)
 8003c62:	1b64      	subs	r4, r4, r5
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	42a6      	cmp	r6, r4
 8003c68:	d105      	bne.n	8003c76 <__libc_init_array+0x2e>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	00b3      	lsls	r3, r6, #2
 8003c6e:	58eb      	ldr	r3, [r5, r3]
 8003c70:	4798      	blx	r3
 8003c72:	3601      	adds	r6, #1
 8003c74:	e7ee      	b.n	8003c54 <__libc_init_array+0xc>
 8003c76:	00b3      	lsls	r3, r6, #2
 8003c78:	58eb      	ldr	r3, [r5, r3]
 8003c7a:	4798      	blx	r3
 8003c7c:	3601      	adds	r6, #1
 8003c7e:	e7f2      	b.n	8003c66 <__libc_init_array+0x1e>
 8003c80:	080046b8 	.word	0x080046b8
 8003c84:	080046b8 	.word	0x080046b8
 8003c88:	080046b8 	.word	0x080046b8
 8003c8c:	080046bc 	.word	0x080046bc

08003c90 <memset>:
 8003c90:	0003      	movs	r3, r0
 8003c92:	1882      	adds	r2, r0, r2
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d100      	bne.n	8003c9a <memset+0xa>
 8003c98:	4770      	bx	lr
 8003c9a:	7019      	strb	r1, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	e7f9      	b.n	8003c94 <memset+0x4>

08003ca0 <siprintf>:
 8003ca0:	b40e      	push	{r1, r2, r3}
 8003ca2:	b500      	push	{lr}
 8003ca4:	490b      	ldr	r1, [pc, #44]	; (8003cd4 <siprintf+0x34>)
 8003ca6:	b09c      	sub	sp, #112	; 0x70
 8003ca8:	ab1d      	add	r3, sp, #116	; 0x74
 8003caa:	9002      	str	r0, [sp, #8]
 8003cac:	9006      	str	r0, [sp, #24]
 8003cae:	9107      	str	r1, [sp, #28]
 8003cb0:	9104      	str	r1, [sp, #16]
 8003cb2:	4809      	ldr	r0, [pc, #36]	; (8003cd8 <siprintf+0x38>)
 8003cb4:	4909      	ldr	r1, [pc, #36]	; (8003cdc <siprintf+0x3c>)
 8003cb6:	cb04      	ldmia	r3!, {r2}
 8003cb8:	9105      	str	r1, [sp, #20]
 8003cba:	6800      	ldr	r0, [r0, #0]
 8003cbc:	a902      	add	r1, sp, #8
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	f000 f882 	bl	8003dc8 <_svfiprintf_r>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	9a02      	ldr	r2, [sp, #8]
 8003cc8:	7013      	strb	r3, [r2, #0]
 8003cca:	b01c      	add	sp, #112	; 0x70
 8003ccc:	bc08      	pop	{r3}
 8003cce:	b003      	add	sp, #12
 8003cd0:	4718      	bx	r3
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	7fffffff 	.word	0x7fffffff
 8003cd8:	20000034 	.word	0x20000034
 8003cdc:	ffff0208 	.word	0xffff0208

08003ce0 <strncmp>:
 8003ce0:	b530      	push	{r4, r5, lr}
 8003ce2:	0005      	movs	r5, r0
 8003ce4:	1e10      	subs	r0, r2, #0
 8003ce6:	d008      	beq.n	8003cfa <strncmp+0x1a>
 8003ce8:	2400      	movs	r4, #0
 8003cea:	3a01      	subs	r2, #1
 8003cec:	5d2b      	ldrb	r3, [r5, r4]
 8003cee:	5d08      	ldrb	r0, [r1, r4]
 8003cf0:	4283      	cmp	r3, r0
 8003cf2:	d101      	bne.n	8003cf8 <strncmp+0x18>
 8003cf4:	4294      	cmp	r4, r2
 8003cf6:	d101      	bne.n	8003cfc <strncmp+0x1c>
 8003cf8:	1a18      	subs	r0, r3, r0
 8003cfa:	bd30      	pop	{r4, r5, pc}
 8003cfc:	3401      	adds	r4, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f4      	bne.n	8003cec <strncmp+0xc>
 8003d02:	e7f9      	b.n	8003cf8 <strncmp+0x18>

08003d04 <__ssputs_r>:
 8003d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d06:	688e      	ldr	r6, [r1, #8]
 8003d08:	b085      	sub	sp, #20
 8003d0a:	0007      	movs	r7, r0
 8003d0c:	000c      	movs	r4, r1
 8003d0e:	9203      	str	r2, [sp, #12]
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	429e      	cmp	r6, r3
 8003d14:	d83c      	bhi.n	8003d90 <__ssputs_r+0x8c>
 8003d16:	2390      	movs	r3, #144	; 0x90
 8003d18:	898a      	ldrh	r2, [r1, #12]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	421a      	tst	r2, r3
 8003d1e:	d034      	beq.n	8003d8a <__ssputs_r+0x86>
 8003d20:	6909      	ldr	r1, [r1, #16]
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	6960      	ldr	r0, [r4, #20]
 8003d26:	1a5b      	subs	r3, r3, r1
 8003d28:	9302      	str	r3, [sp, #8]
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	4343      	muls	r3, r0
 8003d2e:	0fdd      	lsrs	r5, r3, #31
 8003d30:	18ed      	adds	r5, r5, r3
 8003d32:	9b01      	ldr	r3, [sp, #4]
 8003d34:	9802      	ldr	r0, [sp, #8]
 8003d36:	3301      	adds	r3, #1
 8003d38:	181b      	adds	r3, r3, r0
 8003d3a:	106d      	asrs	r5, r5, #1
 8003d3c:	42ab      	cmp	r3, r5
 8003d3e:	d900      	bls.n	8003d42 <__ssputs_r+0x3e>
 8003d40:	001d      	movs	r5, r3
 8003d42:	0553      	lsls	r3, r2, #21
 8003d44:	d532      	bpl.n	8003dac <__ssputs_r+0xa8>
 8003d46:	0029      	movs	r1, r5
 8003d48:	0038      	movs	r0, r7
 8003d4a:	f000 fb53 	bl	80043f4 <_malloc_r>
 8003d4e:	1e06      	subs	r6, r0, #0
 8003d50:	d109      	bne.n	8003d66 <__ssputs_r+0x62>
 8003d52:	230c      	movs	r3, #12
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	2340      	movs	r3, #64	; 0x40
 8003d58:	2001      	movs	r0, #1
 8003d5a:	89a2      	ldrh	r2, [r4, #12]
 8003d5c:	4240      	negs	r0, r0
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	81a3      	strh	r3, [r4, #12]
 8003d62:	b005      	add	sp, #20
 8003d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d66:	9a02      	ldr	r2, [sp, #8]
 8003d68:	6921      	ldr	r1, [r4, #16]
 8003d6a:	f000 faba 	bl	80042e2 <memcpy>
 8003d6e:	89a3      	ldrh	r3, [r4, #12]
 8003d70:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <__ssputs_r+0xc0>)
 8003d72:	401a      	ands	r2, r3
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	4313      	orrs	r3, r2
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	9b02      	ldr	r3, [sp, #8]
 8003d7c:	6126      	str	r6, [r4, #16]
 8003d7e:	18f6      	adds	r6, r6, r3
 8003d80:	6026      	str	r6, [r4, #0]
 8003d82:	6165      	str	r5, [r4, #20]
 8003d84:	9e01      	ldr	r6, [sp, #4]
 8003d86:	1aed      	subs	r5, r5, r3
 8003d88:	60a5      	str	r5, [r4, #8]
 8003d8a:	9b01      	ldr	r3, [sp, #4]
 8003d8c:	429e      	cmp	r6, r3
 8003d8e:	d900      	bls.n	8003d92 <__ssputs_r+0x8e>
 8003d90:	9e01      	ldr	r6, [sp, #4]
 8003d92:	0032      	movs	r2, r6
 8003d94:	9903      	ldr	r1, [sp, #12]
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	f000 faac 	bl	80042f4 <memmove>
 8003d9c:	68a3      	ldr	r3, [r4, #8]
 8003d9e:	2000      	movs	r0, #0
 8003da0:	1b9b      	subs	r3, r3, r6
 8003da2:	60a3      	str	r3, [r4, #8]
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	199e      	adds	r6, r3, r6
 8003da8:	6026      	str	r6, [r4, #0]
 8003daa:	e7da      	b.n	8003d62 <__ssputs_r+0x5e>
 8003dac:	002a      	movs	r2, r5
 8003dae:	0038      	movs	r0, r7
 8003db0:	f000 fb96 	bl	80044e0 <_realloc_r>
 8003db4:	1e06      	subs	r6, r0, #0
 8003db6:	d1e0      	bne.n	8003d7a <__ssputs_r+0x76>
 8003db8:	0038      	movs	r0, r7
 8003dba:	6921      	ldr	r1, [r4, #16]
 8003dbc:	f000 faae 	bl	800431c <_free_r>
 8003dc0:	e7c7      	b.n	8003d52 <__ssputs_r+0x4e>
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	fffffb7f 	.word	0xfffffb7f

08003dc8 <_svfiprintf_r>:
 8003dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dca:	b0a1      	sub	sp, #132	; 0x84
 8003dcc:	9003      	str	r0, [sp, #12]
 8003dce:	001d      	movs	r5, r3
 8003dd0:	898b      	ldrh	r3, [r1, #12]
 8003dd2:	000f      	movs	r7, r1
 8003dd4:	0016      	movs	r6, r2
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	d511      	bpl.n	8003dfe <_svfiprintf_r+0x36>
 8003dda:	690b      	ldr	r3, [r1, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10e      	bne.n	8003dfe <_svfiprintf_r+0x36>
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	f000 fb07 	bl	80043f4 <_malloc_r>
 8003de6:	6038      	str	r0, [r7, #0]
 8003de8:	6138      	str	r0, [r7, #16]
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d105      	bne.n	8003dfa <_svfiprintf_r+0x32>
 8003dee:	230c      	movs	r3, #12
 8003df0:	9a03      	ldr	r2, [sp, #12]
 8003df2:	3801      	subs	r0, #1
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	b021      	add	sp, #132	; 0x84
 8003df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dfa:	2340      	movs	r3, #64	; 0x40
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	ac08      	add	r4, sp, #32
 8003e02:	6163      	str	r3, [r4, #20]
 8003e04:	3320      	adds	r3, #32
 8003e06:	7663      	strb	r3, [r4, #25]
 8003e08:	3310      	adds	r3, #16
 8003e0a:	76a3      	strb	r3, [r4, #26]
 8003e0c:	9507      	str	r5, [sp, #28]
 8003e0e:	0035      	movs	r5, r6
 8003e10:	782b      	ldrb	r3, [r5, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <_svfiprintf_r+0x52>
 8003e16:	2b25      	cmp	r3, #37	; 0x25
 8003e18:	d147      	bne.n	8003eaa <_svfiprintf_r+0xe2>
 8003e1a:	1bab      	subs	r3, r5, r6
 8003e1c:	9305      	str	r3, [sp, #20]
 8003e1e:	42b5      	cmp	r5, r6
 8003e20:	d00c      	beq.n	8003e3c <_svfiprintf_r+0x74>
 8003e22:	0032      	movs	r2, r6
 8003e24:	0039      	movs	r1, r7
 8003e26:	9803      	ldr	r0, [sp, #12]
 8003e28:	f7ff ff6c 	bl	8003d04 <__ssputs_r>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d100      	bne.n	8003e32 <_svfiprintf_r+0x6a>
 8003e30:	e0ae      	b.n	8003f90 <_svfiprintf_r+0x1c8>
 8003e32:	6962      	ldr	r2, [r4, #20]
 8003e34:	9b05      	ldr	r3, [sp, #20]
 8003e36:	4694      	mov	ip, r2
 8003e38:	4463      	add	r3, ip
 8003e3a:	6163      	str	r3, [r4, #20]
 8003e3c:	782b      	ldrb	r3, [r5, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d100      	bne.n	8003e44 <_svfiprintf_r+0x7c>
 8003e42:	e0a5      	b.n	8003f90 <_svfiprintf_r+0x1c8>
 8003e44:	2201      	movs	r2, #1
 8003e46:	2300      	movs	r3, #0
 8003e48:	4252      	negs	r2, r2
 8003e4a:	6062      	str	r2, [r4, #4]
 8003e4c:	a904      	add	r1, sp, #16
 8003e4e:	3254      	adds	r2, #84	; 0x54
 8003e50:	1852      	adds	r2, r2, r1
 8003e52:	1c6e      	adds	r6, r5, #1
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	60e3      	str	r3, [r4, #12]
 8003e58:	60a3      	str	r3, [r4, #8]
 8003e5a:	7013      	strb	r3, [r2, #0]
 8003e5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e5e:	2205      	movs	r2, #5
 8003e60:	7831      	ldrb	r1, [r6, #0]
 8003e62:	4854      	ldr	r0, [pc, #336]	; (8003fb4 <_svfiprintf_r+0x1ec>)
 8003e64:	f000 fa32 	bl	80042cc <memchr>
 8003e68:	1c75      	adds	r5, r6, #1
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d11f      	bne.n	8003eae <_svfiprintf_r+0xe6>
 8003e6e:	6822      	ldr	r2, [r4, #0]
 8003e70:	06d3      	lsls	r3, r2, #27
 8003e72:	d504      	bpl.n	8003e7e <_svfiprintf_r+0xb6>
 8003e74:	2353      	movs	r3, #83	; 0x53
 8003e76:	a904      	add	r1, sp, #16
 8003e78:	185b      	adds	r3, r3, r1
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	7019      	strb	r1, [r3, #0]
 8003e7e:	0713      	lsls	r3, r2, #28
 8003e80:	d504      	bpl.n	8003e8c <_svfiprintf_r+0xc4>
 8003e82:	2353      	movs	r3, #83	; 0x53
 8003e84:	a904      	add	r1, sp, #16
 8003e86:	185b      	adds	r3, r3, r1
 8003e88:	212b      	movs	r1, #43	; 0x2b
 8003e8a:	7019      	strb	r1, [r3, #0]
 8003e8c:	7833      	ldrb	r3, [r6, #0]
 8003e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e90:	d016      	beq.n	8003ec0 <_svfiprintf_r+0xf8>
 8003e92:	0035      	movs	r5, r6
 8003e94:	2100      	movs	r1, #0
 8003e96:	200a      	movs	r0, #10
 8003e98:	68e3      	ldr	r3, [r4, #12]
 8003e9a:	782a      	ldrb	r2, [r5, #0]
 8003e9c:	1c6e      	adds	r6, r5, #1
 8003e9e:	3a30      	subs	r2, #48	; 0x30
 8003ea0:	2a09      	cmp	r2, #9
 8003ea2:	d94e      	bls.n	8003f42 <_svfiprintf_r+0x17a>
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	d111      	bne.n	8003ecc <_svfiprintf_r+0x104>
 8003ea8:	e017      	b.n	8003eda <_svfiprintf_r+0x112>
 8003eaa:	3501      	adds	r5, #1
 8003eac:	e7b0      	b.n	8003e10 <_svfiprintf_r+0x48>
 8003eae:	4b41      	ldr	r3, [pc, #260]	; (8003fb4 <_svfiprintf_r+0x1ec>)
 8003eb0:	6822      	ldr	r2, [r4, #0]
 8003eb2:	1ac0      	subs	r0, r0, r3
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	4083      	lsls	r3, r0
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	002e      	movs	r6, r5
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	e7ce      	b.n	8003e5e <_svfiprintf_r+0x96>
 8003ec0:	9b07      	ldr	r3, [sp, #28]
 8003ec2:	1d19      	adds	r1, r3, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	9107      	str	r1, [sp, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	db01      	blt.n	8003ed0 <_svfiprintf_r+0x108>
 8003ecc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ece:	e004      	b.n	8003eda <_svfiprintf_r+0x112>
 8003ed0:	425b      	negs	r3, r3
 8003ed2:	60e3      	str	r3, [r4, #12]
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	6023      	str	r3, [r4, #0]
 8003eda:	782b      	ldrb	r3, [r5, #0]
 8003edc:	2b2e      	cmp	r3, #46	; 0x2e
 8003ede:	d10a      	bne.n	8003ef6 <_svfiprintf_r+0x12e>
 8003ee0:	786b      	ldrb	r3, [r5, #1]
 8003ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee4:	d135      	bne.n	8003f52 <_svfiprintf_r+0x18a>
 8003ee6:	9b07      	ldr	r3, [sp, #28]
 8003ee8:	3502      	adds	r5, #2
 8003eea:	1d1a      	adds	r2, r3, #4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	9207      	str	r2, [sp, #28]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	db2b      	blt.n	8003f4c <_svfiprintf_r+0x184>
 8003ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef6:	4e30      	ldr	r6, [pc, #192]	; (8003fb8 <_svfiprintf_r+0x1f0>)
 8003ef8:	2203      	movs	r2, #3
 8003efa:	0030      	movs	r0, r6
 8003efc:	7829      	ldrb	r1, [r5, #0]
 8003efe:	f000 f9e5 	bl	80042cc <memchr>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d006      	beq.n	8003f14 <_svfiprintf_r+0x14c>
 8003f06:	2340      	movs	r3, #64	; 0x40
 8003f08:	1b80      	subs	r0, r0, r6
 8003f0a:	4083      	lsls	r3, r0
 8003f0c:	6822      	ldr	r2, [r4, #0]
 8003f0e:	3501      	adds	r5, #1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	7829      	ldrb	r1, [r5, #0]
 8003f16:	2206      	movs	r2, #6
 8003f18:	4828      	ldr	r0, [pc, #160]	; (8003fbc <_svfiprintf_r+0x1f4>)
 8003f1a:	1c6e      	adds	r6, r5, #1
 8003f1c:	7621      	strb	r1, [r4, #24]
 8003f1e:	f000 f9d5 	bl	80042cc <memchr>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d03c      	beq.n	8003fa0 <_svfiprintf_r+0x1d8>
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <_svfiprintf_r+0x1f8>)
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d125      	bne.n	8003f78 <_svfiprintf_r+0x1b0>
 8003f2c:	2207      	movs	r2, #7
 8003f2e:	9b07      	ldr	r3, [sp, #28]
 8003f30:	3307      	adds	r3, #7
 8003f32:	4393      	bics	r3, r2
 8003f34:	3308      	adds	r3, #8
 8003f36:	9307      	str	r3, [sp, #28]
 8003f38:	6963      	ldr	r3, [r4, #20]
 8003f3a:	9a04      	ldr	r2, [sp, #16]
 8003f3c:	189b      	adds	r3, r3, r2
 8003f3e:	6163      	str	r3, [r4, #20]
 8003f40:	e765      	b.n	8003e0e <_svfiprintf_r+0x46>
 8003f42:	4343      	muls	r3, r0
 8003f44:	0035      	movs	r5, r6
 8003f46:	2101      	movs	r1, #1
 8003f48:	189b      	adds	r3, r3, r2
 8003f4a:	e7a6      	b.n	8003e9a <_svfiprintf_r+0xd2>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	425b      	negs	r3, r3
 8003f50:	e7d0      	b.n	8003ef4 <_svfiprintf_r+0x12c>
 8003f52:	2300      	movs	r3, #0
 8003f54:	200a      	movs	r0, #10
 8003f56:	001a      	movs	r2, r3
 8003f58:	3501      	adds	r5, #1
 8003f5a:	6063      	str	r3, [r4, #4]
 8003f5c:	7829      	ldrb	r1, [r5, #0]
 8003f5e:	1c6e      	adds	r6, r5, #1
 8003f60:	3930      	subs	r1, #48	; 0x30
 8003f62:	2909      	cmp	r1, #9
 8003f64:	d903      	bls.n	8003f6e <_svfiprintf_r+0x1a6>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0c5      	beq.n	8003ef6 <_svfiprintf_r+0x12e>
 8003f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8003f6c:	e7c3      	b.n	8003ef6 <_svfiprintf_r+0x12e>
 8003f6e:	4342      	muls	r2, r0
 8003f70:	0035      	movs	r5, r6
 8003f72:	2301      	movs	r3, #1
 8003f74:	1852      	adds	r2, r2, r1
 8003f76:	e7f1      	b.n	8003f5c <_svfiprintf_r+0x194>
 8003f78:	ab07      	add	r3, sp, #28
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	003a      	movs	r2, r7
 8003f7e:	0021      	movs	r1, r4
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <_svfiprintf_r+0x1fc>)
 8003f82:	9803      	ldr	r0, [sp, #12]
 8003f84:	e000      	b.n	8003f88 <_svfiprintf_r+0x1c0>
 8003f86:	bf00      	nop
 8003f88:	9004      	str	r0, [sp, #16]
 8003f8a:	9b04      	ldr	r3, [sp, #16]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	d1d3      	bne.n	8003f38 <_svfiprintf_r+0x170>
 8003f90:	89bb      	ldrh	r3, [r7, #12]
 8003f92:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003f94:	065b      	lsls	r3, r3, #25
 8003f96:	d400      	bmi.n	8003f9a <_svfiprintf_r+0x1d2>
 8003f98:	e72d      	b.n	8003df6 <_svfiprintf_r+0x2e>
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	4240      	negs	r0, r0
 8003f9e:	e72a      	b.n	8003df6 <_svfiprintf_r+0x2e>
 8003fa0:	ab07      	add	r3, sp, #28
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	003a      	movs	r2, r7
 8003fa6:	0021      	movs	r1, r4
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <_svfiprintf_r+0x1fc>)
 8003faa:	9803      	ldr	r0, [sp, #12]
 8003fac:	f000 f87c 	bl	80040a8 <_printf_i>
 8003fb0:	e7ea      	b.n	8003f88 <_svfiprintf_r+0x1c0>
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	0800467c 	.word	0x0800467c
 8003fb8:	08004682 	.word	0x08004682
 8003fbc:	08004686 	.word	0x08004686
 8003fc0:	00000000 	.word	0x00000000
 8003fc4:	08003d05 	.word	0x08003d05

08003fc8 <_printf_common>:
 8003fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fca:	0015      	movs	r5, r2
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	688a      	ldr	r2, [r1, #8]
 8003fd0:	690b      	ldr	r3, [r1, #16]
 8003fd2:	000c      	movs	r4, r1
 8003fd4:	9000      	str	r0, [sp, #0]
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	da00      	bge.n	8003fdc <_printf_common+0x14>
 8003fda:	0013      	movs	r3, r2
 8003fdc:	0022      	movs	r2, r4
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	3243      	adds	r2, #67	; 0x43
 8003fe2:	7812      	ldrb	r2, [r2, #0]
 8003fe4:	2a00      	cmp	r2, #0
 8003fe6:	d001      	beq.n	8003fec <_printf_common+0x24>
 8003fe8:	3301      	adds	r3, #1
 8003fea:	602b      	str	r3, [r5, #0]
 8003fec:	6823      	ldr	r3, [r4, #0]
 8003fee:	069b      	lsls	r3, r3, #26
 8003ff0:	d502      	bpl.n	8003ff8 <_printf_common+0x30>
 8003ff2:	682b      	ldr	r3, [r5, #0]
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	602b      	str	r3, [r5, #0]
 8003ff8:	6822      	ldr	r2, [r4, #0]
 8003ffa:	2306      	movs	r3, #6
 8003ffc:	0017      	movs	r7, r2
 8003ffe:	401f      	ands	r7, r3
 8004000:	421a      	tst	r2, r3
 8004002:	d027      	beq.n	8004054 <_printf_common+0x8c>
 8004004:	0023      	movs	r3, r4
 8004006:	3343      	adds	r3, #67	; 0x43
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	1e5a      	subs	r2, r3, #1
 800400c:	4193      	sbcs	r3, r2
 800400e:	6822      	ldr	r2, [r4, #0]
 8004010:	0692      	lsls	r2, r2, #26
 8004012:	d430      	bmi.n	8004076 <_printf_common+0xae>
 8004014:	0022      	movs	r2, r4
 8004016:	9901      	ldr	r1, [sp, #4]
 8004018:	9800      	ldr	r0, [sp, #0]
 800401a:	9e08      	ldr	r6, [sp, #32]
 800401c:	3243      	adds	r2, #67	; 0x43
 800401e:	47b0      	blx	r6
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	d025      	beq.n	8004070 <_printf_common+0xa8>
 8004024:	2306      	movs	r3, #6
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	682a      	ldr	r2, [r5, #0]
 800402a:	68e1      	ldr	r1, [r4, #12]
 800402c:	2500      	movs	r5, #0
 800402e:	4003      	ands	r3, r0
 8004030:	2b04      	cmp	r3, #4
 8004032:	d103      	bne.n	800403c <_printf_common+0x74>
 8004034:	1a8d      	subs	r5, r1, r2
 8004036:	43eb      	mvns	r3, r5
 8004038:	17db      	asrs	r3, r3, #31
 800403a:	401d      	ands	r5, r3
 800403c:	68a3      	ldr	r3, [r4, #8]
 800403e:	6922      	ldr	r2, [r4, #16]
 8004040:	4293      	cmp	r3, r2
 8004042:	dd01      	ble.n	8004048 <_printf_common+0x80>
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	18ed      	adds	r5, r5, r3
 8004048:	2700      	movs	r7, #0
 800404a:	42bd      	cmp	r5, r7
 800404c:	d120      	bne.n	8004090 <_printf_common+0xc8>
 800404e:	2000      	movs	r0, #0
 8004050:	e010      	b.n	8004074 <_printf_common+0xac>
 8004052:	3701      	adds	r7, #1
 8004054:	68e3      	ldr	r3, [r4, #12]
 8004056:	682a      	ldr	r2, [r5, #0]
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	42bb      	cmp	r3, r7
 800405c:	ddd2      	ble.n	8004004 <_printf_common+0x3c>
 800405e:	0022      	movs	r2, r4
 8004060:	2301      	movs	r3, #1
 8004062:	9901      	ldr	r1, [sp, #4]
 8004064:	9800      	ldr	r0, [sp, #0]
 8004066:	9e08      	ldr	r6, [sp, #32]
 8004068:	3219      	adds	r2, #25
 800406a:	47b0      	blx	r6
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d1f0      	bne.n	8004052 <_printf_common+0x8a>
 8004070:	2001      	movs	r0, #1
 8004072:	4240      	negs	r0, r0
 8004074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004076:	2030      	movs	r0, #48	; 0x30
 8004078:	18e1      	adds	r1, r4, r3
 800407a:	3143      	adds	r1, #67	; 0x43
 800407c:	7008      	strb	r0, [r1, #0]
 800407e:	0021      	movs	r1, r4
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	3145      	adds	r1, #69	; 0x45
 8004084:	7809      	ldrb	r1, [r1, #0]
 8004086:	18a2      	adds	r2, r4, r2
 8004088:	3243      	adds	r2, #67	; 0x43
 800408a:	3302      	adds	r3, #2
 800408c:	7011      	strb	r1, [r2, #0]
 800408e:	e7c1      	b.n	8004014 <_printf_common+0x4c>
 8004090:	0022      	movs	r2, r4
 8004092:	2301      	movs	r3, #1
 8004094:	9901      	ldr	r1, [sp, #4]
 8004096:	9800      	ldr	r0, [sp, #0]
 8004098:	9e08      	ldr	r6, [sp, #32]
 800409a:	321a      	adds	r2, #26
 800409c:	47b0      	blx	r6
 800409e:	1c43      	adds	r3, r0, #1
 80040a0:	d0e6      	beq.n	8004070 <_printf_common+0xa8>
 80040a2:	3701      	adds	r7, #1
 80040a4:	e7d1      	b.n	800404a <_printf_common+0x82>
	...

080040a8 <_printf_i>:
 80040a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040aa:	b08b      	sub	sp, #44	; 0x2c
 80040ac:	9206      	str	r2, [sp, #24]
 80040ae:	000a      	movs	r2, r1
 80040b0:	3243      	adds	r2, #67	; 0x43
 80040b2:	9307      	str	r3, [sp, #28]
 80040b4:	9005      	str	r0, [sp, #20]
 80040b6:	9204      	str	r2, [sp, #16]
 80040b8:	7e0a      	ldrb	r2, [r1, #24]
 80040ba:	000c      	movs	r4, r1
 80040bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80040be:	2a78      	cmp	r2, #120	; 0x78
 80040c0:	d807      	bhi.n	80040d2 <_printf_i+0x2a>
 80040c2:	2a62      	cmp	r2, #98	; 0x62
 80040c4:	d809      	bhi.n	80040da <_printf_i+0x32>
 80040c6:	2a00      	cmp	r2, #0
 80040c8:	d100      	bne.n	80040cc <_printf_i+0x24>
 80040ca:	e0c1      	b.n	8004250 <_printf_i+0x1a8>
 80040cc:	2a58      	cmp	r2, #88	; 0x58
 80040ce:	d100      	bne.n	80040d2 <_printf_i+0x2a>
 80040d0:	e08c      	b.n	80041ec <_printf_i+0x144>
 80040d2:	0026      	movs	r6, r4
 80040d4:	3642      	adds	r6, #66	; 0x42
 80040d6:	7032      	strb	r2, [r6, #0]
 80040d8:	e022      	b.n	8004120 <_printf_i+0x78>
 80040da:	0010      	movs	r0, r2
 80040dc:	3863      	subs	r0, #99	; 0x63
 80040de:	2815      	cmp	r0, #21
 80040e0:	d8f7      	bhi.n	80040d2 <_printf_i+0x2a>
 80040e2:	f7fc f817 	bl	8000114 <__gnu_thumb1_case_shi>
 80040e6:	0016      	.short	0x0016
 80040e8:	fff6001f 	.word	0xfff6001f
 80040ec:	fff6fff6 	.word	0xfff6fff6
 80040f0:	001ffff6 	.word	0x001ffff6
 80040f4:	fff6fff6 	.word	0xfff6fff6
 80040f8:	fff6fff6 	.word	0xfff6fff6
 80040fc:	003600a8 	.word	0x003600a8
 8004100:	fff6009a 	.word	0xfff6009a
 8004104:	00b9fff6 	.word	0x00b9fff6
 8004108:	0036fff6 	.word	0x0036fff6
 800410c:	fff6fff6 	.word	0xfff6fff6
 8004110:	009e      	.short	0x009e
 8004112:	0026      	movs	r6, r4
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	3642      	adds	r6, #66	; 0x42
 8004118:	1d11      	adds	r1, r2, #4
 800411a:	6019      	str	r1, [r3, #0]
 800411c:	6813      	ldr	r3, [r2, #0]
 800411e:	7033      	strb	r3, [r6, #0]
 8004120:	2301      	movs	r3, #1
 8004122:	e0a7      	b.n	8004274 <_printf_i+0x1cc>
 8004124:	6808      	ldr	r0, [r1, #0]
 8004126:	6819      	ldr	r1, [r3, #0]
 8004128:	1d0a      	adds	r2, r1, #4
 800412a:	0605      	lsls	r5, r0, #24
 800412c:	d50b      	bpl.n	8004146 <_printf_i+0x9e>
 800412e:	680d      	ldr	r5, [r1, #0]
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	2d00      	cmp	r5, #0
 8004134:	da03      	bge.n	800413e <_printf_i+0x96>
 8004136:	232d      	movs	r3, #45	; 0x2d
 8004138:	9a04      	ldr	r2, [sp, #16]
 800413a:	426d      	negs	r5, r5
 800413c:	7013      	strb	r3, [r2, #0]
 800413e:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <_printf_i+0x21c>)
 8004140:	270a      	movs	r7, #10
 8004142:	9303      	str	r3, [sp, #12]
 8004144:	e01b      	b.n	800417e <_printf_i+0xd6>
 8004146:	680d      	ldr	r5, [r1, #0]
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	0641      	lsls	r1, r0, #25
 800414c:	d5f1      	bpl.n	8004132 <_printf_i+0x8a>
 800414e:	b22d      	sxth	r5, r5
 8004150:	e7ef      	b.n	8004132 <_printf_i+0x8a>
 8004152:	680d      	ldr	r5, [r1, #0]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	1d08      	adds	r0, r1, #4
 8004158:	6018      	str	r0, [r3, #0]
 800415a:	062e      	lsls	r6, r5, #24
 800415c:	d501      	bpl.n	8004162 <_printf_i+0xba>
 800415e:	680d      	ldr	r5, [r1, #0]
 8004160:	e003      	b.n	800416a <_printf_i+0xc2>
 8004162:	066d      	lsls	r5, r5, #25
 8004164:	d5fb      	bpl.n	800415e <_printf_i+0xb6>
 8004166:	680d      	ldr	r5, [r1, #0]
 8004168:	b2ad      	uxth	r5, r5
 800416a:	4b56      	ldr	r3, [pc, #344]	; (80042c4 <_printf_i+0x21c>)
 800416c:	2708      	movs	r7, #8
 800416e:	9303      	str	r3, [sp, #12]
 8004170:	2a6f      	cmp	r2, #111	; 0x6f
 8004172:	d000      	beq.n	8004176 <_printf_i+0xce>
 8004174:	3702      	adds	r7, #2
 8004176:	0023      	movs	r3, r4
 8004178:	2200      	movs	r2, #0
 800417a:	3343      	adds	r3, #67	; 0x43
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	6863      	ldr	r3, [r4, #4]
 8004180:	60a3      	str	r3, [r4, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	db03      	blt.n	800418e <_printf_i+0xe6>
 8004186:	2204      	movs	r2, #4
 8004188:	6821      	ldr	r1, [r4, #0]
 800418a:	4391      	bics	r1, r2
 800418c:	6021      	str	r1, [r4, #0]
 800418e:	2d00      	cmp	r5, #0
 8004190:	d102      	bne.n	8004198 <_printf_i+0xf0>
 8004192:	9e04      	ldr	r6, [sp, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00c      	beq.n	80041b2 <_printf_i+0x10a>
 8004198:	9e04      	ldr	r6, [sp, #16]
 800419a:	0028      	movs	r0, r5
 800419c:	0039      	movs	r1, r7
 800419e:	f7fc f849 	bl	8000234 <__aeabi_uidivmod>
 80041a2:	9b03      	ldr	r3, [sp, #12]
 80041a4:	3e01      	subs	r6, #1
 80041a6:	5c5b      	ldrb	r3, [r3, r1]
 80041a8:	7033      	strb	r3, [r6, #0]
 80041aa:	002b      	movs	r3, r5
 80041ac:	0005      	movs	r5, r0
 80041ae:	429f      	cmp	r7, r3
 80041b0:	d9f3      	bls.n	800419a <_printf_i+0xf2>
 80041b2:	2f08      	cmp	r7, #8
 80041b4:	d109      	bne.n	80041ca <_printf_i+0x122>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	07db      	lsls	r3, r3, #31
 80041ba:	d506      	bpl.n	80041ca <_printf_i+0x122>
 80041bc:	6863      	ldr	r3, [r4, #4]
 80041be:	6922      	ldr	r2, [r4, #16]
 80041c0:	4293      	cmp	r3, r2
 80041c2:	dc02      	bgt.n	80041ca <_printf_i+0x122>
 80041c4:	2330      	movs	r3, #48	; 0x30
 80041c6:	3e01      	subs	r6, #1
 80041c8:	7033      	strb	r3, [r6, #0]
 80041ca:	9b04      	ldr	r3, [sp, #16]
 80041cc:	1b9b      	subs	r3, r3, r6
 80041ce:	6123      	str	r3, [r4, #16]
 80041d0:	9b07      	ldr	r3, [sp, #28]
 80041d2:	0021      	movs	r1, r4
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	9805      	ldr	r0, [sp, #20]
 80041d8:	9b06      	ldr	r3, [sp, #24]
 80041da:	aa09      	add	r2, sp, #36	; 0x24
 80041dc:	f7ff fef4 	bl	8003fc8 <_printf_common>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d14c      	bne.n	800427e <_printf_i+0x1d6>
 80041e4:	2001      	movs	r0, #1
 80041e6:	4240      	negs	r0, r0
 80041e8:	b00b      	add	sp, #44	; 0x2c
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ec:	3145      	adds	r1, #69	; 0x45
 80041ee:	700a      	strb	r2, [r1, #0]
 80041f0:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <_printf_i+0x21c>)
 80041f2:	9203      	str	r2, [sp, #12]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	6821      	ldr	r1, [r4, #0]
 80041f8:	ca20      	ldmia	r2!, {r5}
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	0608      	lsls	r0, r1, #24
 80041fe:	d516      	bpl.n	800422e <_printf_i+0x186>
 8004200:	07cb      	lsls	r3, r1, #31
 8004202:	d502      	bpl.n	800420a <_printf_i+0x162>
 8004204:	2320      	movs	r3, #32
 8004206:	4319      	orrs	r1, r3
 8004208:	6021      	str	r1, [r4, #0]
 800420a:	2710      	movs	r7, #16
 800420c:	2d00      	cmp	r5, #0
 800420e:	d1b2      	bne.n	8004176 <_printf_i+0xce>
 8004210:	2320      	movs	r3, #32
 8004212:	6822      	ldr	r2, [r4, #0]
 8004214:	439a      	bics	r2, r3
 8004216:	6022      	str	r2, [r4, #0]
 8004218:	e7ad      	b.n	8004176 <_printf_i+0xce>
 800421a:	2220      	movs	r2, #32
 800421c:	6809      	ldr	r1, [r1, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	6022      	str	r2, [r4, #0]
 8004222:	0022      	movs	r2, r4
 8004224:	2178      	movs	r1, #120	; 0x78
 8004226:	3245      	adds	r2, #69	; 0x45
 8004228:	7011      	strb	r1, [r2, #0]
 800422a:	4a27      	ldr	r2, [pc, #156]	; (80042c8 <_printf_i+0x220>)
 800422c:	e7e1      	b.n	80041f2 <_printf_i+0x14a>
 800422e:	0648      	lsls	r0, r1, #25
 8004230:	d5e6      	bpl.n	8004200 <_printf_i+0x158>
 8004232:	b2ad      	uxth	r5, r5
 8004234:	e7e4      	b.n	8004200 <_printf_i+0x158>
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	680d      	ldr	r5, [r1, #0]
 800423a:	1d10      	adds	r0, r2, #4
 800423c:	6949      	ldr	r1, [r1, #20]
 800423e:	6018      	str	r0, [r3, #0]
 8004240:	6813      	ldr	r3, [r2, #0]
 8004242:	062e      	lsls	r6, r5, #24
 8004244:	d501      	bpl.n	800424a <_printf_i+0x1a2>
 8004246:	6019      	str	r1, [r3, #0]
 8004248:	e002      	b.n	8004250 <_printf_i+0x1a8>
 800424a:	066d      	lsls	r5, r5, #25
 800424c:	d5fb      	bpl.n	8004246 <_printf_i+0x19e>
 800424e:	8019      	strh	r1, [r3, #0]
 8004250:	2300      	movs	r3, #0
 8004252:	9e04      	ldr	r6, [sp, #16]
 8004254:	6123      	str	r3, [r4, #16]
 8004256:	e7bb      	b.n	80041d0 <_printf_i+0x128>
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	1d11      	adds	r1, r2, #4
 800425c:	6019      	str	r1, [r3, #0]
 800425e:	6816      	ldr	r6, [r2, #0]
 8004260:	2100      	movs	r1, #0
 8004262:	0030      	movs	r0, r6
 8004264:	6862      	ldr	r2, [r4, #4]
 8004266:	f000 f831 	bl	80042cc <memchr>
 800426a:	2800      	cmp	r0, #0
 800426c:	d001      	beq.n	8004272 <_printf_i+0x1ca>
 800426e:	1b80      	subs	r0, r0, r6
 8004270:	6060      	str	r0, [r4, #4]
 8004272:	6863      	ldr	r3, [r4, #4]
 8004274:	6123      	str	r3, [r4, #16]
 8004276:	2300      	movs	r3, #0
 8004278:	9a04      	ldr	r2, [sp, #16]
 800427a:	7013      	strb	r3, [r2, #0]
 800427c:	e7a8      	b.n	80041d0 <_printf_i+0x128>
 800427e:	6923      	ldr	r3, [r4, #16]
 8004280:	0032      	movs	r2, r6
 8004282:	9906      	ldr	r1, [sp, #24]
 8004284:	9805      	ldr	r0, [sp, #20]
 8004286:	9d07      	ldr	r5, [sp, #28]
 8004288:	47a8      	blx	r5
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	d0aa      	beq.n	80041e4 <_printf_i+0x13c>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	079b      	lsls	r3, r3, #30
 8004292:	d415      	bmi.n	80042c0 <_printf_i+0x218>
 8004294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004296:	68e0      	ldr	r0, [r4, #12]
 8004298:	4298      	cmp	r0, r3
 800429a:	daa5      	bge.n	80041e8 <_printf_i+0x140>
 800429c:	0018      	movs	r0, r3
 800429e:	e7a3      	b.n	80041e8 <_printf_i+0x140>
 80042a0:	0022      	movs	r2, r4
 80042a2:	2301      	movs	r3, #1
 80042a4:	9906      	ldr	r1, [sp, #24]
 80042a6:	9805      	ldr	r0, [sp, #20]
 80042a8:	9e07      	ldr	r6, [sp, #28]
 80042aa:	3219      	adds	r2, #25
 80042ac:	47b0      	blx	r6
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	d098      	beq.n	80041e4 <_printf_i+0x13c>
 80042b2:	3501      	adds	r5, #1
 80042b4:	68e3      	ldr	r3, [r4, #12]
 80042b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	42ab      	cmp	r3, r5
 80042bc:	dcf0      	bgt.n	80042a0 <_printf_i+0x1f8>
 80042be:	e7e9      	b.n	8004294 <_printf_i+0x1ec>
 80042c0:	2500      	movs	r5, #0
 80042c2:	e7f7      	b.n	80042b4 <_printf_i+0x20c>
 80042c4:	0800468d 	.word	0x0800468d
 80042c8:	0800469e 	.word	0x0800469e

080042cc <memchr>:
 80042cc:	b2c9      	uxtb	r1, r1
 80042ce:	1882      	adds	r2, r0, r2
 80042d0:	4290      	cmp	r0, r2
 80042d2:	d101      	bne.n	80042d8 <memchr+0xc>
 80042d4:	2000      	movs	r0, #0
 80042d6:	4770      	bx	lr
 80042d8:	7803      	ldrb	r3, [r0, #0]
 80042da:	428b      	cmp	r3, r1
 80042dc:	d0fb      	beq.n	80042d6 <memchr+0xa>
 80042de:	3001      	adds	r0, #1
 80042e0:	e7f6      	b.n	80042d0 <memchr+0x4>

080042e2 <memcpy>:
 80042e2:	2300      	movs	r3, #0
 80042e4:	b510      	push	{r4, lr}
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d100      	bne.n	80042ec <memcpy+0xa>
 80042ea:	bd10      	pop	{r4, pc}
 80042ec:	5ccc      	ldrb	r4, [r1, r3]
 80042ee:	54c4      	strb	r4, [r0, r3]
 80042f0:	3301      	adds	r3, #1
 80042f2:	e7f8      	b.n	80042e6 <memcpy+0x4>

080042f4 <memmove>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	4288      	cmp	r0, r1
 80042f8:	d902      	bls.n	8004300 <memmove+0xc>
 80042fa:	188b      	adds	r3, r1, r2
 80042fc:	4298      	cmp	r0, r3
 80042fe:	d303      	bcc.n	8004308 <memmove+0x14>
 8004300:	2300      	movs	r3, #0
 8004302:	e007      	b.n	8004314 <memmove+0x20>
 8004304:	5c8b      	ldrb	r3, [r1, r2]
 8004306:	5483      	strb	r3, [r0, r2]
 8004308:	3a01      	subs	r2, #1
 800430a:	d2fb      	bcs.n	8004304 <memmove+0x10>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	5ccc      	ldrb	r4, [r1, r3]
 8004310:	54c4      	strb	r4, [r0, r3]
 8004312:	3301      	adds	r3, #1
 8004314:	429a      	cmp	r2, r3
 8004316:	d1fa      	bne.n	800430e <memmove+0x1a>
 8004318:	e7f8      	b.n	800430c <memmove+0x18>
	...

0800431c <_free_r>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	0005      	movs	r5, r0
 8004320:	2900      	cmp	r1, #0
 8004322:	d010      	beq.n	8004346 <_free_r+0x2a>
 8004324:	1f0c      	subs	r4, r1, #4
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	da00      	bge.n	800432e <_free_r+0x12>
 800432c:	18e4      	adds	r4, r4, r3
 800432e:	0028      	movs	r0, r5
 8004330:	f000 f918 	bl	8004564 <__malloc_lock>
 8004334:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <_free_r+0x90>)
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d105      	bne.n	8004348 <_free_r+0x2c>
 800433c:	6063      	str	r3, [r4, #4]
 800433e:	6014      	str	r4, [r2, #0]
 8004340:	0028      	movs	r0, r5
 8004342:	f000 f917 	bl	8004574 <__malloc_unlock>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	42a3      	cmp	r3, r4
 800434a:	d908      	bls.n	800435e <_free_r+0x42>
 800434c:	6821      	ldr	r1, [r4, #0]
 800434e:	1860      	adds	r0, r4, r1
 8004350:	4283      	cmp	r3, r0
 8004352:	d1f3      	bne.n	800433c <_free_r+0x20>
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	1841      	adds	r1, r0, r1
 800435a:	6021      	str	r1, [r4, #0]
 800435c:	e7ee      	b.n	800433c <_free_r+0x20>
 800435e:	001a      	movs	r2, r3
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <_free_r+0x4e>
 8004366:	42a3      	cmp	r3, r4
 8004368:	d9f9      	bls.n	800435e <_free_r+0x42>
 800436a:	6811      	ldr	r1, [r2, #0]
 800436c:	1850      	adds	r0, r2, r1
 800436e:	42a0      	cmp	r0, r4
 8004370:	d10b      	bne.n	800438a <_free_r+0x6e>
 8004372:	6820      	ldr	r0, [r4, #0]
 8004374:	1809      	adds	r1, r1, r0
 8004376:	1850      	adds	r0, r2, r1
 8004378:	6011      	str	r1, [r2, #0]
 800437a:	4283      	cmp	r3, r0
 800437c:	d1e0      	bne.n	8004340 <_free_r+0x24>
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	1841      	adds	r1, r0, r1
 8004384:	6011      	str	r1, [r2, #0]
 8004386:	6053      	str	r3, [r2, #4]
 8004388:	e7da      	b.n	8004340 <_free_r+0x24>
 800438a:	42a0      	cmp	r0, r4
 800438c:	d902      	bls.n	8004394 <_free_r+0x78>
 800438e:	230c      	movs	r3, #12
 8004390:	602b      	str	r3, [r5, #0]
 8004392:	e7d5      	b.n	8004340 <_free_r+0x24>
 8004394:	6821      	ldr	r1, [r4, #0]
 8004396:	1860      	adds	r0, r4, r1
 8004398:	4283      	cmp	r3, r0
 800439a:	d103      	bne.n	80043a4 <_free_r+0x88>
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	1841      	adds	r1, r0, r1
 80043a2:	6021      	str	r1, [r4, #0]
 80043a4:	6063      	str	r3, [r4, #4]
 80043a6:	6054      	str	r4, [r2, #4]
 80043a8:	e7ca      	b.n	8004340 <_free_r+0x24>
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	20000470 	.word	0x20000470

080043b0 <sbrk_aligned>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	4e0f      	ldr	r6, [pc, #60]	; (80043f0 <sbrk_aligned+0x40>)
 80043b4:	000d      	movs	r5, r1
 80043b6:	6831      	ldr	r1, [r6, #0]
 80043b8:	0004      	movs	r4, r0
 80043ba:	2900      	cmp	r1, #0
 80043bc:	d102      	bne.n	80043c4 <sbrk_aligned+0x14>
 80043be:	f000 f8bf 	bl	8004540 <_sbrk_r>
 80043c2:	6030      	str	r0, [r6, #0]
 80043c4:	0029      	movs	r1, r5
 80043c6:	0020      	movs	r0, r4
 80043c8:	f000 f8ba 	bl	8004540 <_sbrk_r>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d00a      	beq.n	80043e6 <sbrk_aligned+0x36>
 80043d0:	2303      	movs	r3, #3
 80043d2:	1cc5      	adds	r5, r0, #3
 80043d4:	439d      	bics	r5, r3
 80043d6:	42a8      	cmp	r0, r5
 80043d8:	d007      	beq.n	80043ea <sbrk_aligned+0x3a>
 80043da:	1a29      	subs	r1, r5, r0
 80043dc:	0020      	movs	r0, r4
 80043de:	f000 f8af 	bl	8004540 <_sbrk_r>
 80043e2:	1c43      	adds	r3, r0, #1
 80043e4:	d101      	bne.n	80043ea <sbrk_aligned+0x3a>
 80043e6:	2501      	movs	r5, #1
 80043e8:	426d      	negs	r5, r5
 80043ea:	0028      	movs	r0, r5
 80043ec:	bd70      	pop	{r4, r5, r6, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	20000474 	.word	0x20000474

080043f4 <_malloc_r>:
 80043f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043f6:	2203      	movs	r2, #3
 80043f8:	1ccb      	adds	r3, r1, #3
 80043fa:	4393      	bics	r3, r2
 80043fc:	3308      	adds	r3, #8
 80043fe:	0006      	movs	r6, r0
 8004400:	001f      	movs	r7, r3
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d232      	bcs.n	800446c <_malloc_r+0x78>
 8004406:	270c      	movs	r7, #12
 8004408:	42b9      	cmp	r1, r7
 800440a:	d831      	bhi.n	8004470 <_malloc_r+0x7c>
 800440c:	0030      	movs	r0, r6
 800440e:	f000 f8a9 	bl	8004564 <__malloc_lock>
 8004412:	4d32      	ldr	r5, [pc, #200]	; (80044dc <_malloc_r+0xe8>)
 8004414:	682b      	ldr	r3, [r5, #0]
 8004416:	001c      	movs	r4, r3
 8004418:	2c00      	cmp	r4, #0
 800441a:	d12e      	bne.n	800447a <_malloc_r+0x86>
 800441c:	0039      	movs	r1, r7
 800441e:	0030      	movs	r0, r6
 8004420:	f7ff ffc6 	bl	80043b0 <sbrk_aligned>
 8004424:	0004      	movs	r4, r0
 8004426:	1c43      	adds	r3, r0, #1
 8004428:	d11e      	bne.n	8004468 <_malloc_r+0x74>
 800442a:	682c      	ldr	r4, [r5, #0]
 800442c:	0025      	movs	r5, r4
 800442e:	2d00      	cmp	r5, #0
 8004430:	d14a      	bne.n	80044c8 <_malloc_r+0xd4>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	0029      	movs	r1, r5
 8004436:	18e3      	adds	r3, r4, r3
 8004438:	0030      	movs	r0, r6
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	f000 f880 	bl	8004540 <_sbrk_r>
 8004440:	9b01      	ldr	r3, [sp, #4]
 8004442:	4283      	cmp	r3, r0
 8004444:	d143      	bne.n	80044ce <_malloc_r+0xda>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	3703      	adds	r7, #3
 800444a:	1aff      	subs	r7, r7, r3
 800444c:	2303      	movs	r3, #3
 800444e:	439f      	bics	r7, r3
 8004450:	3708      	adds	r7, #8
 8004452:	2f0c      	cmp	r7, #12
 8004454:	d200      	bcs.n	8004458 <_malloc_r+0x64>
 8004456:	270c      	movs	r7, #12
 8004458:	0039      	movs	r1, r7
 800445a:	0030      	movs	r0, r6
 800445c:	f7ff ffa8 	bl	80043b0 <sbrk_aligned>
 8004460:	1c43      	adds	r3, r0, #1
 8004462:	d034      	beq.n	80044ce <_malloc_r+0xda>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	19df      	adds	r7, r3, r7
 8004468:	6027      	str	r7, [r4, #0]
 800446a:	e013      	b.n	8004494 <_malloc_r+0xa0>
 800446c:	2b00      	cmp	r3, #0
 800446e:	dacb      	bge.n	8004408 <_malloc_r+0x14>
 8004470:	230c      	movs	r3, #12
 8004472:	2500      	movs	r5, #0
 8004474:	6033      	str	r3, [r6, #0]
 8004476:	0028      	movs	r0, r5
 8004478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800447a:	6822      	ldr	r2, [r4, #0]
 800447c:	1bd1      	subs	r1, r2, r7
 800447e:	d420      	bmi.n	80044c2 <_malloc_r+0xce>
 8004480:	290b      	cmp	r1, #11
 8004482:	d917      	bls.n	80044b4 <_malloc_r+0xc0>
 8004484:	19e2      	adds	r2, r4, r7
 8004486:	6027      	str	r7, [r4, #0]
 8004488:	42a3      	cmp	r3, r4
 800448a:	d111      	bne.n	80044b0 <_malloc_r+0xbc>
 800448c:	602a      	str	r2, [r5, #0]
 800448e:	6863      	ldr	r3, [r4, #4]
 8004490:	6011      	str	r1, [r2, #0]
 8004492:	6053      	str	r3, [r2, #4]
 8004494:	0030      	movs	r0, r6
 8004496:	0025      	movs	r5, r4
 8004498:	f000 f86c 	bl	8004574 <__malloc_unlock>
 800449c:	2207      	movs	r2, #7
 800449e:	350b      	adds	r5, #11
 80044a0:	1d23      	adds	r3, r4, #4
 80044a2:	4395      	bics	r5, r2
 80044a4:	1aea      	subs	r2, r5, r3
 80044a6:	429d      	cmp	r5, r3
 80044a8:	d0e5      	beq.n	8004476 <_malloc_r+0x82>
 80044aa:	1b5b      	subs	r3, r3, r5
 80044ac:	50a3      	str	r3, [r4, r2]
 80044ae:	e7e2      	b.n	8004476 <_malloc_r+0x82>
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	e7ec      	b.n	800448e <_malloc_r+0x9a>
 80044b4:	6862      	ldr	r2, [r4, #4]
 80044b6:	42a3      	cmp	r3, r4
 80044b8:	d101      	bne.n	80044be <_malloc_r+0xca>
 80044ba:	602a      	str	r2, [r5, #0]
 80044bc:	e7ea      	b.n	8004494 <_malloc_r+0xa0>
 80044be:	605a      	str	r2, [r3, #4]
 80044c0:	e7e8      	b.n	8004494 <_malloc_r+0xa0>
 80044c2:	0023      	movs	r3, r4
 80044c4:	6864      	ldr	r4, [r4, #4]
 80044c6:	e7a7      	b.n	8004418 <_malloc_r+0x24>
 80044c8:	002c      	movs	r4, r5
 80044ca:	686d      	ldr	r5, [r5, #4]
 80044cc:	e7af      	b.n	800442e <_malloc_r+0x3a>
 80044ce:	230c      	movs	r3, #12
 80044d0:	0030      	movs	r0, r6
 80044d2:	6033      	str	r3, [r6, #0]
 80044d4:	f000 f84e 	bl	8004574 <__malloc_unlock>
 80044d8:	e7cd      	b.n	8004476 <_malloc_r+0x82>
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	20000470 	.word	0x20000470

080044e0 <_realloc_r>:
 80044e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044e2:	0007      	movs	r7, r0
 80044e4:	000e      	movs	r6, r1
 80044e6:	0014      	movs	r4, r2
 80044e8:	2900      	cmp	r1, #0
 80044ea:	d105      	bne.n	80044f8 <_realloc_r+0x18>
 80044ec:	0011      	movs	r1, r2
 80044ee:	f7ff ff81 	bl	80043f4 <_malloc_r>
 80044f2:	0005      	movs	r5, r0
 80044f4:	0028      	movs	r0, r5
 80044f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044f8:	2a00      	cmp	r2, #0
 80044fa:	d103      	bne.n	8004504 <_realloc_r+0x24>
 80044fc:	f7ff ff0e 	bl	800431c <_free_r>
 8004500:	0025      	movs	r5, r4
 8004502:	e7f7      	b.n	80044f4 <_realloc_r+0x14>
 8004504:	f000 f83e 	bl	8004584 <_malloc_usable_size_r>
 8004508:	9001      	str	r0, [sp, #4]
 800450a:	4284      	cmp	r4, r0
 800450c:	d803      	bhi.n	8004516 <_realloc_r+0x36>
 800450e:	0035      	movs	r5, r6
 8004510:	0843      	lsrs	r3, r0, #1
 8004512:	42a3      	cmp	r3, r4
 8004514:	d3ee      	bcc.n	80044f4 <_realloc_r+0x14>
 8004516:	0021      	movs	r1, r4
 8004518:	0038      	movs	r0, r7
 800451a:	f7ff ff6b 	bl	80043f4 <_malloc_r>
 800451e:	1e05      	subs	r5, r0, #0
 8004520:	d0e8      	beq.n	80044f4 <_realloc_r+0x14>
 8004522:	9b01      	ldr	r3, [sp, #4]
 8004524:	0022      	movs	r2, r4
 8004526:	429c      	cmp	r4, r3
 8004528:	d900      	bls.n	800452c <_realloc_r+0x4c>
 800452a:	001a      	movs	r2, r3
 800452c:	0031      	movs	r1, r6
 800452e:	0028      	movs	r0, r5
 8004530:	f7ff fed7 	bl	80042e2 <memcpy>
 8004534:	0031      	movs	r1, r6
 8004536:	0038      	movs	r0, r7
 8004538:	f7ff fef0 	bl	800431c <_free_r>
 800453c:	e7da      	b.n	80044f4 <_realloc_r+0x14>
	...

08004540 <_sbrk_r>:
 8004540:	2300      	movs	r3, #0
 8004542:	b570      	push	{r4, r5, r6, lr}
 8004544:	4d06      	ldr	r5, [pc, #24]	; (8004560 <_sbrk_r+0x20>)
 8004546:	0004      	movs	r4, r0
 8004548:	0008      	movs	r0, r1
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	f7fc fd10 	bl	8000f70 <_sbrk>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d103      	bne.n	800455c <_sbrk_r+0x1c>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d000      	beq.n	800455c <_sbrk_r+0x1c>
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	bd70      	pop	{r4, r5, r6, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	20000478 	.word	0x20000478

08004564 <__malloc_lock>:
 8004564:	b510      	push	{r4, lr}
 8004566:	4802      	ldr	r0, [pc, #8]	; (8004570 <__malloc_lock+0xc>)
 8004568:	f000 f814 	bl	8004594 <__retarget_lock_acquire_recursive>
 800456c:	bd10      	pop	{r4, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	2000047c 	.word	0x2000047c

08004574 <__malloc_unlock>:
 8004574:	b510      	push	{r4, lr}
 8004576:	4802      	ldr	r0, [pc, #8]	; (8004580 <__malloc_unlock+0xc>)
 8004578:	f000 f80d 	bl	8004596 <__retarget_lock_release_recursive>
 800457c:	bd10      	pop	{r4, pc}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	2000047c 	.word	0x2000047c

08004584 <_malloc_usable_size_r>:
 8004584:	1f0b      	subs	r3, r1, #4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	1f18      	subs	r0, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	da01      	bge.n	8004592 <_malloc_usable_size_r+0xe>
 800458e:	580b      	ldr	r3, [r1, r0]
 8004590:	18c0      	adds	r0, r0, r3
 8004592:	4770      	bx	lr

08004594 <__retarget_lock_acquire_recursive>:
 8004594:	4770      	bx	lr

08004596 <__retarget_lock_release_recursive>:
 8004596:	4770      	bx	lr

08004598 <_init>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr

080045a4 <_fini>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045aa:	bc08      	pop	{r3}
 80045ac:	469e      	mov	lr, r3
 80045ae:	4770      	bx	lr
